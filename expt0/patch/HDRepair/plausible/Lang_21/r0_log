debug=true
showme=
filename=
remainingopts=List()
FullTempDir=/gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/default
AppDir=/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/target/classes
TestDir=/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/target/test-classes
pkg: [Ljava.lang.String;@26f67b76
[/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/all0.jar:/gpfs/main/home/qx5/ssFix2/lib/commons-lang3-3.5.jar:/gpfs/main/home/qx5/ssFix2/lib/myprinter.jar:/gpfs/main/home/qx5/ssFix2/lib/evosuite-1.0.2.jar, /usr/lib/jvm/java-8-oracle/jre/lib/rt.jar]
Failing Test: org.apache.commons.lang3.time.DateUtilsTest
Test size:98
Negative size: 1
Gzoltar Project Loc: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/default
LIB: /gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/all0.jar:/gpfs/main/home/qx5/ssFix2/lib/commons-lang3-3.5.jar:/gpfs/main/home/qx5/ssFix2/lib/myprinter.jar:/gpfs/main/home/qx5/ssFix2/lib/evosuite-1.0.2.jar
LIB: /usr/lib/jvm/java-8-oracle/jre/lib/rt.jar
ClassPaths: :/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/com.gzoltar-0.1.1-jar-with-dependencies.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/commons-io-2.4.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/gumtree.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/hamcrest-core-1.3.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/junit-4.11.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/largescale_benchmark.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/log4j-1.2.17.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/maven-invoker-2.1.1.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/org.eclipse.text_3.5.0.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/parsemis.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/parsemis_working.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/plexus-utils-1.5.7.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/uncommons-maths-1.2.2.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/watchmaker-framework-0.7.1.jar:/data/people/qx5/bugfixes-master/historicalfixv2/allLibs/org.eclipse.jdt-4.4.2/binary/*:/data/people/qx5/bugfixes-master/historicalfixv2/build:/gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/default:/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/target/classes:/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/target/test-classes:/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/all0.jar:/gpfs/main/home/qx5/ssFix2/lib/commons-lang3-3.5.jar:/gpfs/main/home/qx5/ssFix2/lib/myprinter.jar:/gpfs/main/home/qx5/ssFix2/lib/evosuite-1.0.2.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/gpfs/data/people/qx5/defects4j-bugs/langs/projs/Lang_21_buggy/all0.jar:/gpfs/main/home/qx5/ssFix2/lib/commons-lang3-3.5.jar:/gpfs/main/home/qx5/ssFix2/lib/myprinter.jar:/gpfs/main/home/qx5/ssFix2/lib/evosuite-1.0.2.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar
>>> Begin subprocess output
 Run JUnit Test: org.apache.commons.lang3.RandomStringUtilsTest
Number of testcases to execute : 9
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testExceptions, DisplayName: testExceptions(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testExceptions
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomStringUtilsHomog, DisplayName: testRandomStringUtilsHomog(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomStringUtilsHomog
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAscii, DisplayName: testRandomAscii(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAscii
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testLang100, DisplayName: testLang100(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testLang100
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAlphaNumeric, DisplayName: testRandomAlphaNumeric(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAlphaNumeric
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAlphabetic, DisplayName: testRandomAlphabetic(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomAlphabetic
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomNumeric, DisplayName: testRandomNumeric(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomNumeric
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomStringUtils, DisplayName: testRandomStringUtils(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testRandomStringUtils
* Started : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.RandomStringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.RandomStringUtilsTest, MethodName: testConstructor
Number of testcases executed : 9
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.WordUtilsTest
Number of testcases to execute : 12
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeWithDelimiters_String, DisplayName: testCapitalizeWithDelimiters_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeWithDelimiters_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testUncapitalize_String, DisplayName: testUncapitalize_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testUncapitalize_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testWrap_StringIntStringBoolean, DisplayName: testWrap_StringIntStringBoolean(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testWrap_StringIntStringBoolean
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalize_String, DisplayName: testCapitalize_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalize_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeFully_String, DisplayName: testCapitalizeFully_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeFully_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testWrap_StringInt, DisplayName: testWrap_StringInt(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testWrap_StringInt
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testInitials_String_charArray, DisplayName: testInitials_String_charArray(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testInitials_String_charArray
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testUncapitalizeWithDelimiters_String, DisplayName: testUncapitalizeWithDelimiters_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testUncapitalizeWithDelimiters_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testInitials_String, DisplayName: testInitials_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testInitials_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeFullyWithDelimiters_String, DisplayName: testCapitalizeFullyWithDelimiters_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testCapitalizeFullyWithDelimiters_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testSwapCase_String, DisplayName: testSwapCase_String(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testSwapCase_String
* Started : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.text.WordUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.text.WordUtilsTest, MethodName: testConstructor
Number of testcases executed : 12
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsTrimEmptyTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripStart_StringString, DisplayName: testStripStart_StringString(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripStart_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripAll, DisplayName: testStripAll(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripAll
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrim, DisplayName: testTrim(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrim
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripToNull_String, DisplayName: testStripToNull_String(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripToNull_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsNotBlank, DisplayName: testIsNotBlank(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsNotBlank
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsNotEmpty, DisplayName: testIsNotEmpty(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsNotEmpty
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStrip_StringString, DisplayName: testStrip_StringString(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStrip_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripToEmpty_String, DisplayName: testStripToEmpty_String(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripToEmpty_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrimToEmpty, DisplayName: testTrimToEmpty(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrimToEmpty
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrimToNull, DisplayName: testTrimToNull(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testTrimToNull
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripAccents, DisplayName: testStripAccents(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripAccents
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripEnd_StringString, DisplayName: testStripEnd_StringString(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStripEnd_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsBlank, DisplayName: testIsBlank(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsBlank
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsEmpty, DisplayName: testIsEmpty(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testIsEmpty
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStrip_String, DisplayName: testStrip_String(org.apache.commons.lang3.StringUtilsTrimEmptyTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTrimEmptyTest, MethodName: testStrip_String
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.DurationFormatUtilsTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testDurationsByBruteForce, DisplayName: testDurationsByBruteForce(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testDurationsByBruteForce
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatPeriod, DisplayName: testFormatPeriod(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatPeriod
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testLowDurations, DisplayName: testLowDurations(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testLowDurations
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testLexx, DisplayName: testLexx(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testLexx
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationHMS, DisplayName: testFormatDurationHMS(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationHMS
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationISO, DisplayName: testFormatDurationISO(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationISO
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatPeriodISO, DisplayName: testFormatPeriodISO(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatPeriodISO
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testEdgeDurations, DisplayName: testEdgeDurations(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testEdgeDurations
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationPluralWords, DisplayName: testFormatDurationPluralWords(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationPluralWords
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testBugzilla38401, DisplayName: testBugzilla38401(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testBugzilla38401
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDuration, DisplayName: testFormatDuration(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDuration
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationWords, DisplayName: testFormatDurationWords(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testFormatDurationWords
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testJiraLang281, DisplayName: testJiraLang281(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testJiraLang281
* Started : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.time.DurationFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DurationFormatUtilsTest, MethodName: testConstructor
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsTest
Number of testcases to execute : 82
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IterableChar, DisplayName: testJoin_IterableChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IterableChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringInt, DisplayName: testRightPad_StringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDeleteWhitespace_String, DisplayName: testDeleteWhitespace_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDeleteWhitespace_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemove_String, DisplayName: testRemove_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemove_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_ArrayChar, DisplayName: testJoin_ArrayChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_ArrayChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifferenceAt_StringString, DisplayName: testDifferenceAt_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifferenceAt_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByCharacterType, DisplayName: testSplitByCharacterType(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByCharacterType
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthStringBuffer, DisplayName: testLengthStringBuffer(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthStringBuffer
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testNormalizeSpace, DisplayName: testNormalizeSpace(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testNormalizeSpace
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifferenceAt_StringArray, DisplayName: testDifferenceAt_StringArray(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifferenceAt_StringArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRepeat_StringStringInt, DisplayName: testRepeat_StringStringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRepeat_StringStringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testOverlay_StringStringIntInt, DisplayName: testOverlay_StringStringIntInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testOverlay_StringStringIntInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConcat_Objects, DisplayName: testConcat_Objects(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConcat_Objects
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringString, DisplayName: testDefaultIfBlank_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_ArrayString, DisplayName: testJoin_ArrayString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_ArrayString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testIsAllLowerCase, DisplayName: testIsAllLowerCase(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testIsAllLowerCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLANG666, DisplayName: testLANG666(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLANG666
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReverseDelimited_StringChar, DisplayName: testReverseDelimited_StringChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReverseDelimited_StringChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testChomp, DisplayName: testChomp(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testChomp
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testEMPTY, DisplayName: testEMPTY(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testEMPTY
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testChop, DisplayName: testChop(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testChop
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IterableString, DisplayName: testJoin_IterableString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IterableString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_CharBuffers, DisplayName: testDefaultIfEmpty_CharBuffers(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_CharBuffers
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_StringString_StringStringInt, DisplayName: testSplitPreserveAllTokens_StringString_StringStringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_StringString_StringStringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringBuffers, DisplayName: testDefaultIfBlank_StringBuffers(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringBuffers
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveStart, DisplayName: testRemoveStart(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveStart
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemove_char, DisplayName: testRemove_char(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemove_char
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceChars_StringCharChar, DisplayName: testReplaceChars_StringCharChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceChars_StringCharChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviateMiddle, DisplayName: testAbbreviateMiddle(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviateMiddle
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testStartsWithAny, DisplayName: testStartsWithAny(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testStartsWithAny
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testIsAllUpperCase, DisplayName: testIsAllUpperCase(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testIsAllUpperCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveEndIgnoreCase, DisplayName: testRemoveEndIgnoreCase(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveEndIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringIntChar, DisplayName: testCenter_StringIntChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringIntChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringBuffers, DisplayName: testDefaultIfEmpty_StringBuffers(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringBuffers
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceChars_StringStringString, DisplayName: testReplaceChars_StringStringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceChars_StringStringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringIntString, DisplayName: testLeftPad_StringIntString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringIntString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLang623, DisplayName: testLang623(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLang623
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_StringChar, DisplayName: testSplitPreserveAllTokens_StringChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_StringChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringString, DisplayName: testDefaultIfEmpty_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringInt, DisplayName: testCenter_StringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLength_CharBuffer, DisplayName: testLength_CharBuffer(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLength_CharBuffer
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testGetCommonPrefix_StringArray, DisplayName: testGetCommonPrefix_StringArray(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testGetCommonPrefix_StringArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_String, DisplayName: testSplit_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthString, DisplayName: testLengthString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefault_String, DisplayName: testDefault_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefault_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringIntChar, DisplayName: testLeftPad_StringIntChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringIntChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRepeat_StringInt, DisplayName: testRepeat_StringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRepeat_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviate_StringInt, DisplayName: testAbbreviate_StringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviate_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringBuilders, DisplayName: testDefaultIfBlank_StringBuilders(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_StringBuilders
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefault_StringString, DisplayName: testDefault_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefault_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthStringBuilder, DisplayName: testLengthStringBuilder(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLengthStringBuilder
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IteratorString, DisplayName: testJoin_IteratorString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IteratorString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringIntChar, DisplayName: testRightPad_StringIntChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringIntChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testGetLevenshteinDistance_StringString, DisplayName: testGetLevenshteinDistance_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testGetLevenshteinDistance_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_Objectarray, DisplayName: testJoin_Objectarray(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_Objectarray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviate_StringIntInt, DisplayName: testAbbreviate_StringIntInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testAbbreviate_StringIntInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringArrayStringArray, DisplayName: testReplace_StringStringArrayStringArray(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringArrayStringArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_String, DisplayName: testSplitPreserveAllTokens_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitPreserveAllTokens_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceOnce_StringStringString, DisplayName: testReplaceOnce_StringStringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplaceOnce_StringStringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IteratorChar, DisplayName: testJoin_IteratorChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testJoin_IteratorChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReverse_String, DisplayName: testReverse_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReverse_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringString, DisplayName: testReplace_StringStringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeSeparatorPreserveAllTokens_StringStringInt, DisplayName: testSplitByWholeSeparatorPreserveAllTokens_StringStringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeSeparatorPreserveAllTokens_StringStringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCaseFunctions, DisplayName: testCaseFunctions(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCaseFunctions
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeString_StringStringBooleanInt, DisplayName: testSplitByWholeString_StringStringBooleanInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeString_StringStringBooleanInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeString_StringStringBoolean, DisplayName: testSplitByWholeString_StringStringBoolean(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByWholeString_StringStringBoolean
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringBuilders, DisplayName: testDefaultIfEmpty_StringBuilders(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfEmpty_StringBuilders
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifference_StringString, DisplayName: testDifference_StringString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDifference_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringInt, DisplayName: testLeftPad_StringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testLeftPad_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_CharBuffers, DisplayName: testDefaultIfBlank_CharBuffers(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testDefaultIfBlank_CharBuffers
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringArrayStringArrayBoolean, DisplayName: testReplace_StringStringArrayStringArrayBoolean(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringArrayStringArrayBoolean
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_StringChar, DisplayName: testSplit_StringChar(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_StringChar
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringIntString, DisplayName: testRightPad_StringIntString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRightPad_StringIntString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSwapCase_String, DisplayName: testSwapCase_String(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSwapCase_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveStartIgnoreCase, DisplayName: testRemoveStartIgnoreCase(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveStartIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_StringString_StringStringInt, DisplayName: testSplit_StringString_StringStringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplit_StringString_StringStringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveEnd, DisplayName: testRemoveEnd(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testRemoveEnd
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConcatWith_StringObjects, DisplayName: testConcatWith_StringObjects(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConcatWith_StringObjects
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringIntString, DisplayName: testCenter_StringIntString(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testCenter_StringIntString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByCharacterTypeCamelCase, DisplayName: testSplitByCharacterTypeCamelCase(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testSplitByCharacterTypeCamelCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringStringInt, DisplayName: testReplace_StringStringStringInt(org.apache.commons.lang3.StringUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsTest, MethodName: testReplace_StringStringStringInt
Number of testcases executed : 82
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrTokenizerTest
Number of testcases to execute : 55
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVSimple, DisplayName: testCSVSimple(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVSimple
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicDelim1, DisplayName: testBasicDelim1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicDelim1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicDelim2, DisplayName: testBasicDelim2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicDelim2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicEmpty1, DisplayName: testBasicEmpty1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicEmpty1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicEmpty2, DisplayName: testBasicEmpty2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicEmpty2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray_char, DisplayName: testConstructor_charArray_char(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray_char
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTSV, DisplayName: testTSV(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTSV
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testIteration, DisplayName: testIteration(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testIteration
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String_char_char, DisplayName: testConstructor_String_char_char(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String_char_char
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset, DisplayName: testReset(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset_charArray, DisplayName: testReset_charArray(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset_charArray
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTokenizeSubclassOutputChange, DisplayName: testTokenizeSubclassOutputChange(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTokenizeSubclassOutputChange
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testListArray, DisplayName: testListArray(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testListArray
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted1, DisplayName: testBasicQuoted1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted2, DisplayName: testBasicQuoted2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted3, DisplayName: testBasicQuoted3(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted3
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted4, DisplayName: testBasicQuoted4(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted4
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted5, DisplayName: testBasicQuoted5(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted5
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted6, DisplayName: testBasicQuoted6(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted6
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted7, DisplayName: testBasicQuoted7(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuoted7
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneNotSupportedException, DisplayName: testCloneNotSupportedException(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneNotSupportedException
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset_String, DisplayName: testReset_String(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testReset_String
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTSVEmpty, DisplayName: testTSVEmpty(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTSVEmpty
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String, DisplayName: testConstructor_String(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneNull, DisplayName: testCloneNull(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneNull
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test1, DisplayName: test1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test2, DisplayName: test2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test3, DisplayName: test3(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test3
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test4, DisplayName: test4(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test4
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test5, DisplayName: test5(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test5
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test6, DisplayName: test6(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test6
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test7, DisplayName: test7(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test7
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test8, DisplayName: test8(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: test8
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String_char, DisplayName: testConstructor_String_char(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_String_char
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTokenizeSubclassInputChange, DisplayName: testTokenizeSubclassInputChange(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testTokenizeSubclassInputChange
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVEmpty, DisplayName: testCSVEmpty(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVEmpty
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray, DisplayName: testConstructor_charArray(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray_char_char, DisplayName: testConstructor_charArray_char_char(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testConstructor_charArray_char_char
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVSimpleNeedsTrim, DisplayName: testCSVSimpleNeedsTrim(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCSVSimpleNeedsTrim
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed1, DisplayName: testBasicIgnoreTrimmed1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed2, DisplayName: testBasicIgnoreTrimmed2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed3, DisplayName: testBasicIgnoreTrimmed3(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed3
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed4, DisplayName: testBasicIgnoreTrimmed4(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicIgnoreTrimmed4
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuotedTrimmed1, DisplayName: testBasicQuotedTrimmed1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicQuotedTrimmed1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic1, DisplayName: testBasic1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic2, DisplayName: testBasic2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic3, DisplayName: testBasic3(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic3
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic4, DisplayName: testBasic4(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic4
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic5, DisplayName: testBasic5(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasic5
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testGetContent, DisplayName: testGetContent(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testGetContent
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneReset, DisplayName: testCloneReset(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testCloneReset
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicTrimmed1, DisplayName: testBasicTrimmed1(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicTrimmed1
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicTrimmed2, DisplayName: testBasicTrimmed2(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testBasicTrimmed2
* Started : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testChaining, DisplayName: testChaining(org.apache.commons.lang3.text.StrTokenizerTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrTokenizerTest, MethodName: testChaining
Number of testcases executed : 55
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.BitFieldTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetBoolean, DisplayName: testSetBoolean(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetBoolean
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetValue, DisplayName: testGetValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetValue
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testClearShort, DisplayName: testClearShort(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testClearShort
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSet, DisplayName: testSet(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSet
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testClear, DisplayName: testClear(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testClear
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testIsSet, DisplayName: testIsSet(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testIsSet
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testByte, DisplayName: testByte(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testByte
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetShortValue, DisplayName: testGetShortValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetShortValue
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShortBoolean, DisplayName: testSetShortBoolean(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShortBoolean
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShortValue, DisplayName: testSetShortValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShortValue
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testIsAllSet, DisplayName: testIsAllSet(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testIsAllSet
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetShortRawValue, DisplayName: testGetShortRawValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetShortRawValue
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetRawValue, DisplayName: testGetRawValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testGetRawValue
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShort, DisplayName: testSetShort(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetShort
* Started : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetValue, DisplayName: testSetValue(org.apache.commons.lang3.BitFieldTest)
* Finished : ClasseName: org.apache.commons.lang3.BitFieldTest, MethodName: testSetValue
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.DateUtilsRoundingTest
Number of testcases to execute : 22
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMilliSecond, DisplayName: testRoundMilliSecond(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMilliSecond
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundDayOfMonth, DisplayName: testRoundDayOfMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundDayOfMonth
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMinute, DisplayName: testRoundMinute(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMinute
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundSecond, DisplayName: testRoundSecond(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundSecond
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMonth, DisplayName: testRoundMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundMonth
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateSemiMonth, DisplayName: testTruncateSemiMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateSemiMonth
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMinute, DisplayName: testTruncateMinute(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMinute
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundSemiMonth, DisplayName: testRoundSemiMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundSemiMonth
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateSecond, DisplayName: testTruncateSecond(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateSecond
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundAmPm, DisplayName: testRoundAmPm(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundAmPm
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundDate, DisplayName: testRoundDate(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundHour, DisplayName: testRoundHour(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundHour
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundYear, DisplayName: testRoundYear(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundYear
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMilliSecond, DisplayName: testTruncateMilliSecond(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMilliSecond
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateHourOfDay, DisplayName: testTruncateHourOfDay(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateHourOfDay
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMonth, DisplayName: testTruncateMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateMonth
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundHourOfDay, DisplayName: testRoundHourOfDay(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testRoundHourOfDay
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateAmPm, DisplayName: testTruncateAmPm(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateAmPm
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateDate, DisplayName: testTruncateDate(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateHour, DisplayName: testTruncateHour(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateHour
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateYear, DisplayName: testTruncateYear(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateYear
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateDayOfMonth, DisplayName: testTruncateDayOfMonth(org.apache.commons.lang3.time.DateUtilsRoundingTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsRoundingTest, MethodName: testTruncateDayOfMonth
Number of testcases executed : 22
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.DefaultToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.DefaultToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.DefaultToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ArrayUtilsTest
Number of testcases to execute : 145
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyCharObject, DisplayName: testNullToEmptyCharObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyCharObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_double_double, DisplayName: testToPrimitive_double_double(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_double_double
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyDoubleObject, DisplayName: testNullToEmptyDoubleObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyDoubleObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayBoolean, DisplayName: testSubarrayBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyBoolean, DisplayName: testNullToEmptyBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyInt, DisplayName: testNullToEmptyInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_float, DisplayName: testToPrimitive_float(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_float
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_short, DisplayName: testToPrimitive_short(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_short
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyByte, DisplayName: testNullToEmptyByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyChar, DisplayName: testNullToEmptyChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyLong, DisplayName: testNullToEmptyLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyDouble, DisplayName: testNullToEmptyDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsDoubleTolerance, DisplayName: testContainsDoubleTolerance(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsDoubleTolerance
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_byte_byte, DisplayName: testToPrimitive_byte_byte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_byte_byte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_short_short, DisplayName: testToPrimitive_short_short(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_short_short
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfShortWithStartIndex, DisplayName: testLastIndexOfShortWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfShortWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleWithStartIndex, DisplayName: testIndexOfDoubleWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameType, DisplayName: testSameType(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameType
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreation, DisplayName: testArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreation
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfBoolean, DisplayName: testIndexOfBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyObject, DisplayName: testNullToEmptyObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseInt, DisplayName: testReverseInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDouble, DisplayName: testLastIndexOfDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyString, DisplayName: testNullToEmptyString(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyString
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyShortObject, DisplayName: testNullToEmptyShortObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyShortObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEmptyPrimitives, DisplayName: testIsEmptyPrimitives(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEmptyPrimitives
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testClone, DisplayName: testClone(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testClone
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthInt, DisplayName: testSameLengthInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToMap, DisplayName: testToMap(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToMap
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOf, DisplayName: testLastIndexOf(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOf
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseDouble, DisplayName: testReverseDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsByte, DisplayName: testContainsByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsChar, DisplayName: testContainsChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsLong, DisplayName: testContainsLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfLongWithStartIndex, DisplayName: testIndexOfLongWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfLongWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_boolean, DisplayName: testToPrimitive_boolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_boolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfByte, DisplayName: testLastIndexOfByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfChar, DisplayName: testLastIndexOfChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfLong, DisplayName: testLastIndexOfLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneDouble, DisplayName: testCloneDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleTolerance, DisplayName: testIndexOfDoubleTolerance(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleTolerance
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfByteWithStartIndex, DisplayName: testIndexOfByteWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfByteWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_double, DisplayName: testToPrimitive_double(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_double
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayFloat, DisplayName: testSubarrayFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayShort, DisplayName: testSubarrayShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfBoolean, DisplayName: testLastIndexOfBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayInt, DisplayName: testSubarrayInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfIntWithStartIndex, DisplayName: testLastIndexOfIntWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfIntWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreationWithDifferentTypes, DisplayName: testArrayCreationWithDifferentTypes(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreationWithDifferentTypes
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleWithStartIndexTolerance, DisplayName: testIndexOfDoubleWithStartIndexTolerance(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDoubleWithStartIndexTolerance
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreationWithGeneralReturnType, DisplayName: testArrayCreationWithGeneralReturnType(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testArrayCreationWithGeneralReturnType
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsInt, DisplayName: testContainsInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleWithStartIndexTolerance, DisplayName: testLastIndexOfDoubleWithStartIndexTolerance(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleWithStartIndexTolerance
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_double, DisplayName: testToObject_double(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_double
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfInt, DisplayName: testLastIndexOfInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayByte, DisplayName: testSubarrayByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayLong, DisplayName: testSubarrayLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrChar, DisplayName: testSubarrChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsNotEmptyPrimitives, DisplayName: testIsNotEmptyPrimitives(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsNotEmptyPrimitives
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_byte, DisplayName: testToObject_byte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_byte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_char, DisplayName: testToObject_char(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_char
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_long, DisplayName: testToObject_long(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_long
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyFloat, DisplayName: testNullToEmptyFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_float_float, DisplayName: testToPrimitive_float_float(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_float_float
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyShort, DisplayName: testNullToEmptyShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfLongWithStartIndex, DisplayName: testLastIndexOfLongWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfLongWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsFloat, DisplayName: testContainsFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsShort, DisplayName: testContainsShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsNotEmptyObject, DisplayName: testIsNotEmptyObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsNotEmptyObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_int, DisplayName: testToObject_int(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_int
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsBoolean, DisplayName: testContainsBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfInt, DisplayName: testIndexOfInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfFloat, DisplayName: testIndexOfFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfFloatWithStartIndex, DisplayName: testIndexOfFloatWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfFloatWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneByte, DisplayName: testCloneByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneChar, DisplayName: testCloneChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneLong, DisplayName: testCloneLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfShort, DisplayName: testIndexOfShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEquals, DisplayName: testIsEquals(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEquals
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testEmptyArrayCreation, DisplayName: testEmptyArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testEmptyArrayCreation
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfCharWithStartIndex, DisplayName: testIndexOfCharWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfCharWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfByteWithStartIndex, DisplayName: testLastIndexOfByteWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfByteWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContains, DisplayName: testContains(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContains
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_int, DisplayName: testToPrimitive_int(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_int
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyFloatObject, DisplayName: testNullToEmptyFloatObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyFloatObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneBoolean, DisplayName: testCloneBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndirectArrayCreation, DisplayName: testIndirectArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndirectArrayCreation
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_boolean, DisplayName: testToObject_boolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_boolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthDouble, DisplayName: testSameLengthDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_long_long, DisplayName: testToPrimitive_long_long(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_long_long
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfBooleanWithStartIndex, DisplayName: testIndexOfBooleanWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfBooleanWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfByte, DisplayName: testIndexOfByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfChar, DisplayName: testIndexOfChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfLong, DisplayName: testIndexOfLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyLongObject, DisplayName: testNullToEmptyLongObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyLongObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverse, DisplayName: testReverse(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverse
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleTolerance, DisplayName: testLastIndexOfDoubleTolerance(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleTolerance
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_intNull, DisplayName: testToPrimitive_intNull(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_intNull
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_int_int, DisplayName: testToPrimitive_int_int(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_int_int
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayDouble, DisplayName: testSubarrayDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseByte, DisplayName: testReverseByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseChar, DisplayName: testReverseChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseLong, DisplayName: testReverseLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseFloat, DisplayName: testReverseFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfWithStartIndex, DisplayName: testLastIndexOfWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseShort, DisplayName: testReverseShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDouble, DisplayName: testIndexOfDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfBooleanWithStartIndex, DisplayName: testLastIndexOfBooleanWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfBooleanWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfFloatWithStartIndex, DisplayName: testLastIndexOfFloatWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfFloatWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthFloat, DisplayName: testSameLengthFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayObject, DisplayName: testSubarrayObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSubarrayObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthShort, DisplayName: testSameLengthShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfCharWithStartIndex, DisplayName: testLastIndexOfCharWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfCharWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyIntObject, DisplayName: testNullToEmptyIntObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyIntObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_float, DisplayName: testToObject_float(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_float
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_short, DisplayName: testToObject_short(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToObject_short
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testGetLength, DisplayName: testGetLength(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testGetLength
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleWithStartIndex, DisplayName: testLastIndexOfDoubleWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfDoubleWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthByte, DisplayName: testSameLengthByte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthChar, DisplayName: testSameLengthChar(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthLong, DisplayName: testSameLengthLong(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfFloat, DisplayName: testLastIndexOfFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfShort, DisplayName: testLastIndexOfShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testLastIndexOfShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneFloat, DisplayName: testCloneFloat(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneShort, DisplayName: testCloneShort(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_byte, DisplayName: testToPrimitive_byte(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_byte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_char, DisplayName: testToPrimitive_char(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_char
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_long, DisplayName: testToPrimitive_long(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_long
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEmptyObject, DisplayName: testIsEmptyObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIsEmptyObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOf, DisplayName: testIndexOf(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOf
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfShortWithStartIndex, DisplayName: testIndexOfShortWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfShortWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLength, DisplayName: testSameLength(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLength
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfIntWithStartIndex, DisplayName: testIndexOfIntWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfIntWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneInt, DisplayName: testCloneInt(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testCloneInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyByteObject, DisplayName: testNullToEmptyByteObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyByteObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthBoolean, DisplayName: testSameLengthBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testSameLengthBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_char_char, DisplayName: testToPrimitive_char_char(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_char_char
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndirectEmptyArrayCreation, DisplayName: testIndirectEmptyArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndirectEmptyArrayCreation
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseBoolean, DisplayName: testReverseBoolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testReverseBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_boolean_boolean, DisplayName: testToPrimitive_boolean_boolean(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testToPrimitive_boolean_boolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyBooleanObject, DisplayName: testNullToEmptyBooleanObject(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testNullToEmptyBooleanObject
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfWithStartIndex, DisplayName: testIndexOfWithStartIndex(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testIndexOfWithStartIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsDouble, DisplayName: testContainsDouble(org.apache.commons.lang3.ArrayUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsTest, MethodName: testContainsDouble
Number of testcases executed : 145
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.EntityArraysTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testConstructorExists, DisplayName: testConstructorExists(org.apache.commons.lang3.text.translate.EntityArraysTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testConstructorExists
* Started : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testISO8859_1_ESCAPE, DisplayName: testISO8859_1_ESCAPE(org.apache.commons.lang3.text.translate.EntityArraysTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testISO8859_1_ESCAPE
* Started : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testHTML40_EXTENDED_ESCAPE, DisplayName: testHTML40_EXTENDED_ESCAPE(org.apache.commons.lang3.text.translate.EntityArraysTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.EntityArraysTest, MethodName: testHTML40_EXTENDED_ESCAPE
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharUtilsTest
Number of testcases to execute : 23
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAscii_char, DisplayName: testIsAscii_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAscii_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToString_Character, DisplayName: testToString_Character(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToString_Character
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphanumeric_char, DisplayName: testIsAsciiAlphanumeric_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphanumeric_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_Character, DisplayName: testToChar_Character(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_Character
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_String, DisplayName: testToChar_String(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_String
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphaUpper_char, DisplayName: testIsAsciiAlphaUpper_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphaUpper_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_Character_int, DisplayName: testToIntValue_Character_int(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_Character_int
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlpha_char, DisplayName: testIsAsciiAlpha_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlpha_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiNumeric_char, DisplayName: testIsAsciiNumeric_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiNumeric_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_Character, DisplayName: testToIntValue_Character(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_Character
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_String_char, DisplayName: testToChar_String_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_String_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToString_char, DisplayName: testToString_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToString_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiPrintable_char, DisplayName: testIsAsciiPrintable_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiPrintable_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_char_int, DisplayName: testToIntValue_char_int(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_char_int
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiControl_char, DisplayName: testIsAsciiControl_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiControl_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToUnicodeEscaped_Character, DisplayName: testToUnicodeEscaped_Character(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToUnicodeEscaped_Character
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_Character_char, DisplayName: testToChar_Character_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToChar_Character_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToCharacterObject_String, DisplayName: testToCharacterObject_String(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToCharacterObject_String
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToUnicodeEscaped_char, DisplayName: testToUnicodeEscaped_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToUnicodeEscaped_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToCharacterObject_char, DisplayName: testToCharacterObject_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToCharacterObject_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_char, DisplayName: testToIntValue_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testToIntValue_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphaLower_char, DisplayName: testIsAsciiAlphaLower_char(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testIsAsciiAlphaLower_char
* Started : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.CharUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharUtilsTest, MethodName: testConstructor
Number of testcases executed : 23
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.LazyInitializerTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGet, DisplayName: testGet(org.apache.commons.lang3.concurrent.LazyInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGet
* Started : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGetConcurrent, DisplayName: testGetConcurrent(org.apache.commons.lang3.concurrent.LazyInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGetConcurrent
* Started : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGetMultipleTimes, DisplayName: testGetMultipleTimes(org.apache.commons.lang3.concurrent.LazyInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.LazyInitializerTest, MethodName: testGetMultipleTimes
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrBuilderTest
Number of testcases to execute : 77
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsTokenizer, DisplayName: testAsTokenizer(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsTokenizer
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_StrMatcher, DisplayName: testDeleteFirst_StrMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_StrMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_StrMatcher_String, DisplayName: testReplaceFirst_StrMatcher_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_StrMatcher_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_String, DisplayName: testDeleteAll_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEndsWith, DisplayName: testEndsWith(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEndsWith
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetSetNullText, DisplayName: testGetSetNullText(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetSetNullText
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOfLang294, DisplayName: testIndexOfLang294(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOfLang294
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubSequenceIntInt, DisplayName: testSubSequenceIntInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubSequenceIntInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetChars, DisplayName: testGetChars(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetChars
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_String, DisplayName: testLastIndexOf_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_char, DisplayName: testDeleteAll_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryEndIndex, DisplayName: testReplace_StrMatcher_String_int_int_int_VaryEndIndex(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryEndIndex
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_char_int, DisplayName: testLastIndexOf_char_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_char_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testClear, DisplayName: testClear(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testClear
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSize, DisplayName: testSize(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSize
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testTrim, DisplayName: testTrim(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testTrim
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testRightString, DisplayName: testRightString(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testRightString
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testMinimizeCapacity, DisplayName: testMinimizeCapacity(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testMinimizeCapacity
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubstringIntInt, DisplayName: testSubstringIntInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubstringIntInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang412Left, DisplayName: testLang412Left(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang412Left
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_String, DisplayName: testContains_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEqualsIgnoreCase, DisplayName: testEqualsIgnoreCase(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEqualsIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCapacityAndLength, DisplayName: testCapacityAndLength(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCapacityAndLength
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsReader, DisplayName: testAsReader(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsReader
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_String_String, DisplayName: testReplaceAll_String_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_String_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsWriter, DisplayName: testAsWriter(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testAsWriter
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang294, DisplayName: testLang294(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang294
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang295, DisplayName: testLang295(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang295
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_char_char, DisplayName: testReplaceAll_char_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_char_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_String_int, DisplayName: testLastIndexOf_String_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_String_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteCharAt, DisplayName: testDeleteCharAt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteCharAt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_String_String, DisplayName: testReplaceFirst_String_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_String_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_char, DisplayName: testContains_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteIntInt, DisplayName: testDeleteIntInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteIntInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryCount, DisplayName: testReplace_StrMatcher_String_int_int_int_VaryCount(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryCount
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_char_char, DisplayName: testReplaceFirst_char_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceFirst_char_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_char, DisplayName: testIndexOf_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_int_int_String, DisplayName: testReplace_int_int_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_int_int_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToCharArray, DisplayName: testToCharArray(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToCharArray
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_StrMatcher, DisplayName: testLastIndexOf_StrMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_StrMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_StrMatcher_int, DisplayName: testIndexOf_StrMatcher_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_StrMatcher_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEnsureCapacity, DisplayName: testEnsureCapacity(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEnsureCapacity
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang412Right, DisplayName: testLang412Right(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLang412Right
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_String, DisplayName: testDeleteFirst_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testMidString, DisplayName: testMidString(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testMidString
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_StrMatcher_String, DisplayName: testReplaceAll_StrMatcher_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplaceAll_StrMatcher_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCapacity, DisplayName: testCapacity(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCapacity
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReverse, DisplayName: testReverse(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReverse
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSetCharAt, DisplayName: testSetCharAt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSetCharAt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryStartIndex, DisplayName: testReplace_StrMatcher_String_int_int_int_VaryStartIndex(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryStartIndex
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubstringInt, DisplayName: testSubstringInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSubstringInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSetLength, DisplayName: testSetLength(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testSetLength
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCharAt, DisplayName: testCharAt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testCharAt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryMatcher, DisplayName: testReplace_StrMatcher_String_int_int_int_VaryMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_char, DisplayName: testLastIndexOf_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLeftString, DisplayName: testLeftString(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLeftString
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_String_int, DisplayName: testIndexOf_String_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_String_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_StrMatcher, DisplayName: testContains_StrMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testContains_StrMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLength, DisplayName: testLength(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLength
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryReplace, DisplayName: testReplace_StrMatcher_String_int_int_int_VaryReplace(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testReplace_StrMatcher_String_int_int_int_VaryReplace
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_char, DisplayName: testDeleteFirst_char(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteFirst_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_StrMatcher, DisplayName: testDeleteAll_StrMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testDeleteAll_StrMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIsEmpty, DisplayName: testIsEmpty(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIsEmpty
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToCharArrayIntInt, DisplayName: testToCharArrayIntInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToCharArrayIntInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetSetNewLineText, DisplayName: testGetSetNewLineText(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetSetNewLineText
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToStringBuffer, DisplayName: testToStringBuffer(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testToStringBuffer
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_String, DisplayName: testIndexOf_String(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_char_int, DisplayName: testIndexOf_char_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_char_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetCharsIntIntCharArrayInt, DisplayName: testGetCharsIntIntCharArrayInt(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testGetCharsIntIntCharArrayInt
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testStartsWith, DisplayName: testStartsWith(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testStartsWith
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_StrMatcher, DisplayName: testIndexOf_StrMatcher(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testIndexOf_StrMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_StrMatcher_int, DisplayName: testLastIndexOf_StrMatcher_int(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testLastIndexOf_StrMatcher_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testChaining, DisplayName: testChaining(org.apache.commons.lang3.text.StrBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderTest, MethodName: testChaining
Number of testcases executed : 77
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharSetTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddDash, DisplayName: testConstructor_String_oddDash(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddDash
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testSerialization, DisplayName: testSerialization(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testSerialization
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testClass, DisplayName: testClass(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testClass
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_simple, DisplayName: testConstructor_String_simple(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_simple
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testEquals_Object, DisplayName: testEquals_Object(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testEquals_Object
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testContains_Char, DisplayName: testContains_Char(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testContains_Char
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_combo, DisplayName: testConstructor_String_combo(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_combo
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddCombinations, DisplayName: testConstructor_String_oddCombinations(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddCombinations
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_comboNegated, DisplayName: testConstructor_String_comboNegated(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_comboNegated
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testGetInstance_Stringarray, DisplayName: testGetInstance_Stringarray(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testGetInstance_Stringarray
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddNegate, DisplayName: testConstructor_String_oddNegate(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testConstructor_String_oddNegate
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testGetInstance, DisplayName: testGetInstance(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testGetInstance
* Started : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testStatics, DisplayName: testStatics(org.apache.commons.lang3.CharSetTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetTest, MethodName: testStatics
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.FastDateFormatTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testSimpleDate, DisplayName: testSimpleDate(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testSimpleDate
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testShortDateStyleWithLocales, DisplayName: testShortDateStyleWithLocales(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testShortDateStyleWithLocales
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testMilleniumBug, DisplayName: testMilleniumBug(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testMilleniumBug
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance, DisplayName: test_getInstance(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLowYearPadding, DisplayName: testLowYearPadding(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLowYearPadding
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang303, DisplayName: testLang303(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang303
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang538, DisplayName: testLang538(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang538
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang645, DisplayName: testLang645(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testLang645
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_TimeZone_Locale, DisplayName: test_getInstance_String_TimeZone_Locale(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_TimeZone_Locale
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_changeDefault_Locale_DateInstance, DisplayName: test_changeDefault_Locale_DateInstance(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_changeDefault_Locale_DateInstance
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String, DisplayName: test_getInstance_String(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_TimeZone, DisplayName: test_getInstance_String_TimeZone(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_TimeZone
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_Locale, DisplayName: test_getInstance_String_Locale(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_getInstance_String_Locale
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testFormat, DisplayName: testFormat(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: testFormat
* Started : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_changeDefault_Locale_DateTimeInstance, DisplayName: test_changeDefault_Locale_DateTimeInstance(org.apache.commons.lang3.time.FastDateFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.time.FastDateFormatTest, MethodName: test_changeDefault_Locale_DateTimeInstance
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest
Number of testcases to execute : 17
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultInitializerNamesModify, DisplayName: testResultInitializerNamesModify(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultInitializerNamesModify
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeRuntimeEx, DisplayName: testInitializeRuntimeEx(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeRuntimeEx
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerNullInit, DisplayName: testAddInitializerNullInit(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerNullInit
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerNullName, DisplayName: testAddInitializerNullName(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerNullName
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeResultsIsSuccessfulTrue, DisplayName: testInitializeResultsIsSuccessfulTrue(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeResultsIsSuccessfulTrue
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetExceptionUnknown, DisplayName: testResultGetExceptionUnknown(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetExceptionUnknown
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeNested, DisplayName: testInitializeNested(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeNested
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeTempExec, DisplayName: testInitializeTempExec(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeTempExec
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeEx, DisplayName: testInitializeEx(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeEx
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetInitializerUnknown, DisplayName: testResultGetInitializerUnknown(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetInitializerUnknown
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeResultsIsSuccessfulFalse, DisplayName: testInitializeResultsIsSuccessfulFalse(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeResultsIsSuccessfulFalse
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeNoChildren, DisplayName: testInitializeNoChildren(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeNoChildren
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeChildWithExecutor, DisplayName: testInitializeChildWithExecutor(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeChildWithExecutor
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeExternalExec, DisplayName: testInitializeExternalExec(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testInitializeExternalExec
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerAfterStart, DisplayName: testAddInitializerAfterStart(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testAddInitializerAfterStart
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetResultObjectUnknown, DisplayName: testResultGetResultObjectUnknown(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultGetResultObjectUnknown
* Started : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultIsExceptionUnknown, DisplayName: testResultIsExceptionUnknown(org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest, MethodName: testResultIsExceptionUnknown
Number of testcases executed : 17
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.exception.ContextedExceptionTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedException, DisplayName: testContextedException(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedException
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testNullExceptionPassing, DisplayName: testNullExceptionPassing(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testNullExceptionPassing
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testAddValue, DisplayName: testAddValue(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testAddValue
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionThrowable, DisplayName: testContextedExceptionThrowable(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionThrowable
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionStringThrowableContext, DisplayName: testContextedExceptionStringThrowableContext(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionStringThrowableContext
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionString, DisplayName: testContextedExceptionString(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionString
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testReplaceValue, DisplayName: testReplaceValue(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testReplaceValue
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionStringThrowable, DisplayName: testContextedExceptionStringThrowable(org.apache.commons.lang3.exception.ContextedExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedExceptionTest, MethodName: testContextedExceptionStringThrowable
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.DateUtilsFragmentTest
Number of testcases to execute : 52
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfHourWithCalendar, DisplayName: testMinutesOfHourWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfHourWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfMonthWithDate, DisplayName: testHoursOfMonthWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfMonthWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfYearWithDate, DisplayName: testSecondsOfYearWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfYearWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinuteFragmentInLargerUnitWithCalendar, DisplayName: testMinuteFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinuteFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfYearWithDate, DisplayName: testHoursOfYearWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfYearWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondFragmentInLargerUnitWithDate, DisplayName: testSecondFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDayOfYearFragmentInLargerUnitWithCalendar, DisplayName: testDayOfYearFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDayOfYearFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfDayWithCalendar, DisplayName: testSecondsOfDayWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfDayWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfDayWithDate, DisplayName: testHoursOfDayWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfDayWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinuteFragmentInLargerUnitWithDate, DisplayName: testMinuteFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinuteFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfSecondWithCalendar, DisplayName: testMillisecondsOfSecondWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfSecondWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfMonthWithDate, DisplayName: testMinutesOfMonthWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfMonthWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofHourWithCalendar, DisplayName: testSecondsofHourWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofHourWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testNullDate, DisplayName: testNullDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testNullDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMonthWithCalendar, DisplayName: testMillisecondsOfMonthWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMonthWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfDayWithDate, DisplayName: testMinutesOfDayWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfDayWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDateFragmentInLargerUnitWithDate, DisplayName: testDateFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDateFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfYearWithDate, DisplayName: testMillisecondsOfYearWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfYearWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofMinuteWithDate, DisplayName: testSecondsofMinuteWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofMinuteWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfYearWithCalendar, DisplayName: testHoursOfYearWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfYearWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofMinuteWithCalendar, DisplayName: testSecondsofMinuteWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofMinuteWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfYearWithCalendar, DisplayName: testMillisecondsOfYearWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfYearWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMonthWithDate, DisplayName: testMillisecondsOfMonthWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMonthWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfSecondWithDate, DisplayName: testMillisecondsOfSecondWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfSecondWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testInvalidFragmentWithDate, DisplayName: testInvalidFragmentWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testInvalidFragmentWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondFragmentInLargerUnitWithDate, DisplayName: testMillisecondFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDayOfYearFragmentInLargerUnitWithDate, DisplayName: testDayOfYearFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDayOfYearFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfMonthWithCalendar, DisplayName: testHoursOfMonthWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfMonthWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfYearWithCalendar, DisplayName: testSecondsOfYearWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfYearWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfMonthWithDate, DisplayName: testSecondsOfMonthWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfMonthWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfDayWithDate, DisplayName: testSecondsOfDayWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfDayWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfDayWithDate, DisplayName: testMillisecondsOfDayWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfDayWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfMonthWithCalendar, DisplayName: testMinutesOfMonthWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfMonthWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfHourWithCalendar, DisplayName: testMillisecondsOfHourWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfHourWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondFragmentInLargerUnitWithCalendar, DisplayName: testMillisecondFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfYearWithDate, DisplayName: testMinutesOfYearWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfYearWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHourOfDayFragmentInLargerUnitWithCalendar, DisplayName: testHourOfDayFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHourOfDayFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofHourWithDate, DisplayName: testSecondsofHourWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsofHourWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testNullCalendar, DisplayName: testNullCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testNullCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfDayWithCalendar, DisplayName: testMinutesOfDayWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfDayWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfHourWithDate, DisplayName: testMillisecondsOfHourWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfHourWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfMonthWithCalendar, DisplayName: testSecondsOfMonthWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondsOfMonthWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondFragmentInLargerUnitWithCalendar, DisplayName: testSecondFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testSecondFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfYearWithCalendar, DisplayName: testMinutesOfYearWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfYearWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMinuteWithCalender, DisplayName: testMillisecondsOfMinuteWithCalender(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMinuteWithCalender
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHourOfDayFragmentInLargerUnitWithDate, DisplayName: testHourOfDayFragmentInLargerUnitWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHourOfDayFragmentInLargerUnitWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfDayWithCalendar, DisplayName: testHoursOfDayWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testHoursOfDayWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testInvalidFragmentWithCalendar, DisplayName: testInvalidFragmentWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testInvalidFragmentWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfHourWithDate, DisplayName: testMinutesOfHourWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMinutesOfHourWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMinuteWithDate, DisplayName: testMillisecondsOfMinuteWithDate(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfMinuteWithDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDateFragmentInLargerUnitWithCalendar, DisplayName: testDateFragmentInLargerUnitWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testDateFragmentInLargerUnitWithCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfDayWithCalendar, DisplayName: testMillisecondsOfDayWithCalendar(org.apache.commons.lang3.time.DateUtilsFragmentTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsFragmentTest, MethodName: testMillisecondsOfDayWithCalendar
Number of testcases executed : 52
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.StandardToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.StandardToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.StandardToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharSequenceUtilsTest
Number of testcases to execute : 2
* Started : ClasseName: org.apache.commons.lang3.CharSequenceUtilsTest, MethodName: testSubSequence, DisplayName: testSubSequence(org.apache.commons.lang3.CharSequenceUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSequenceUtilsTest, MethodName: testSubSequence
* Started : ClasseName: org.apache.commons.lang3.CharSequenceUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.CharSequenceUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSequenceUtilsTest, MethodName: testConstructor
Number of testcases executed : 2
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.reflect.ConstructorUtilsTest
Number of testcases to execute : 6
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testInvokeConstructor, DisplayName: testInvokeConstructor(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testInvokeConstructor
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetAccessibleConstructorFromDescription, DisplayName: testGetAccessibleConstructorFromDescription(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetAccessibleConstructorFromDescription
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testInvokeExactConstructor, DisplayName: testInvokeExactConstructor(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testInvokeExactConstructor
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetAccessibleConstructor, DisplayName: testGetAccessibleConstructor(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetAccessibleConstructor
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetMatchingAccessibleMethod, DisplayName: testGetMatchingAccessibleMethod(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testGetMatchingAccessibleMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.reflect.ConstructorUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.ConstructorUtilsTest, MethodName: testConstructor
Number of testcases executed : 6
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharRangeTest
Number of testcases to execute : 16
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContainsNullArg, DisplayName: testContainsNullArg(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContainsNullArg
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Reversed, DisplayName: testConstructorAccessors_isIn_Reversed(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Reversed
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNot, DisplayName: testConstructorAccessors_isNot(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNot
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testSerialization, DisplayName: testSerialization(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testSerialization
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testClass, DisplayName: testClass(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testClass
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Same, DisplayName: testConstructorAccessors_isNotIn_Same(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Same
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_is, DisplayName: testConstructorAccessors_is(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_is
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testEquals_Object, DisplayName: testEquals_Object(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testEquals_Object
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContains_Char, DisplayName: testContains_Char(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContains_Char
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Normal, DisplayName: testConstructorAccessors_isIn_Normal(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Normal
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContains_Charrange, DisplayName: testContains_Charrange(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testContains_Charrange
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Same, DisplayName: testConstructorAccessors_isIn_Same(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isIn_Same
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testIterator, DisplayName: testIterator(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testIterator
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Normal, DisplayName: testConstructorAccessors_isNotIn_Normal(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Normal
* Started : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Reversed, DisplayName: testConstructorAccessors_isNotIn_Reversed(org.apache.commons.lang3.CharRangeTest)
* Finished : ClasseName: org.apache.commons.lang3.CharRangeTest, MethodName: testConstructorAccessors_isNotIn_Reversed
Number of testcases executed : 16
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.ConstantInitializerTest
Number of testcases to execute : 7
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsFalse, DisplayName: testEqualsFalse(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsFalse
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testGet, DisplayName: testGet(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testGet
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsTrue, DisplayName: testEqualsTrue(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsTrue
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsWithOtherObjects, DisplayName: testEqualsWithOtherObjects(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testEqualsWithOtherObjects
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testGetObject, DisplayName: testGetObject(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testGetObject
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testToStringNull, DisplayName: testToStringNull(org.apache.commons.lang3.concurrent.ConstantInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConstantInitializerTest, MethodName: testToStringNull
Number of testcases executed : 7
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.event.EventUtilsTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerWithNoAddMethod, DisplayName: testAddEventListenerWithNoAddMethod(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerWithNoAddMethod
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListener, DisplayName: testAddEventListener(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListener
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindEventsToMethod, DisplayName: testBindEventsToMethod(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindEventsToMethod
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerWithPrivateAddMethod, DisplayName: testAddEventListenerWithPrivateAddMethod(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerWithPrivateAddMethod
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindFilteredEventsToMethod, DisplayName: testBindFilteredEventsToMethod(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindFilteredEventsToMethod
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerThrowsException, DisplayName: testAddEventListenerThrowsException(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testAddEventListenerThrowsException
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindEventsToMethodWithEvent, DisplayName: testBindEventsToMethodWithEvent(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testBindEventsToMethodWithEvent
* Started : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.event.EventUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventUtilsTest, MethodName: testConstructor
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.reflect.FieldUtilsTest
Number of testcases to execute : 30
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadStaticFieldForceAccess, DisplayName: testReadStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedField, DisplayName: testReadDeclaredNamedField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedStaticField, DisplayName: testReadNamedStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedStaticFieldForceAccess, DisplayName: testReadDeclaredNamedStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedFieldForceAccess, DisplayName: testReadDeclaredNamedFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetField, DisplayName: testGetField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedStaticField, DisplayName: testReadDeclaredNamedStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadDeclaredNamedStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteField, DisplayName: testWriteField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedStaticFieldForceAccess, DisplayName: testWriteNamedStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteFieldForceAccess, DisplayName: testWriteFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testAmbig, DisplayName: testAmbig(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testAmbig
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedField, DisplayName: testWriteNamedField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedFieldForceAccess, DisplayName: testWriteDeclaredNamedFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedStaticField, DisplayName: testWriteDeclaredNamedStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedField, DisplayName: testReadNamedField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetFieldForceAccess, DisplayName: testGetFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadField, DisplayName: testReadField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedStaticField, DisplayName: testWriteNamedStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteStaticFieldForceAccess, DisplayName: testWriteStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteStaticField, DisplayName: testWriteStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedFieldForceAccess, DisplayName: testWriteNamedFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteNamedFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedStaticFieldForceAccess, DisplayName: testReadNamedStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadStaticField, DisplayName: testReadStaticField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadStaticField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedStaticFieldForceAccess, DisplayName: testWriteDeclaredNamedStaticFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedStaticFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedField, DisplayName: testWriteDeclaredNamedField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testWriteDeclaredNamedField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetDeclaredField, DisplayName: testGetDeclaredField(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetDeclaredField
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetDeclaredFieldForceAccess, DisplayName: testGetDeclaredFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testGetDeclaredFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadFieldForceAccess, DisplayName: testReadFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedFieldForceAccess, DisplayName: testReadNamedFieldForceAccess(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testReadNamedFieldForceAccess
* Started : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.reflect.FieldUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.FieldUtilsTest, MethodName: testConstructor
Number of testcases executed : 30
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.ExtendedMessageFormatTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInDateTimeFormat, DisplayName: testBuiltInDateTimeFormat(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInDateTimeFormat
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testEqualsHashcode, DisplayName: testEqualsHashcode(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testEqualsHashcode
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testOverriddenBuiltinFormat, DisplayName: testOverriddenBuiltinFormat(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testOverriddenBuiltinFormat
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInChoiceFormat, DisplayName: testBuiltInChoiceFormat(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInChoiceFormat
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testEscapedQuote_LANG_477, DisplayName: testEscapedQuote_LANG_477(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testEscapedQuote_LANG_477
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testExtendedFormats, DisplayName: testExtendedFormats(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testExtendedFormats
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testExtendedAndBuiltInFormats, DisplayName: testExtendedAndBuiltInFormats(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testExtendedAndBuiltInFormats
* Started : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInNumberFormat, DisplayName: testBuiltInNumberFormat(org.apache.commons.lang3.text.ExtendedMessageFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.ExtendedMessageFormatTest, MethodName: testBuiltInNumberFormat
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.MultiLineToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.MultiLineToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.MultiLineToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableShortTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testToShort, DisplayName: testToShort(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testToShort
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableShortTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableShortTest, MethodName: testAddValueObject
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ArrayUtilsAddTest
Number of testcases to execute : 13
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testJira567, DisplayName: testJira567(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testJira567
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayInt, DisplayName: testAddObjectArrayInt(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayInt
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testLANG571, DisplayName: testLANG571(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testLANG571
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayToObjectArray, DisplayName: testAddObjectArrayToObjectArray(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayToObjectArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectAtIndex, DisplayName: testAddObjectAtIndex(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectAtIndex
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayFloat, DisplayName: testAddObjectArrayFloat(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayFloat
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayShort, DisplayName: testAddObjectArrayShort(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayShort
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayByte, DisplayName: testAddObjectArrayByte(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayByte
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayChar, DisplayName: testAddObjectArrayChar(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayChar
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayLong, DisplayName: testAddObjectArrayLong(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayLong
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayBoolean, DisplayName: testAddObjectArrayBoolean(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayBoolean
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayDouble, DisplayName: testAddObjectArrayDouble(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayDouble
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayObject, DisplayName: testAddObjectArrayObject(org.apache.commons.lang3.ArrayUtilsAddTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsAddTest, MethodName: testAddObjectArrayObject
Number of testcases executed : 13
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest
Number of testcases to execute : 4
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testIntegerWithTransients, DisplayName: testIntegerWithTransients(org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testIntegerWithTransients
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testFixture, DisplayName: testFixture(org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testFixture
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testFixtureWithTransients, DisplayName: testFixtureWithTransients(org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testFixtureWithTransients
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testInteger, DisplayName: testInteger(org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest, MethodName: testInteger
Number of testcases executed : 4
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest
Number of testcases to execute : 31
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedNull, DisplayName: testExtractCauseUncheckedNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseChecked, DisplayName: testExtractCauseChecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseChecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedNullCause, DisplayName: testExtractCauseUncheckedNullCause(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedNullCause
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConstantFuture_Integer, DisplayName: testConstantFuture_Integer(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConstantFuture_Integer
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseChecked, DisplayName: testHandleCauseChecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseChecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedUncheckedException, DisplayName: testHandleCauseUncheckedUncheckedException(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedUncheckedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseError, DisplayName: testHandleCauseError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedError, DisplayName: testHandleCauseUncheckedError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseNull, DisplayName: testExtractCauseNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseError, DisplayName: testConcurrentExceptionCauseError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedException, DisplayName: testExtractCauseUncheckedException(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseNull, DisplayName: testConcurrentExceptionCauseNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseNullCause, DisplayName: testExtractCauseNullCause(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseNullCause
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedUncheckedException, DisplayName: testExtractCauseUncheckedUncheckedException(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedUncheckedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedError, DisplayName: testExtractCauseUncheckedError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseNull, DisplayName: testHandleCauseNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedChecked, DisplayName: testExtractCauseUncheckedChecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseUncheckedChecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConstantFuture_null, DisplayName: testConstantFuture_null(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConstantFuture_null
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitialize, DisplayName: testInitialize(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitialize
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedChecked, DisplayName: testHandleCauseUncheckedChecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedChecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseUnchecked, DisplayName: testConcurrentRuntimeExceptionCauseUnchecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseUnchecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseError, DisplayName: testExtractCauseError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testExtractCauseError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeNull, DisplayName: testInitializeNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUnchecked, DisplayName: testInitializeUnchecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUnchecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseNull, DisplayName: testConcurrentRuntimeExceptionCauseNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseError, DisplayName: testConcurrentRuntimeExceptionCauseError(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentRuntimeExceptionCauseError
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedException, DisplayName: testHandleCauseUncheckedException(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedNull, DisplayName: testHandleCauseUncheckedNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testHandleCauseUncheckedNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseUnchecked, DisplayName: testConcurrentExceptionCauseUnchecked(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testConcurrentExceptionCauseUnchecked
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUncheckedEx, DisplayName: testInitializeUncheckedEx(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUncheckedEx
* Started : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUncheckedNull, DisplayName: testInitializeUncheckedNull(org.apache.commons.lang3.concurrent.ConcurrentUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest, MethodName: testInitializeUncheckedNull
Number of testcases executed : 31
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.SimpleToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.SimpleToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.SimpleToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.BooleanUtilsTest
Number of testcases to execute : 43
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_nullInput, DisplayName: testXor_primitive_nullInput(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_nullInput
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringTrueFalse_boolean, DisplayName: test_toStringTrueFalse_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringTrueFalse_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_int, DisplayName: test_toBooleanObject_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_emptyInput, DisplayName: testXor_primitive_emptyInput(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_emptyInput
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanDefaultIfNull_Boolean_boolean, DisplayName: test_toBooleanDefaultIfNull_Boolean_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanDefaultIfNull_Boolean_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_Integer, DisplayName: test_toBooleanObject_Integer(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_Integer
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_boolean_int_int, DisplayName: test_toInteger_boolean_int_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_boolean_int_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isNotFalse_Boolean, DisplayName: test_isNotFalse_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isNotFalse_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_String, DisplayName: test_toBooleanObject_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringYesNo_boolean, DisplayName: test_toStringYesNo_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringYesNo_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_Integer_Integer_Integer_Integer, DisplayName: test_toBooleanObject_Integer_Integer_Integer_Integer(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_Integer_Integer_Integer_Integer
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_Integer_Integer_Integer, DisplayName: test_toBoolean_Integer_Integer_Integer(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_Integer_Integer_Integer
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_Boolean_Integer_Integer_Integer, DisplayName: test_toIntegerObject_Boolean_Integer_Integer_Integer(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_Boolean_Integer_Integer_Integer
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_String_String_String_String, DisplayName: test_toBooleanObject_String_String_String_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_String_String_String_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringOnOff_Boolean, DisplayName: test_toStringOnOff_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringOnOff_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_validInput_2items, DisplayName: testXor_object_validInput_2items(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_validInput_2items
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_validInput_3items, DisplayName: testXor_object_validInput_3items(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_validInput_3items
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_Boolean, DisplayName: test_toIntegerObject_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isNotTrue_Boolean, DisplayName: test_isNotTrue_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isNotTrue_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_String, DisplayName: test_toBoolean_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_int_int_int, DisplayName: test_toBoolean_int_int_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_int_int_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_nullElementInput, DisplayName: testXor_object_nullElementInput(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_nullElementInput
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringTrueFalse_Boolean, DisplayName: test_toStringTrueFalse_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringTrueFalse_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_nullInput, DisplayName: testXor_object_nullInput(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_nullInput
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringYesNo_Boolean, DisplayName: test_toStringYesNo_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringYesNo_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isFalse_Boolean, DisplayName: test_isFalse_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isFalse_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_int, DisplayName: test_toBoolean_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_boolean, DisplayName: test_toInteger_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_Boolean, DisplayName: test_toBoolean_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_boolean_Integer_Integer, DisplayName: test_toIntegerObject_boolean_Integer_Integer(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_boolean_Integer_Integer
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isTrue_Boolean, DisplayName: test_isTrue_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_isTrue_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_validInput_2items, DisplayName: testXor_primitive_validInput_2items(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_validInput_2items
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_validInput_3items, DisplayName: testXor_primitive_validInput_3items(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_primitive_validInput_3items
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_emptyInput, DisplayName: testXor_object_emptyInput(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testXor_object_emptyInput
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_String_String_String, DisplayName: test_toBoolean_String_String_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBoolean_String_String_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_Boolean_int_int_int, DisplayName: test_toInteger_Boolean_int_int_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toInteger_Boolean_int_int_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_negate_Boolean, DisplayName: test_negate_Boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_negate_Boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toString_Boolean_String_String_String, DisplayName: test_toString_Boolean_String_String_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toString_Boolean_String_String_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringOnOff_boolean, DisplayName: test_toStringOnOff_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toStringOnOff_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_int_int_int, DisplayName: test_toBooleanObject_int_int_int(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toBooleanObject_int_int_int
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_boolean, DisplayName: test_toIntegerObject_boolean(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toIntegerObject_boolean
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toString_boolean_String_String_String, DisplayName: test_toString_boolean_String_String_String(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: test_toString_boolean_String_String_String
* Started : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.BooleanUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.BooleanUtilsTest, MethodName: testConstructor
Number of testcases executed : 43
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrSubstitutorTest
Number of testcases to execute : 36
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEscaping, DisplayName: testReplaceEscaping(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEscaping
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSoloEscaping, DisplayName: testReplaceSoloEscaping(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSoloEscaping
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoPrefixSuffix, DisplayName: testReplaceNoPrefixSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoPrefixSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testCyclicReplacement, DisplayName: testCyclicReplacement(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testCyclicReplacement
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testSubstitutetDefaultProperties, DisplayName: testSubstitutetDefaultProperties(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testSubstitutetDefaultProperties
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceToIdentical, DisplayName: testReplaceToIdentical(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceToIdentical
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSimple, DisplayName: testReplaceSimple(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSimple
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplacePrefixSuffix, DisplayName: testStaticReplacePrefixSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplacePrefixSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceRecursive, DisplayName: testReplaceRecursive(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceRecursive
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoPefixNoSuffix, DisplayName: testReplaceNoPefixNoSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoPefixNoSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorMapPrefixSuffix, DisplayName: testConstructorMapPrefixSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorMapPrefixSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplace, DisplayName: testStaticReplace(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplace
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceUnknownKey, DisplayName: testReplaceUnknownKey(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceUnknownKey
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplaceSystemProperties, DisplayName: testStaticReplaceSystemProperties(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testStaticReplaceSystemProperties
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariableRecursive, DisplayName: testReplaceInVariableRecursive(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariableRecursive
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorNoArgs, DisplayName: testConstructorNoArgs(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorNoArgs
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceAdjacentAtEnd, DisplayName: testReplaceAdjacentAtEnd(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceAdjacentAtEnd
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNull, DisplayName: testReplaceNull(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNull
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSolo, DisplayName: testReplaceSolo(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceSolo
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceChangedMap, DisplayName: testReplaceChangedMap(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceChangedMap
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceWeirdPattens, DisplayName: testReplaceWeirdPattens(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceWeirdPattens
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEmptyKeys, DisplayName: testReplaceEmptyKeys(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEmptyKeys
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoVariables, DisplayName: testReplaceNoVariables(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceNoVariables
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceComplexEscaping, DisplayName: testReplaceComplexEscaping(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceComplexEscaping
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariable, DisplayName: testReplaceInVariable(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariable
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplacePrefixNoSuffix, DisplayName: testReplacePrefixNoSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplacePrefixNoSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testResolveVariable, DisplayName: testResolveVariable(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testResolveVariable
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariableDisabled, DisplayName: testReplaceInVariableDisabled(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceInVariableDisabled
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetEscape, DisplayName: testGetSetEscape(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetEscape
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceAdjacentAtStart, DisplayName: testReplaceAdjacentAtStart(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceAdjacentAtStart
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEmpty, DisplayName: testReplaceEmpty(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceEmpty
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetPrefix, DisplayName: testGetSetPrefix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetPrefix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorMapFull, DisplayName: testConstructorMapFull(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testConstructorMapFull
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceIncompletePefix, DisplayName: testReplaceIncompletePefix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplaceIncompletePefix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetSuffix, DisplayName: testGetSetSuffix(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testGetSetSuffix
* Started : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplacePartialString_noReplace, DisplayName: testReplacePartialString_noReplace(org.apache.commons.lang3.text.StrSubstitutorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrSubstitutorTest, MethodName: testReplacePartialString_noReplace
Number of testcases executed : 36
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharEncodingTest
Number of testcases to execute : 5
* Started : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testMustBeSupportedJava1_3_1, DisplayName: testMustBeSupportedJava1_3_1(org.apache.commons.lang3.CharEncodingTest)
* Finished : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testMustBeSupportedJava1_3_1
* Started : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testNotSupported, DisplayName: testNotSupported(org.apache.commons.lang3.CharEncodingTest)
* Finished : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testNotSupported
* Started : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testWorksOnJava1_1_8, DisplayName: testWorksOnJava1_1_8(org.apache.commons.lang3.CharEncodingTest)
* Finished : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testWorksOnJava1_1_8
* Started : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testWorksOnJava1_2_2, DisplayName: testWorksOnJava1_2_2(org.apache.commons.lang3.CharEncodingTest)
* Finished : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testWorksOnJava1_2_2
* Started : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.CharEncodingTest)
* Finished : ClasseName: org.apache.commons.lang3.CharEncodingTest, MethodName: testConstructor
Number of testcases executed : 5
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.CharSetUtilsTest
Number of testcases to execute : 9
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testSqueeze_StringString, DisplayName: testSqueeze_StringString(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testSqueeze_StringString
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testDelete_StringString, DisplayName: testDelete_StringString(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testDelete_StringString
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testKeep_StringString, DisplayName: testKeep_StringString(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testKeep_StringString
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testDelete_StringStringarray, DisplayName: testDelete_StringStringarray(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testDelete_StringStringarray
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testCount_StringStringarray, DisplayName: testCount_StringStringarray(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testCount_StringStringarray
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testKeep_StringStringarray, DisplayName: testKeep_StringStringarray(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testKeep_StringStringarray
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testCount_StringString, DisplayName: testCount_StringString(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testCount_StringString
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testSqueeze_StringStringarray, DisplayName: testSqueeze_StringStringarray(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testSqueeze_StringStringarray
* Started : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.CharSetUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.CharSetUtilsTest, MethodName: testConstructor
Number of testcases executed : 9
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.AtomicInitializerTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGet, DisplayName: testGet(org.apache.commons.lang3.concurrent.AtomicInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGet
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGetConcurrent, DisplayName: testGetConcurrent(org.apache.commons.lang3.concurrent.AtomicInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGetConcurrent
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGetMultipleTimes, DisplayName: testGetMultipleTimes(org.apache.commons.lang3.concurrent.AtomicInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicInitializerTest, MethodName: testGetMultipleTimes
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringEscapeUtilsTest
Number of testcases to execute : 19
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeJava, DisplayName: testUnescapeJava(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeJava
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testStandaloneAmphersand, DisplayName: testStandaloneAmphersand(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testStandaloneAmphersand
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeHtml4, DisplayName: testUnescapeHtml4(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeHtml4
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtml, DisplayName: testEscapeHtml(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtml
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeJava, DisplayName: testEscapeJava(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeJava
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeJavaWithSlash, DisplayName: testEscapeJavaWithSlash(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeJavaWithSlash
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testLang313, DisplayName: testLang313(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testLang313
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeEcmaScript, DisplayName: testEscapeEcmaScript(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeEcmaScript
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeCsvString, DisplayName: testEscapeCsvString(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeCsvString
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeCsvWriter, DisplayName: testEscapeCsvWriter(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeCsvWriter
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtmlHighUnicode, DisplayName: testEscapeHtmlHighUnicode(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtmlHighUnicode
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeHexCharsHtml, DisplayName: testUnescapeHexCharsHtml(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeHexCharsHtml
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeCsvString, DisplayName: testUnescapeCsvString(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeCsvString
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeCsvWriter, DisplayName: testUnescapeCsvWriter(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeCsvWriter
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtmlVersions, DisplayName: testEscapeHtmlVersions(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHtmlVersions
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeUnknownEntity, DisplayName: testUnescapeUnknownEntity(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testUnescapeUnknownEntity
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHiragana, DisplayName: testEscapeHiragana(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeHiragana
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeXml, DisplayName: testEscapeXml(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testEscapeXml
* Started : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.StringEscapeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringEscapeUtilsTest, MethodName: testConstructor
Number of testcases executed : 19
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest
Number of testcases to execute : 4
* Started : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitNullCallable, DisplayName: testInitNullCallable(org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitNullCallable
* Started : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitExecutorNullCallable, DisplayName: testInitExecutorNullCallable(org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitExecutorNullCallable
* Started : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitialize, DisplayName: testInitialize(org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitialize
* Started : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitExecutor, DisplayName: testInitExecutor(org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest, MethodName: testInitExecutor
Number of testcases executed : 4
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoDaemonFlag, DisplayName: testNewThreadNoDaemonFlag(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoDaemonFlag
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadDaemonTrue, DisplayName: testNewThreadDaemonTrue(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadDaemonTrue
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoPriority, DisplayName: testNewThreadNoPriority(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoPriority
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoExHandler, DisplayName: testNewThreadNoExHandler(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoExHandler
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadDaemonFalse, DisplayName: testNewThreadDaemonFalse(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadDaemonFalse
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNamingPattern, DisplayName: testNewThreadNamingPattern(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNamingPattern
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildWrappedFactoryNull, DisplayName: testBuildWrappedFactoryNull(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildWrappedFactoryNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuilderReset, DisplayName: testBuilderReset(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuilderReset
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadExHandler, DisplayName: testNewThreadExHandler(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadExHandler
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadPriority, DisplayName: testNewThreadPriority(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadPriority
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoNamingPattern, DisplayName: testNewThreadNoNamingPattern(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testNewThreadNoNamingPattern
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildUncaughtExceptionHandlerNull, DisplayName: testBuildUncaughtExceptionHandlerNull(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildUncaughtExceptionHandlerNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildNamingPatternNull, DisplayName: testBuildNamingPatternNull(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildNamingPatternNull
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuilderResetAfterBuild, DisplayName: testBuilderResetAfterBuild(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuilderResetAfterBuild
* Started : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildDefaults, DisplayName: testBuildDefaults(org.apache.commons.lang3.concurrent.BasicThreadFactoryTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BasicThreadFactoryTest, MethodName: testBuildDefaults
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest
Number of testcases to execute : 4
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testAbove, DisplayName: testAbove(org.apache.commons.lang3.text.translate.NumericEntityEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testAbove
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testBelow, DisplayName: testBelow(org.apache.commons.lang3.text.translate.NumericEntityEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testBelow
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testBetween, DisplayName: testBetween(org.apache.commons.lang3.text.translate.NumericEntityEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testBetween
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testSupplementary, DisplayName: testSupplementary(org.apache.commons.lang3.text.translate.NumericEntityEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityEscaperTest, MethodName: testSupplementary
Number of testcases executed : 4
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.OctalUnescaperTest
Number of testcases to execute : 1
* Started : ClasseName: org.apache.commons.lang3.text.translate.OctalUnescaperTest, MethodName: testBetween, DisplayName: testBetween(org.apache.commons.lang3.text.translate.OctalUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.OctalUnescaperTest, MethodName: testBetween
Number of testcases executed : 1
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableObjectTest
Number of testcases to execute : 5
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableObjectTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableObjectTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableObjectTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableObjectTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableObjectTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableObjectTest, MethodName: testGetSet
Number of testcases executed : 5
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testPerson, DisplayName: testPerson(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testPerson
* Started : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest, MethodName: testAppendSuper
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableFloatTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testToFloat, DisplayName: testToFloat(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testToFloat
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testNanInfinite, DisplayName: testNanInfinite(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testNanInfinite
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableFloatTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableFloatTest, MethodName: testAddValueObject
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.EnumUtilsTest
Number of testcases to execute : 5
* Started : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnumMap, DisplayName: test_getEnumMap(org.apache.commons.lang3.EnumUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnumMap
* Started : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnum, DisplayName: test_getEnum(org.apache.commons.lang3.EnumUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnum
* Started : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_isEnum, DisplayName: test_isEnum(org.apache.commons.lang3.EnumUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_isEnum
* Started : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: testConstructable, DisplayName: testConstructable(org.apache.commons.lang3.EnumUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: testConstructable
* Started : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnumList, DisplayName: test_getEnumList(org.apache.commons.lang3.EnumUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.EnumUtilsTest, MethodName: test_getEnumList
Number of testcases executed : 5
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.event.EventListenerSupportTest
Number of testcases to execute : 9
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testRemoveNullListener, DisplayName: testRemoveNullListener(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testRemoveNullListener
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testRemoveListenerDuringEvent, DisplayName: testRemoveListenerDuringEvent(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testRemoveListenerDuringEvent
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testSerialization, DisplayName: testSerialization(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testSerialization
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testAddNullListener, DisplayName: testAddNullListener(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testAddNullListener
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testGetListeners, DisplayName: testGetListeners(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testGetListeners
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testCreateWithNonInterfaceParameter, DisplayName: testCreateWithNonInterfaceParameter(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testCreateWithNonInterfaceParameter
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testEventDispatchOrder, DisplayName: testEventDispatchOrder(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testEventDispatchOrder
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testCreateWithNullParameter, DisplayName: testCreateWithNullParameter(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testCreateWithNullParameter
* Started : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testSubclassInvocationHandling, DisplayName: testSubclassInvocationHandling(org.apache.commons.lang3.event.EventListenerSupportTest)
* Finished : ClasseName: org.apache.commons.lang3.event.EventListenerSupportTest, MethodName: testSubclassInvocationHandling
Number of testcases executed : 9
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ObjectUtilsTest
Number of testcases to execute : 21
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testNotEqual, DisplayName: testNotEqual(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testNotEqual
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testToString_Object, DisplayName: testToString_Object(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testToString_Object
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testMax, DisplayName: testMax(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testMax
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testMin, DisplayName: testMin(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testMin
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testFirstNonNull, DisplayName: testFirstNonNull(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testFirstNonNull
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testNull, DisplayName: testNull(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testNull
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfStringArray, DisplayName: testCloneOfStringArray(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfStringArray
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testIdentityToString, DisplayName: testIdentityToString(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testIdentityToString
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfPrimitiveArray, DisplayName: testCloneOfPrimitiveArray(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfPrimitiveArray
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfCloneable, DisplayName: testCloneOfCloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfCloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfCloneable, DisplayName: testPossibleCloneOfCloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfCloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfUncloneable, DisplayName: testPossibleCloneOfUncloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfUncloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfNotCloneable, DisplayName: testCloneOfNotCloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfNotCloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testToString_ObjectString, DisplayName: testToString_ObjectString(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testToString_ObjectString
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfUncloneable, DisplayName: testCloneOfUncloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCloneOfUncloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfNotCloneable, DisplayName: testPossibleCloneOfNotCloneable(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testPossibleCloneOfNotCloneable
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCompare, DisplayName: testCompare(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testCompare
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testIsNull, DisplayName: testIsNull(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testIsNull
* Started : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.ObjectUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ObjectUtilsTest, MethodName: testConstructor
Number of testcases executed : 21
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.math.NumberUtilsTest
Number of testcases to execute : 51
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumDouble, DisplayName: testMaximumDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumDouble
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToFloatStringF, DisplayName: testToFloatStringF(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToFloatStringF
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumFloat, DisplayName: testMinimumFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumShort, DisplayName: testMinimumShort(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumShort
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateNumber, DisplayName: testCreateNumber(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateNumber
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToLongString, DisplayName: testToLongString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToLongString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToIntStringI, DisplayName: testToIntStringI(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToIntStringI
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToIntString, DisplayName: testToIntString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToIntString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateFloat, DisplayName: testCreateFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumInt, DisplayName: testMinimumInt(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumInt
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToByteStringI, DisplayName: testToByteStringI(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToByteStringI
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToFloatString, DisplayName: testToFloatString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToFloatString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinFloat, DisplayName: testMinFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinShort, DisplayName: testMinShort(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinShort
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToByteString, DisplayName: testToByteString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToByteString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testLang300, DisplayName: testLang300(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testLang300
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testLang381, DisplayName: testLang381(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testLang381
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxDouble, DisplayName: testMaxDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxDouble
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumDouble, DisplayName: testMinimumDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumDouble
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testIsDigits, DisplayName: testIsDigits(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testIsDigits
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateBigDecimal, DisplayName: testCreateBigDecimal(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateBigDecimal
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testConstants, DisplayName: testConstants(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testConstants
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCompareDouble, DisplayName: testCompareDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCompareDouble
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumByte, DisplayName: testMinimumByte(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumByte
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumLong, DisplayName: testMinimumLong(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinimumLong
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testIsNumber, DisplayName: testIsNumber(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testIsNumber
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinDouble, DisplayName: testMinDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinDouble
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxByte, DisplayName: testMaxByte(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxByte
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxLong, DisplayName: testMaxLong(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxLong
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateBigInteger, DisplayName: testCreateBigInteger(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateBigInteger
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateLong, DisplayName: testCreateLong(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateLong
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinByte, DisplayName: testMinByte(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinByte
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinLong, DisplayName: testMinLong(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinLong
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumInt, DisplayName: testMaximumInt(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumInt
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumByte, DisplayName: testMaximumByte(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumByte
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumLong, DisplayName: testMaximumLong(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumLong
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxFloat, DisplayName: testMaxFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxShort, DisplayName: testMaxShort(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxShort
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCompareFloat, DisplayName: testCompareFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCompareFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxInt, DisplayName: testMaxInt(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaxInt
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinInt, DisplayName: testMinInt(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMinInt
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testStringToDoubleString, DisplayName: testStringToDoubleString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testStringToDoubleString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumFloat, DisplayName: testMaximumFloat(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumFloat
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumShort, DisplayName: testMaximumShort(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testMaximumShort
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToShortStringI, DisplayName: testToShortStringI(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToShortStringI
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateInteger, DisplayName: testCreateInteger(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateInteger
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToLongStringL, DisplayName: testToLongStringL(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToLongStringL
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testStringToDoubleStringD, DisplayName: testStringToDoubleStringD(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testStringToDoubleStringD
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToShortString, DisplayName: testToShortString(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testToShortString
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateDouble, DisplayName: testCreateDouble(org.apache.commons.lang3.math.NumberUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.NumberUtilsTest, MethodName: testCreateDouble
Number of testcases executed : 51
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.HashCodeBuilderTest
Number of testcases to execute : 42
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testCharArray, DisplayName: testCharArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectBuild, DisplayName: testObjectBuild(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectBuild
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testCharArrayAsObject, DisplayName: testCharArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testCharArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloatArray, DisplayName: testFloatArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testInt, DisplayName: testInt(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testInt
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByteArray, DisplayName: testByteArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloat, DisplayName: testFloat(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloat
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShort, DisplayName: testShort(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShort
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testSuper, DisplayName: testSuper(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testSuper
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByte, DisplayName: testByte(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByte
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testChar, DisplayName: testChar(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testChar
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloatArrayAsObject, DisplayName: testFloatArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testFloatArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testIntArrayAsObject, DisplayName: testIntArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testIntArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx1, DisplayName: testReflectionHashCodeEx1(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx1
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx2, DisplayName: testReflectionHashCodeEx2(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx2
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx3, DisplayName: testReflectionHashCodeEx3(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeEx3
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBoolean, DisplayName: testBoolean(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBoolean
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanArray, DisplayName: testBooleanArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDoubleArrayAsObject, DisplayName: testDoubleArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDoubleArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCodeEx1, DisplayName: testReflectionHierarchyHashCodeEx1(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCodeEx1
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCodeEx2, DisplayName: testReflectionHierarchyHashCodeEx2(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCodeEx2
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testConstructorEx1, DisplayName: testConstructorEx1(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testConstructorEx1
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testConstructorEx2, DisplayName: testConstructorEx2(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testConstructorEx2
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionObjectCycle, DisplayName: testReflectionObjectCycle(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCode, DisplayName: testReflectionHierarchyHashCode(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHierarchyHashCode
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectArrayAsObject, DisplayName: testObjectArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObjectArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanMultiArray, DisplayName: testBooleanMultiArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanMultiArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShortArray, DisplayName: testShortArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testIntArray, DisplayName: testIntArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDouble, DisplayName: testDouble(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDouble
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testToHashCodeEqualsHashCode, DisplayName: testToHashCodeEqualsHashCode(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testToHashCodeEqualsHashCode
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCode, DisplayName: testReflectionHashCode(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCode
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLongArrayAsObject, DisplayName: testLongArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testLongArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByteArrayAsObject, DisplayName: testByteArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testByteArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeExcludeFields, DisplayName: testReflectionHashCodeExcludeFields(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testReflectionHashCodeExcludeFields
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShortArrayAsObject, DisplayName: testShortArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testShortArrayAsObject
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDoubleArray, DisplayName: testDoubleArray(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testDoubleArray
* Started : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanArrayAsObject, DisplayName: testBooleanArrayAsObject(org.apache.commons.lang3.builder.HashCodeBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.HashCodeBuilderTest, MethodName: testBooleanArrayAsObject
Number of testcases executed : 42
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ClassUtilsTest
Number of testcases to execute : 47
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_Class, DisplayName: test_getShortClassName_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable, DisplayName: test_isAssignable(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testShowJavaBug, DisplayName: testShowJavaBug(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testShowJavaBug
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testToClass_object, DisplayName: testToClass_object(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testToClass_object
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassByNormalNameArrays, DisplayName: testGetClassByNormalNameArrays(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassByNormalNameArrays
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetInnerClass, DisplayName: testGetInnerClass(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetInnerClass
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getAllSuperclasses_Class, DisplayName: test_getAllSuperclasses_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getAllSuperclasses_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testPrimitiveToWrapper, DisplayName: testPrimitiveToWrapper(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testPrimitiveToWrapper
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_Object, DisplayName: test_getPackageCanonicalName_Object(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_Object
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Widening, DisplayName: test_isAssignable_Widening(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Widening
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_String, DisplayName: test_getPackageCanonicalName_String(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_String
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassWithArrayClasses, DisplayName: testGetClassWithArrayClasses(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassWithArrayClasses
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_Class, DisplayName: test_getPackageCanonicalName_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageCanonicalName_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_Object, DisplayName: test_getShortClassName_Object(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_Object
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_String, DisplayName: test_getShortClassName_String(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortClassName_String
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_NoAutoboxing, DisplayName: test_isAssignable_NoAutoboxing(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_NoAutoboxing
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitive, DisplayName: testWrapperToPrimitive(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitive
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitives, DisplayName: testWrappersToPrimitives(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitives
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray_Autoboxing, DisplayName: test_isAssignable_ClassArray_ClassArray_Autoboxing(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray_Autoboxing
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassWithArrayClasses2D, DisplayName: testGetClassWithArrayClasses2D(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassWithArrayClasses2D
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_Object, DisplayName: test_getPackageName_Object(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_Object
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_String, DisplayName: test_getPackageName_String(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_String
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray_NoAutoboxing, DisplayName: test_isAssignable_ClassArray_ClassArray_NoAutoboxing(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray_NoAutoboxing
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitiveNull, DisplayName: testWrapperToPrimitiveNull(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitiveNull
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassByNormalNameArrays2D, DisplayName: testGetClassByNormalNameArrays2D(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassByNormalNameArrays2D
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWithInterleavingWhitespace, DisplayName: testWithInterleavingWhitespace(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWithInterleavingWhitespace
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_Class, DisplayName: test_getPackageName_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getPackageName_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_Object, DisplayName: test_getShortCanonicalName_Object(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_Object
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_String, DisplayName: test_getShortCanonicalName_String(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_String
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_Class, DisplayName: test_getShortCanonicalName_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getShortCanonicalName_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_DefaultUnboxing_Widening, DisplayName: test_isAssignable_DefaultUnboxing_Widening(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_DefaultUnboxing_Widening
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassRawPrimitives, DisplayName: testGetClassRawPrimitives(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassRawPrimitives
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassInvalidArguments, DisplayName: testGetClassInvalidArguments(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassInvalidArguments
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testPrimitivesToWrappers, DisplayName: testPrimitivesToWrappers(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testPrimitivesToWrappers
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassClassNotFound, DisplayName: testGetClassClassNotFound(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetClassClassNotFound
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitivesNull, DisplayName: testWrappersToPrimitivesNull(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitivesNull
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isInnerClass_Class, DisplayName: test_isInnerClass_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isInnerClass_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray, DisplayName: test_isAssignable_ClassArray_ClassArray(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_ClassArray_ClassArray
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Unboxing_Widening, DisplayName: test_isAssignable_Unboxing_Widening(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Unboxing_Widening
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitivesEmpty, DisplayName: testWrappersToPrimitivesEmpty(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrappersToPrimitivesEmpty
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitiveNoWrapper, DisplayName: testWrapperToPrimitiveNoWrapper(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testWrapperToPrimitiveNoWrapper
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_convertClassNamesToClasses_List, DisplayName: test_convertClassNamesToClasses_List(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_convertClassNamesToClasses_List
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Autoboxing, DisplayName: test_isAssignable_Autoboxing(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_isAssignable_Autoboxing
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_convertClassesToClassNames_List, DisplayName: test_convertClassesToClassNames_List(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_convertClassesToClassNames_List
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetPublicMethod, DisplayName: testGetPublicMethod(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testGetPublicMethod
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getAllInterfaces_Class, DisplayName: test_getAllInterfaces_Class(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: test_getAllInterfaces_Class
* Started : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.ClassUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.ClassUtilsTest, MethodName: testConstructor
Number of testcases executed : 47
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsSubstringTest
Number of testcases to execute : 13
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testRight_String, DisplayName: testRight_String(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testRight_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBefore_StringString, DisplayName: testSubstringBefore_StringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBefore_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringsBetween_StringStringString, DisplayName: testSubstringsBetween_StringStringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringsBetween_StringStringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBetween_StringString, DisplayName: testSubstringBetween_StringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBetween_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringAfterLast_StringString, DisplayName: testSubstringAfterLast_StringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringAfterLast_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBetween_StringStringString, DisplayName: testSubstringBetween_StringStringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBetween_StringStringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstring_StringIntInt, DisplayName: testSubstring_StringIntInt(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstring_StringIntInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testCountMatches_String, DisplayName: testCountMatches_String(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testCountMatches_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBeforeLast_StringString, DisplayName: testSubstringBeforeLast_StringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringBeforeLast_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testLeft_String, DisplayName: testLeft_String(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testLeft_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testMid_String, DisplayName: testMid_String(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testMid_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstring_StringInt, DisplayName: testSubstring_StringInt(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstring_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringAfter_StringString, DisplayName: testSubstringAfter_StringString(org.apache.commons.lang3.StringUtilsSubstringTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsSubstringTest, MethodName: testSubstringAfter_StringString
Number of testcases executed : 13
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.SystemUtilsTest
Number of testcases to execute : 11
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testJavaVersionMatches, DisplayName: testJavaVersionMatches(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testJavaVersionMatches
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testOSMatchesNameAndVersion, DisplayName: testOSMatchesNameAndVersion(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testOSMatchesNameAndVersion
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testIS_OS, DisplayName: testIS_OS(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testIS_OS
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetJavaIoTmpDir, DisplayName: testGetJavaIoTmpDir(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetJavaIoTmpDir
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testJavaAwtHeadless, DisplayName: testJavaAwtHeadless(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testJavaAwtHeadless
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetUserDir, DisplayName: testGetUserDir(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetUserDir
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testIS_JAVA, DisplayName: testIS_JAVA(org.apache.commons.lang3.SystemUtilsTest)
Can't test IS_JAVA value
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testIS_JAVA
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetJavaHome, DisplayName: testGetJavaHome(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetJavaHome
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testOSMatchesName, DisplayName: testOSMatchesName(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testOSMatchesName
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetUserHome, DisplayName: testGetUserHome(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testGetUserHome
* Started : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.SystemUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SystemUtilsTest, MethodName: testConstructor
Number of testcases executed : 11
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.ToStringBuilderTest
Number of testcases to execute : 74
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: test_setUpToClass_valid, DisplayName: test_setUpToClass_valid(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: test_setUpToClass_valid
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testCharArray, DisplayName: testCharArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionHierarchyArrayList, DisplayName: testReflectionHierarchyArrayList(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionHierarchyArrayList
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionNull, DisplayName: testReflectionNull(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionNull
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDoubleArrayArray, DisplayName: testDoubleArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDoubleArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBoolean, DisplayName: testReflectionBoolean(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBoolean
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectBuild, DisplayName: testObjectBuild(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectBuild
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectCycle, DisplayName: testObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionHierarchy, DisplayName: testReflectionHierarchy(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionHierarchy
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSelfInstanceTwoVarsReflectionObjectCycle, DisplayName: testSelfInstanceTwoVarsReflectionObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSelfInstanceTwoVarsReflectionObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendToStringUsingMultiLineStyle, DisplayName: testAppendToStringUsingMultiLineStyle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendToStringUsingMultiLineStyle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShortArrayArray, DisplayName: testShortArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShortArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBooleanArrayArray, DisplayName: testBooleanArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBooleanArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloatArray, DisplayName: testFloatArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInt, DisplayName: testInt(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInt
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByteArray, DisplayName: testByteArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayCycle, DisplayName: testReflectionArrayCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionLongArrayArray, DisplayName: testReflectionLongArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBlank, DisplayName: testBlank(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBlank
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloat, DisplayName: testFloat(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloat
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShort, DisplayName: testShort(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShort
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayArrayCycle, DisplayName: testReflectionArrayArrayCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayArrayCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByte, DisplayName: testByte(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByte
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testChar, DisplayName: testChar(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testChar
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionFloatArray, DisplayName: testReflectionFloatArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLongArrayArray, DisplayName: testLongArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLongArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: test_setUpToClass_invalid, DisplayName: test_setUpToClass_invalid(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: test_setUpToClass_invalid
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBoolean, DisplayName: testBoolean(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBoolean
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionDoubleArrayArray, DisplayName: testReflectionDoubleArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionDoubleArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBooleanArray, DisplayName: testReflectionBooleanArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionInteger, DisplayName: testReflectionInteger(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionInteger
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBooleanArray, DisplayName: testBooleanArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloatArrayArray, DisplayName: testFloatArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testFloatArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionyteArray, DisplayName: testReflectionyteArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionyteArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionDoubleArray, DisplayName: testReflectionDoubleArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionDoubleArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionIntArrayArray, DisplayName: testReflectionIntArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionIntArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSimpleReflectionStatics, DisplayName: testSimpleReflectionStatics(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSimpleReflectionStatics
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionStatics, DisplayName: testReflectionStatics(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionStatics
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionLongArray, DisplayName: testReflectionLongArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionhortArrayArray, DisplayName: testReflectionhortArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionhortArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx1, DisplayName: testConstructorEx1(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx1
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx2, DisplayName: testConstructorEx2(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx2
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx3, DisplayName: testConstructorEx3(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testConstructorEx3
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionObjectArray, DisplayName: testReflectionObjectArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionObjectCycle, DisplayName: testReflectionObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBooleanArrayArray, DisplayName: testReflectionBooleanArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionBooleanArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSimpleReflectionObjectCycle, DisplayName: testSimpleReflectionObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSimpleReflectionObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShortArray, DisplayName: testShortArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testIntArrayArray, DisplayName: testIntArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testIntArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInheritedReflectionStatics, DisplayName: testInheritedReflectionStatics(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInheritedReflectionStatics
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionByteArrayArray, DisplayName: testReflectionByteArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionByteArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayCycleLevel2, DisplayName: testReflectionArrayCycleLevel2(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayCycleLevel2
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendToString, DisplayName: testAppendToString(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendToString
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayAndObjectCycle, DisplayName: testReflectionArrayAndObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionArrayAndObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSetDefaultEx, DisplayName: testSetDefaultEx(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSetDefaultEx
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharArrayArray, DisplayName: testReflectionCharArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testIntArray, DisplayName: testIntArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDouble, DisplayName: testDouble(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDouble
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByteArrayArray, DisplayName: testByteArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testByteArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionShortArray, DisplayName: testReflectionShortArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testCharArrayArray, DisplayName: testCharArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testCharArrayArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSelfInstanceVarReflectionObjectCycle, DisplayName: testSelfInstanceVarReflectionObjectCycle(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testSelfInstanceVarReflectionObjectCycle
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testAppendSuper
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionIntArray, DisplayName: testReflectionIntArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharArray, DisplayName: testReflectionCharArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testGetSetDefault, DisplayName: testGetSetDefault(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testGetSetDefault
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInnerClassReflection, DisplayName: testInnerClassReflection(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testInnerClassReflection
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharacter, DisplayName: testReflectionCharacter(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionCharacter
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDoubleArray, DisplayName: testDoubleArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testDoubleArray
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionFloatArrayArray, DisplayName: testReflectionFloatArrayArray(org.apache.commons.lang3.builder.ToStringBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringBuilderTest, MethodName: testReflectionFloatArrayArray
Number of testcases executed : 74
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.reflect.MethodUtilsTest
Number of testcases to execute : 10
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessibleInterfaceMethod, DisplayName: testGetAccessibleInterfaceMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessibleInterfaceMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessibleInterfaceMethodFromDescription, DisplayName: testGetAccessibleInterfaceMethodFromDescription(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessibleInterfaceMethodFromDescription
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeStaticMethod, DisplayName: testInvokeStaticMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeStaticMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessiblePublicMethod, DisplayName: testGetAccessiblePublicMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessiblePublicMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetMatchingAccessibleMethod, DisplayName: testGetMatchingAccessibleMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetMatchingAccessibleMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeExactMethod, DisplayName: testInvokeExactMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeExactMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeMethod, DisplayName: testInvokeMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeExactStaticMethod, DisplayName: testInvokeExactStaticMethod(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testInvokeExactStaticMethod
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessiblePublicMethodFromDescription, DisplayName: testGetAccessiblePublicMethodFromDescription(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testGetAccessiblePublicMethodFromDescription
* Started : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.reflect.MethodUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.MethodUtilsTest, MethodName: testConstructor
Number of testcases executed : 10
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableLongTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testToLong, DisplayName: testToLong(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testToLong
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableLongTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableLongTest, MethodName: testAddValueObject
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest
Number of testcases to execute : 4
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testNumberOfInitializeInvocations, DisplayName: testNumberOfInitializeInvocations(org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testNumberOfInitializeInvocations
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGet, DisplayName: testGet(org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGet
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGetConcurrent, DisplayName: testGetConcurrent(org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGetConcurrent
* Started : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGetMultipleTimes, DisplayName: testGetMultipleTimes(org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest, MethodName: testGetMultipleTimes
Number of testcases executed : 4
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.LookupTranslatorTest
Number of testcases to execute : 1
* Started : ClasseName: org.apache.commons.lang3.text.translate.LookupTranslatorTest, MethodName: testBasicLookup, DisplayName: testBasicLookup(org.apache.commons.lang3.text.translate.LookupTranslatorTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.LookupTranslatorTest, MethodName: testBasicLookup
Number of testcases executed : 1
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.CompositeFormatTest
Number of testcases to execute : 2
* Started : ClasseName: org.apache.commons.lang3.text.CompositeFormatTest, MethodName: testUsage, DisplayName: testUsage(org.apache.commons.lang3.text.CompositeFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.CompositeFormatTest, MethodName: testUsage
* Started : ClasseName: org.apache.commons.lang3.text.CompositeFormatTest, MethodName: testCompositeFormat, DisplayName: testCompositeFormat(org.apache.commons.lang3.text.CompositeFormatTest)
* Finished : ClasseName: org.apache.commons.lang3.text.CompositeFormatTest, MethodName: testCompositeFormat
Number of testcases executed : 2
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableBooleanTest
Number of testcases to execute : 6
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableBooleanTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableBooleanTest, MethodName: testGetSet
Number of testcases executed : 6
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrBuilderAppendInsertTest
Number of testcases to execute : 45
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Collection, DisplayName: testAppendWithSeparators_Collection(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Collection
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testInsertWithNullText, DisplayName: testInsertWithNullText(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testInsertWithNullText
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadRight_int, DisplayName: testAppendFixedWidthPadRight_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadRight_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_PrimitiveNumber, DisplayName: testAppendln_PrimitiveNumber(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_PrimitiveNumber
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_Boolean, DisplayName: testAppend_Boolean(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_Boolean
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_Boolean, DisplayName: testAppendln_Boolean(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_Boolean
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StrBuilder_int_int, DisplayName: testAppend_StrBuilder_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StrBuilder_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_CharArray_int_int, DisplayName: testAppendln_CharArray_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_CharArray_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadLeft, DisplayName: testAppendFixedWidthPadLeft(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadLeft
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_String_int_int, DisplayName: testAppendln_String_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_String_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadLeft_int, DisplayName: testAppendFixedWidthPadLeft_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadLeft_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Collection, DisplayName: testAppendAll_Collection(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Collection
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendNewLine, DisplayName: testAppendNewLine(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendNewLine
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_CharArray_int_int, DisplayName: testAppend_CharArray_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_CharArray_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StringBuffer, DisplayName: testAppendln_StringBuffer(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StringBuffer
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Iterator, DisplayName: testAppendAll_Iterator(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Iterator
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char_char, DisplayName: testAppendSeparator_char_char(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testLang299, DisplayName: testLang299(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testLang299
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Iterator, DisplayName: testAppendWithSeparators_Iterator(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Iterator
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithNullText, DisplayName: testAppendWithNullText(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithNullText
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StrBuilder, DisplayName: testAppendln_StrBuilder(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StrBuilder
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_Object, DisplayName: testAppendln_Object(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_Object
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StrBuilder, DisplayName: testAppend_StrBuilder(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StrBuilder
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String, DisplayName: testAppendSeparator_String(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_String, DisplayName: testAppendln_String(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char_int, DisplayName: testAppendSeparator_char_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String_String, DisplayName: testAppendSeparator_String_String(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Array, DisplayName: testAppendAll_Array(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendAll_Array
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char, DisplayName: testAppendSeparator_char(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_char
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StringBuffer, DisplayName: testAppend_StringBuffer(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StringBuffer
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparatorsWithNullText, DisplayName: testAppendWithSeparatorsWithNullText(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparatorsWithNullText
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String_int, DisplayName: testAppendSeparator_String_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendSeparator_String_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StringBuffer_int_int, DisplayName: testAppendln_StringBuffer_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StringBuffer_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_Object, DisplayName: testAppend_Object(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_Object
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StringBuffer_int_int, DisplayName: testAppend_StringBuffer_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_StringBuffer_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendPadding, DisplayName: testAppendPadding(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendPadding
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_String, DisplayName: testAppend_String(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_String
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_String_int_int, DisplayName: testAppend_String_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_String_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_PrimitiveNumber, DisplayName: testAppend_PrimitiveNumber(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_PrimitiveNumber
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testInsert, DisplayName: testInsert(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testInsert
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadRight, DisplayName: testAppendFixedWidthPadRight(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendFixedWidthPadRight
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StrBuilder_int_int, DisplayName: testAppendln_StrBuilder_int_int(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_StrBuilder_int_int
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_CharArray, DisplayName: testAppend_CharArray(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppend_CharArray
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_CharArray, DisplayName: testAppendln_CharArray(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendln_CharArray
* Started : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Array, DisplayName: testAppendWithSeparators_Array(org.apache.commons.lang3.text.StrBuilderAppendInsertTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrBuilderAppendInsertTest, MethodName: testAppendWithSeparators_Array
Number of testcases executed : 45
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.exception.DefaultExceptionContextTest
Number of testcases to execute : 5
* Started : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testGetValue, DisplayName: testGetValue(org.apache.commons.lang3.exception.DefaultExceptionContextTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testGetValue
* Started : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testGetLabelSet, DisplayName: testGetLabelSet(org.apache.commons.lang3.exception.DefaultExceptionContextTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testGetLabelSet
* Started : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testAddValue, DisplayName: testAddValue(org.apache.commons.lang3.exception.DefaultExceptionContextTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testAddValue
* Started : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testFormattedExceptionMessageNull, DisplayName: testFormattedExceptionMessageNull(org.apache.commons.lang3.exception.DefaultExceptionContextTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testFormattedExceptionMessageNull
* Started : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testReplaceValue, DisplayName: testReplaceValue(org.apache.commons.lang3.exception.DefaultExceptionContextTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.DefaultExceptionContextTest, MethodName: testReplaceValue
Number of testcases executed : 5
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.exception.ExceptionUtilsTest
Number of testcases to execute : 28
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOfType_ThrowableClass, DisplayName: testIndexOfType_ThrowableClass(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOfType_ThrowableClass
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: test_getRootCauseMessage_Throwable, DisplayName: test_getRootCauseMessage_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: test_getRootCauseMessage_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_null, DisplayName: testGetThrowableList_Throwable_null(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_null
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_nested, DisplayName: testGetThrowables_Throwable_nested(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_nested
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_jdkNoCause, DisplayName: testGetThrowableList_Throwable_jdkNoCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_jdkNoCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_null, DisplayName: testGetThrowables_Throwable_null(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_null
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_nested, DisplayName: testGetThrowableList_Throwable_nested(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_nested
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: test_getMessage_Throwable, DisplayName: test_getMessage_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: test_getMessage_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_withCause, DisplayName: testGetThrowables_Throwable_withCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_withCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetCause_Throwable, DisplayName: testGetCause_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetCause_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testRemoveCommonFrames_ListList, DisplayName: testRemoveCommonFrames_ListList(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testRemoveCommonFrames_ListList
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_Throwable, DisplayName: testPrintRootCauseStackTrace_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOf_ThrowableClass, DisplayName: testIndexOf_ThrowableClass(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOf_ThrowableClass
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_ThrowableStream, DisplayName: testPrintRootCauseStackTrace_ThrowableStream(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_ThrowableStream
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_withoutCause, DisplayName: testGetThrowableList_Throwable_withoutCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_withoutCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_ThrowableWriter, DisplayName: testPrintRootCauseStackTrace_ThrowableWriter(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testPrintRootCauseStackTrace_ThrowableWriter
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetRootCauseStackTrace_Throwable, DisplayName: testGetRootCauseStackTrace_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetRootCauseStackTrace_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableCount_Throwable, DisplayName: testGetThrowableCount_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableCount_Throwable
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetCause_ThrowableArray, DisplayName: testGetCause_ThrowableArray(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetCause_ThrowableArray
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_withoutCause, DisplayName: testGetThrowables_Throwable_withoutCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_withoutCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOf_ThrowableClassInt, DisplayName: testIndexOf_ThrowableClassInt(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOf_ThrowableClassInt
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_recursiveCause, DisplayName: testGetThrowables_Throwable_recursiveCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_recursiveCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOfType_ThrowableClassInt, DisplayName: testIndexOfType_ThrowableClassInt(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testIndexOfType_ThrowableClassInt
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_recursiveCause, DisplayName: testGetThrowableList_Throwable_recursiveCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_recursiveCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_jdkNoCause, DisplayName: testGetThrowables_Throwable_jdkNoCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowables_Throwable_jdkNoCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_withCause, DisplayName: testGetThrowableList_Throwable_withCause(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetThrowableList_Throwable_withCause
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetRootCause_Throwable, DisplayName: testGetRootCause_Throwable(org.apache.commons.lang3.exception.ExceptionUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ExceptionUtilsTest, MethodName: testGetRootCause_Throwable
Number of testcases executed : 28
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ArrayUtilsRemoveTest
Number of testcases to execute : 19
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementObjectArray, DisplayName: testRemoveElementObjectArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementObjectArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveDoubleArray, DisplayName: testRemoveDoubleArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveDoubleArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveObjectArray, DisplayName: testRemoveObjectArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveObjectArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementLongArray, DisplayName: testRemoveElementLongArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementLongArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveFloatArray, DisplayName: testRemoveFloatArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveFloatArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementBooleanArray, DisplayName: testRemoveElementBooleanArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementBooleanArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveCharArray, DisplayName: testRemoveCharArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveCharArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementFloatArray, DisplayName: testRemoveElementFloatArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementFloatArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementIntArray, DisplayName: testRemoveElementIntArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementIntArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveBooleanArray, DisplayName: testRemoveBooleanArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveBooleanArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveByteArray, DisplayName: testRemoveByteArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveByteArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementCharArray, DisplayName: testRemoveElementCharArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementCharArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveNumberArray, DisplayName: testRemoveNumberArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveNumberArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementByteArray, DisplayName: testRemoveElementByteArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementByteArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveShortArray, DisplayName: testRemoveShortArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveShortArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementDoubleArray, DisplayName: testRemoveElementDoubleArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementDoubleArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveIntArray, DisplayName: testRemoveIntArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveIntArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveLongArray, DisplayName: testRemoveLongArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveLongArray
* Started : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementShortArray, DisplayName: testRemoveElementShortArray(org.apache.commons.lang3.ArrayUtilsRemoveTest)
* Finished : ClasseName: org.apache.commons.lang3.ArrayUtilsRemoveTest, MethodName: testRemoveElementShortArray
Number of testcases executed : 19
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.StopWatchTest
Number of testcases to execute : 7
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testBadStates, DisplayName: testBadStates(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testBadStates
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testGetStartTime, DisplayName: testGetStartTime(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testGetStartTime
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testLang315, DisplayName: testLang315(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testLang315
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSimpleGet, DisplayName: testStopWatchSimpleGet(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSimpleGet
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSimple, DisplayName: testStopWatchSimple(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSimple
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSplit, DisplayName: testStopWatchSplit(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSplit
* Started : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSuspend, DisplayName: testStopWatchSuspend(org.apache.commons.lang3.time.StopWatchTest)
* Finished : ClasseName: org.apache.commons.lang3.time.StopWatchTest, MethodName: testStopWatchSuspend
Number of testcases executed : 7
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.AnnotationUtilsTest
Number of testcases to execute : 10
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testOneArgNull, DisplayName: testOneArgNull(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testOneArgNull
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testSameInstance, DisplayName: testSameInstance(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testSameInstance
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testEquivalence, DisplayName: testEquivalence(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testEquivalence
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testAnnotationsOfDifferingTypes, DisplayName: testAnnotationsOfDifferingTypes(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testAnnotationsOfDifferingTypes
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testGeneratedAnnotationEquivalentToRealAnnotation, DisplayName: testGeneratedAnnotationEquivalentToRealAnnotation(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testGeneratedAnnotationEquivalentToRealAnnotation
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testBothArgsNull, DisplayName: testBothArgsNull(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testBothArgsNull
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testNonEquivalentAnnotationsOfSameType, DisplayName: testNonEquivalentAnnotationsOfSameType(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testNonEquivalentAnnotationsOfSameType
* Started : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testIsValidAnnotationMemberType, DisplayName: testIsValidAnnotationMemberType(org.apache.commons.lang3.AnnotationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.AnnotationUtilsTest, MethodName: testIsValidAnnotationMemberType
Number of testcases executed : 10
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.CompareToBuilderTest
Number of testcases to execute : 48
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testCharArray, DisplayName: testCharArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectBuild, DisplayName: testObjectBuild(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectBuild
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloatArray, DisplayName: testFloatArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompareExcludeFields, DisplayName: testReflectionHierarchyCompareExcludeFields(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompareExcludeFields
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectComparatorNull, DisplayName: testObjectComparatorNull(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectComparatorNull
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompare, DisplayName: testReflectionHierarchyCompare(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompare
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiCharArray, DisplayName: testMultiCharArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByteArrayHiddenByObject, DisplayName: testByteArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByteArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testInt, DisplayName: testInt(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testInt
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByteArray, DisplayName: testByteArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testRaggedArray, DisplayName: testRaggedArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testRaggedArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloat, DisplayName: testFloat(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloat
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShort, DisplayName: testShort(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShort
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByte, DisplayName: testByte(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testByte
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testChar, DisplayName: testChar(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testChar
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompare, DisplayName: testReflectionCompare(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompare
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectArrayHiddenByObject, DisplayName: testObjectArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShortArrayHiddenByObject, DisplayName: testShortArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShortArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiByteArray, DisplayName: testMultiByteArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiBooleanArray, DisplayName: testMultiBooleanArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompareEx1, DisplayName: testReflectionCompareEx1(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompareEx1
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompareEx2, DisplayName: testReflectionCompareEx2(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionCompareEx2
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLongArrayHiddenByObject, DisplayName: testLongArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLongArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectEx2, DisplayName: testObjectEx2(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectEx2
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testCharArrayHiddenByObject, DisplayName: testCharArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testCharArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiFloatArray, DisplayName: testMultiFloatArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMixedArray, DisplayName: testMixedArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMixedArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBoolean, DisplayName: testBoolean(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBoolean
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiIntArray, DisplayName: testMultiIntArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBooleanArray, DisplayName: testBooleanArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBooleanArrayHiddenByObject, DisplayName: testBooleanArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testBooleanArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testIntArrayHiddenByObject, DisplayName: testIntArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testIntArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompareTransients, DisplayName: testReflectionHierarchyCompareTransients(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testReflectionHierarchyCompareTransients
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShortArray, DisplayName: testShortArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiLongArray, DisplayName: testMultiLongArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloatArrayHiddenByObject, DisplayName: testFloatArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testFloatArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testIntArray, DisplayName: testIntArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectComparator, DisplayName: testObjectComparator(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObjectComparator
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDouble, DisplayName: testDouble(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDouble
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDoubleArrayHiddenByObject, DisplayName: testDoubleArrayHiddenByObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDoubleArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiDoubleArray, DisplayName: testMultiDoubleArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiDoubleArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testAppendSuper, DisplayName: testAppendSuper(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testAppendSuper
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiShortArray, DisplayName: testMultiShortArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testMultiShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDoubleArray, DisplayName: testDoubleArray(org.apache.commons.lang3.builder.CompareToBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.CompareToBuilderTest, MethodName: testDoubleArray
Number of testcases executed : 48
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest
Number of testcases to execute : 47
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfIgnoreCase_StringInt, DisplayName: testLastIndexOfIgnoreCase_StringInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfIgnoreCase_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArrayWithSupplementaryChars, DisplayName: testContainsAny_StringCharArrayWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArrayWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArrayWithSupplementaryChars, DisplayName: testContainsNone_CharArrayWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArrayWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_StringWithSupplementaryChars, DisplayName: testContains_StringWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_StringWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_StringWithSupplementaryChars, DisplayName: testContainsNone_StringWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_StringWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsOnly_String, DisplayName: testContainsOnly_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsOnly_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_String, DisplayName: testLastIndexOf_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArrayWithBadSupplementaryChars, DisplayName: testContainsAny_StringCharArrayWithBadSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArrayWithBadSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testOrdinalIndexOf, DisplayName: testOrdinalIndexOf(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testOrdinalIndexOf
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringStringWithSupplementaryChars, DisplayName: testIndexOfAnyBut_StringStringWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringStringWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_String, DisplayName: testContains_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testEqualsIgnoreCase, DisplayName: testEqualsIgnoreCase(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testEqualsIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArray, DisplayName: testContainsNone_CharArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfIgnoreCase_StringInt, DisplayName: testIndexOfIgnoreCase_StringInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfIgnoreCase_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringWithBadSupplementaryChars, DisplayName: testContainsAny_StringWithBadSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringWithBadSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastOrdinalIndexOf, DisplayName: testLastOrdinalIndexOf(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastOrdinalIndexOf
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringString, DisplayName: testIndexOfAny_StringString(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfIgnoreCase_String, DisplayName: testIndexOfIgnoreCase_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfIgnoreCase_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsIgnoreCase_StringString, DisplayName: testContainsIgnoreCase_StringString(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsIgnoreCase_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringString, DisplayName: testIndexOfAnyBut_StringString(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_Char, DisplayName: testContains_Char(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_Char
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_char, DisplayName: testIndexOf_char(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_char
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringCharArrayWithSupplementaryChars, DisplayName: testIndexOfAny_StringCharArrayWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringCharArrayWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_charInt, DisplayName: testIndexOf_charInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_charInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_String, DisplayName: testContainsNone_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsIgnoreCase_LocaleIndependence, DisplayName: testContainsIgnoreCase_LocaleIndependence(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsIgnoreCase_LocaleIndependence
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringString, DisplayName: testContainsAny_StringString(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringString
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars, DisplayName: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_charInt, DisplayName: testLastIndexOf_charInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_charInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_StringWithBadSupplementaryChars, DisplayName: testContainsNone_StringWithBadSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_StringWithBadSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringCharArray, DisplayName: testIndexOfAnyBut_StringCharArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAnyBut_StringCharArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringWithSupplementaryChars, DisplayName: testContainsAny_StringWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_StringInt, DisplayName: testIndexOf_StringInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_StringInt, DisplayName: testLastIndexOf_StringInt(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_StringInt
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringStringArray, DisplayName: testIndexOfAny_StringStringArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringStringArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_char, DisplayName: testLastIndexOf_char(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOf_char
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsOnly_CharArray, DisplayName: testContainsOnly_CharArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsOnly_CharArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsWhitespace, DisplayName: testContainsWhitespace(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsWhitespace
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringStringWithSupplementaryChars, DisplayName: testIndexOfAny_StringStringWithSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringStringWithSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfAny_StringStringArray, DisplayName: testLastIndexOfAny_StringStringArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfAny_StringStringArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArray, DisplayName: testContainsAny_StringCharArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsAny_StringCharArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfIgnoreCase_String, DisplayName: testLastIndexOfIgnoreCase_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testLastIndexOfIgnoreCase_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_String, DisplayName: testIndexOf_String(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOf_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArrayWithBadSupplementaryChars, DisplayName: testContainsNone_CharArrayWithBadSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContainsNone_CharArrayWithBadSupplementaryChars
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringCharArray, DisplayName: testIndexOfAny_StringCharArray(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testIndexOfAny_StringCharArray
* Started : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_StringWithBadSupplementaryChars, DisplayName: testContains_StringWithBadSupplementaryChars(org.apache.commons.lang3.StringUtilsEqualsIndexOfTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest, MethodName: testContains_StringWithBadSupplementaryChars
Number of testcases executed : 47
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest
Number of testcases to execute : 11
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeEmptyCollection, DisplayName: test_toStringExcludeEmptyCollection(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeEmptyCollection
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArrayWithNull, DisplayName: test_toStringExcludeArrayWithNull(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArrayWithNull
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArray, DisplayName: test_toStringExcludeArray(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArray
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeNullCollection, DisplayName: test_toStringExcludeNullCollection(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeNullCollection
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollection, DisplayName: test_toStringExcludeCollection(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollection
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeNullArray, DisplayName: test_toStringExcludeNullArray(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeNullArray
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeEmptyArray, DisplayName: test_toStringExcludeEmptyArray(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeEmptyArray
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExclude, DisplayName: test_toStringExclude(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExclude
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollectionWithNulls, DisplayName: test_toStringExcludeCollectionWithNulls(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollectionWithNulls
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArrayWithNulls, DisplayName: test_toStringExcludeArrayWithNulls(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeArrayWithNulls
* Started : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollectionWithNull, DisplayName: test_toStringExcludeCollectionWithNull(org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest, MethodName: test_toStringExcludeCollectionWithNull
Number of testcases executed : 11
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest
Number of testcases to execute : 2
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, MethodName: testSupplementaryUnescaping, DisplayName: testSupplementaryUnescaping(org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, MethodName: testSupplementaryUnescaping
* Started : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, MethodName: testOutOfBounds, DisplayName: testOutOfBounds(org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest, MethodName: testOutOfBounds
Number of testcases executed : 2
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.reflect.TypeUtilsTest
Number of testcases to execute : 10
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetTypeArguments, DisplayName: testGetTypeArguments(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetTypeArguments
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsInstance, DisplayName: testIsInstance(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsInstance
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsAssignable, DisplayName: testIsAssignable(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsAssignable
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetPrimitiveArrayComponentType, DisplayName: testGetPrimitiveArrayComponentType(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetPrimitiveArrayComponentType
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testTypesSatisfyVariables, DisplayName: testTypesSatisfyVariables(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testTypesSatisfyVariables
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsArrayTypeClasses, DisplayName: testIsArrayTypeClasses(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsArrayTypeClasses
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testDetermineTypeVariableAssignments, DisplayName: testDetermineTypeVariableAssignments(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testDetermineTypeVariableAssignments
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetRawType, DisplayName: testGetRawType(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetRawType
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetArrayComponentType, DisplayName: testGetArrayComponentType(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testGetArrayComponentType
* Started : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsArrayGenericTypes, DisplayName: testIsArrayGenericTypes(org.apache.commons.lang3.reflect.TypeUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.reflect.TypeUtilsTest, MethodName: testIsArrayGenericTypes
Number of testcases executed : 10
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.math.IEEE754rUtilsTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testConstructorExists, DisplayName: testConstructorExists(org.apache.commons.lang3.math.IEEE754rUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testConstructorExists
* Started : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testLang381, DisplayName: testLang381(org.apache.commons.lang3.math.IEEE754rUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testLang381
* Started : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testEnforceExceptions, DisplayName: testEnforceExceptions(org.apache.commons.lang3.math.IEEE754rUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.math.IEEE754rUtilsTest, MethodName: testEnforceExceptions
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.SerializationUtilsTest
Number of testcases to execute : 23
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testException, DisplayName: testException(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testException
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesBadStream, DisplayName: testDeserializeBytesBadStream(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesBadStream
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamBadStream, DisplayName: testDeserializeStreamBadStream(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamBadStream
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytesUnserializable, DisplayName: testSerializeBytesUnserializable(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytesUnserializable
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamNullNull, DisplayName: testSerializeStreamNullNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamNullNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamNullObj, DisplayName: testSerializeStreamNullObj(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamNullObj
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testClone, DisplayName: testClone(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testClone
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytesNull, DisplayName: testSerializeBytesNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytesNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamObjNull, DisplayName: testSerializeStreamObjNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamObjNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeIOException, DisplayName: testSerializeIOException(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeIOException
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytes, DisplayName: testDeserializeBytes(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytes
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testCloneNull, DisplayName: testCloneNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testCloneNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStream, DisplayName: testSerializeStream(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStream
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStream, DisplayName: testDeserializeStream(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStream
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testCloneUnserializable, DisplayName: testCloneUnserializable(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testCloneUnserializable
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamUnserializable, DisplayName: testSerializeStreamUnserializable(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeStreamUnserializable
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamOfNull, DisplayName: testDeserializeStreamOfNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamOfNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamClassNotFound, DisplayName: testDeserializeStreamClassNotFound(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamClassNotFound
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesOfNull, DisplayName: testDeserializeBytesOfNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesOfNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytes, DisplayName: testSerializeBytes(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testSerializeBytes
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesNull, DisplayName: testDeserializeBytesNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeBytesNull
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamNull, DisplayName: testDeserializeStreamNull(org.apache.commons.lang3.SerializationUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.SerializationUtilsTest, MethodName: testDeserializeStreamNull
Number of testcases executed : 23
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.EqualsBuilderTest
Number of testcases to execute : 47
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCharArray, DisplayName: testCharArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectArray, DisplayName: testObjectArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectBuild, DisplayName: testObjectBuild(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectBuild
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloatArray, DisplayName: testFloatArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiCharArray, DisplayName: testMultiCharArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiCharArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByteArrayHiddenByObject, DisplayName: testByteArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByteArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionEquals, DisplayName: testReflectionEquals(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionEquals
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testAccessors, DisplayName: testAccessors(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testAccessors
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testInt, DisplayName: testInt(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testInt
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByteArray, DisplayName: testByteArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testRaggedArray, DisplayName: testRaggedArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testRaggedArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloat, DisplayName: testFloat(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloat
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReset, DisplayName: testReset(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReset
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShort, DisplayName: testShort(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShort
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testSuper, DisplayName: testSuper(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testSuper
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByte, DisplayName: testByte(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testByte
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testChar, DisplayName: testChar(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testChar
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLong, DisplayName: testLong(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLong
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCyclicalObjectReferences, DisplayName: testCyclicalObjectReferences(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCyclicalObjectReferences
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectArrayHiddenByObject, DisplayName: testObjectArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObjectArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShortArrayHiddenByObject, DisplayName: testShortArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShortArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiByteArray, DisplayName: testMultiByteArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiByteArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiBooleanArray, DisplayName: testMultiBooleanArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLongArrayHiddenByObject, DisplayName: testLongArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLongArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCharArrayHiddenByObject, DisplayName: testCharArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testCharArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionEqualsExcludeFields, DisplayName: testReflectionEqualsExcludeFields(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionEqualsExcludeFields
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiFloatArray, DisplayName: testMultiFloatArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiFloatArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMixedArray, DisplayName: testMixedArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMixedArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBoolean, DisplayName: testBoolean(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBoolean
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiIntArray, DisplayName: testMultiIntArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBooleanArray, DisplayName: testBooleanArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBooleanArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBooleanArrayHiddenByObject, DisplayName: testBooleanArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testBooleanArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testIntArrayHiddenByObject, DisplayName: testIntArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testIntArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testUnrelatedClasses, DisplayName: testUnrelatedClasses(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testUnrelatedClasses
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLongArray, DisplayName: testLongArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShortArray, DisplayName: testShortArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testNpeForNullElement, DisplayName: testNpeForNullElement(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testNpeForNullElement
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiLongArray, DisplayName: testMultiLongArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiLongArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloatArrayHiddenByObject, DisplayName: testFloatArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testFloatArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testIntArray, DisplayName: testIntArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testIntArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDouble, DisplayName: testDouble(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDouble
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionHierarchyEquals, DisplayName: testReflectionHierarchyEquals(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testReflectionHierarchyEquals
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDoubleArrayHiddenByObject, DisplayName: testDoubleArrayHiddenByObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDoubleArrayHiddenByObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObject, DisplayName: testObject(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testObject
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiDoubleArray, DisplayName: testMultiDoubleArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiDoubleArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiShortArray, DisplayName: testMultiShortArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testMultiShortArray
* Started : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDoubleArray, DisplayName: testDoubleArray(org.apache.commons.lang3.builder.EqualsBuilderTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.EqualsBuilderTest, MethodName: testDoubleArray
Number of testcases executed : 47
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.ValidateTest
Number of testcases to execute : 52
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringWithNewlinesShouldNotThrow, DisplayName: testNotBlankNotBlankStringWithNewlinesShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringWithNewlinesShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotNull1, DisplayName: testNotNull1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotNull1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotNull2, DisplayName: testNotNull2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotNull2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNullStringShouldThrow, DisplayName: testNotBlankNullStringShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNullStringShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgEmptyStringShouldThrow, DisplayName: testNotBlankMsgEmptyStringShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgEmptyStringShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_array, DisplayName: testValidIndex_array(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_array
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgBlankStringShouldThrow, DisplayName: testNotBlankMsgBlankStringShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgBlankStringShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_charSequence, DisplayName: testValidIndex_charSequence(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_charSequence
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_collection, DisplayName: testValidIndex_withMessage_collection(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_collection
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankReturnValues1, DisplayName: testNotBlankReturnValues1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankReturnValues1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankReturnValues2, DisplayName: testNotBlankReturnValues2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankReturnValues2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testInclusiveBetween_withMessage, DisplayName: testInclusiveBetween_withMessage(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testInclusiveBetween_withMessage
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testMatchesPattern, DisplayName: testMatchesPattern(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testMatchesPattern
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyMap1, DisplayName: testNotEmptyMap1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyMap1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyMap2, DisplayName: testNotEmptyMap2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyMap2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsInstanceOf, DisplayName: testIsInstanceOf(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsInstanceOf
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_charSequence, DisplayName: testValidIndex_withMessage_charSequence(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_charSequence
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankBlankStringWithNewlinesShouldThrow, DisplayName: testNotBlankBlankStringWithNewlinesShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankBlankStringWithNewlinesShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow, DisplayName: testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringShouldNotThrow, DisplayName: testNotBlankNotBlankStringShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsAssignable, DisplayName: testIsAssignable(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsAssignable
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringShouldNotThrow, DisplayName: testNotBlankMsgNotBlankStringShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_array, DisplayName: testValidIndex_withMessage_array(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_withMessage_array
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsCollection1, DisplayName: testNoNullElementsCollection1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsCollection1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsCollection2, DisplayName: testNoNullElementsCollection2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsCollection2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testExclusiveBetween, DisplayName: testExclusiveBetween(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testExclusiveBetween
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testInclusiveBetween, DisplayName: testInclusiveBetween(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testInclusiveBetween
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankEmptyStringShouldThrow, DisplayName: testNotBlankEmptyStringShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankEmptyStringShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNullStringShouldThrow, DisplayName: testNotBlankMsgNullStringShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNullStringShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow, DisplayName: testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsAssignable_withMessage, DisplayName: testIsAssignable_withMessage(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsAssignable_withMessage
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyString1, DisplayName: testNotEmptyString1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyString1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyString2, DisplayName: testNotEmptyString2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyString2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyCollection1, DisplayName: testNotEmptyCollection1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyCollection1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyCollection2, DisplayName: testNotEmptyCollection2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyCollection2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgBlankStringWithWhitespacesShouldThrow, DisplayName: testNotBlankMsgBlankStringWithWhitespacesShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankMsgBlankStringWithWhitespacesShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyArray1, DisplayName: testNotEmptyArray1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyArray1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyArray2, DisplayName: testNotEmptyArray2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotEmptyArray2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_collection, DisplayName: testValidIndex_collection(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testValidIndex_collection
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testMatchesPattern_withMessage, DisplayName: testMatchesPattern_withMessage(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testMatchesPattern_withMessage
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringWithWhitespacesShouldNotThrow, DisplayName: testNotBlankNotBlankStringWithWhitespacesShouldNotThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankNotBlankStringWithWhitespacesShouldNotThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue1, DisplayName: testIsTrue1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue2, DisplayName: testIsTrue2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue2
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue3, DisplayName: testIsTrue3(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue3
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue4, DisplayName: testIsTrue4(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue4
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue5, DisplayName: testIsTrue5(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsTrue5
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testExclusiveBetween_withMessage, DisplayName: testExclusiveBetween_withMessage(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testExclusiveBetween_withMessage
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankBlankStringWithWhitespacesShouldThrow, DisplayName: testNotBlankBlankStringWithWhitespacesShouldThrow(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNotBlankBlankStringWithWhitespacesShouldThrow
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsInstanceOf_withMessage, DisplayName: testIsInstanceOf_withMessage(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testIsInstanceOf_withMessage
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsArray1, DisplayName: testNoNullElementsArray1(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsArray1
* Started : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsArray2, DisplayName: testNoNullElementsArray2(org.apache.commons.lang3.ValidateTest)
* Finished : ClasseName: org.apache.commons.lang3.ValidateTest, MethodName: testNoNullElementsArray2
Number of testcases executed : 52
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrLookupTest
Number of testcases to execute : 4
* Started : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testSystemProperiesLookup, DisplayName: testSystemProperiesLookup(org.apache.commons.lang3.text.StrLookupTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testSystemProperiesLookup
* Started : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testNoneLookup, DisplayName: testNoneLookup(org.apache.commons.lang3.text.StrLookupTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testNoneLookup
* Started : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testMapLookup_nullMap, DisplayName: testMapLookup_nullMap(org.apache.commons.lang3.text.StrLookupTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testMapLookup_nullMap
* Started : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testMapLookup, DisplayName: testMapLookup(org.apache.commons.lang3.text.StrLookupTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrLookupTest, MethodName: testMapLookup
Number of testcases executed : 4
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.DateFormatUtilsTest
Number of testcases to execute : 9
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormatUTC, DisplayName: testFormatUTC(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormatUTC
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testTimeISO, DisplayName: testTimeISO(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testTimeISO
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormatCalendar, DisplayName: testFormatCalendar(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormatCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testSMTP, DisplayName: testSMTP(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testSMTP
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testDateTimeISO, DisplayName: testDateTimeISO(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testDateTimeISO
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testTimeNoTISO, DisplayName: testTimeNoTISO(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testTimeNoTISO
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testDateISO, DisplayName: testDateISO(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testDateISO
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormat, DisplayName: testFormat(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testFormat
* Started : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.time.DateFormatUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateFormatUtilsTest, MethodName: testConstructor
Number of testcases executed : 9
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.UnicodeEscaperTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testAbove, DisplayName: testAbove(org.apache.commons.lang3.text.translate.UnicodeEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testAbove
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testBelow, DisplayName: testBelow(org.apache.commons.lang3.text.translate.UnicodeEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testBelow
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testBetween, DisplayName: testBetween(org.apache.commons.lang3.text.translate.UnicodeEscaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeEscaperTest, MethodName: testBetween
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableIntTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testToInteger, DisplayName: testToInteger(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testToInteger
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableIntTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableIntTest, MethodName: testAddValueObject
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.LocaleUtilsTest
Number of testcases to execute : 12
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testAvailableLocaleSet, DisplayName: testAvailableLocaleSet(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testAvailableLocaleSet
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testIsAvailableLocale, DisplayName: testIsAvailableLocale(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testIsAvailableLocale
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testAvailableLocaleList, DisplayName: testAvailableLocaleList(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testAvailableLocaleList
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLang328, DisplayName: testLang328(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLang328
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testCountriesByLanguage, DisplayName: testCountriesByLanguage(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testCountriesByLanguage
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLocaleLookupList_LocaleLocale, DisplayName: testLocaleLookupList_LocaleLocale(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLocaleLookupList_LocaleLocale
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLanguagesByCountry, DisplayName: testLanguagesByCountry(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLanguagesByCountry
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_1Part, DisplayName: testToLocale_1Part(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_1Part
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_2Part, DisplayName: testToLocale_2Part(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_2Part
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_3Part, DisplayName: testToLocale_3Part(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testToLocale_3Part
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLocaleLookupList_Locale, DisplayName: testLocaleLookupList_Locale(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testLocaleLookupList_Locale
* Started : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.LocaleUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.LocaleUtilsTest, MethodName: testConstructor
Number of testcases executed : 12
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest
Number of testcases to execute : 3
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testUPlus, DisplayName: testUPlus(org.apache.commons.lang3.text.translate.UnicodeUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testUPlus
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testUuuuu, DisplayName: testUuuuu(org.apache.commons.lang3.text.translate.UnicodeUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testUuuuu
* Started : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testLessThanFour, DisplayName: testLessThanFour(org.apache.commons.lang3.text.translate.UnicodeUnescaperTest)
* Finished : ClasseName: org.apache.commons.lang3.text.translate.UnicodeUnescaperTest, MethodName: testLessThanFour
Number of testcases executed : 3
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.text.StrMatcherTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSingleQuoteMatcher, DisplayName: testSingleQuoteMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSingleQuoteMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testTrimMatcher, DisplayName: testTrimMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testTrimMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCommaMatcher, DisplayName: testCommaMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCommaMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharMatcher_char, DisplayName: testCharMatcher_char(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharMatcher_char
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharSetMatcher_String, DisplayName: testCharSetMatcher_String(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharSetMatcher_String
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testNoneMatcher, DisplayName: testNoneMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testNoneMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testTabMatcher, DisplayName: testTabMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testTabMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testMatcherIndices, DisplayName: testMatcherIndices(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testMatcherIndices
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testStringMatcher_String, DisplayName: testStringMatcher_String(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testStringMatcher_String
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSpaceMatcher, DisplayName: testSpaceMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSpaceMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testQuoteMatcher, DisplayName: testQuoteMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testQuoteMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSplitMatcher, DisplayName: testSplitMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testSplitMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testDoubleQuoteMatcher, DisplayName: testDoubleQuoteMatcher(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testDoubleQuoteMatcher
* Started : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharSetMatcher_charArray, DisplayName: testCharSetMatcher_charArray(org.apache.commons.lang3.text.StrMatcherTest)
* Finished : ClasseName: org.apache.commons.lang3.text.StrMatcherTest, MethodName: testCharSetMatcher_charArray
Number of testcases executed : 14
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.JavaVersionTest
Number of testcases to execute : 2
* Started : ClasseName: org.apache.commons.lang3.JavaVersionTest, MethodName: testAtLeast, DisplayName: testAtLeast(org.apache.commons.lang3.JavaVersionTest)
* Finished : ClasseName: org.apache.commons.lang3.JavaVersionTest, MethodName: testAtLeast
* Started : ClasseName: org.apache.commons.lang3.JavaVersionTest, MethodName: testGetJavaVersion, DisplayName: testGetJavaVersion(org.apache.commons.lang3.JavaVersionTest)
* Finished : ClasseName: org.apache.commons.lang3.JavaVersionTest, MethodName: testGetJavaVersion
Number of testcases executed : 2
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.BackgroundInitializerTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetCheckedException, DisplayName: testGetCheckedException(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetCheckedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorExternal, DisplayName: testGetActiveExecutorExternal(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorExternal
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetRuntimeException, DisplayName: testGetRuntimeException(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetRuntimeException
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedFalse, DisplayName: testIsStartedFalse(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedFalse
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedTrue, DisplayName: testIsStartedTrue(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedTrue
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorTemp, DisplayName: testGetActiveExecutorTemp(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorTemp
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testSetExternalExecutorAfterStart, DisplayName: testSetExternalExecutorAfterStart(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testSetExternalExecutorAfterStart
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testInitialize, DisplayName: testInitialize(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testInitialize
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedAfterGet, DisplayName: testIsStartedAfterGet(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testIsStartedAfterGet
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorBeforeStart, DisplayName: testGetActiveExecutorBeforeStart(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetActiveExecutorBeforeStart
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetBeforeStart, DisplayName: testGetBeforeStart(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetBeforeStart
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testStartMultipleTimes, DisplayName: testStartMultipleTimes(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testStartMultipleTimes
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testInitializeTempExecutor, DisplayName: testInitializeTempExecutor(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testInitializeTempExecutor
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetInterruptedException, DisplayName: testGetInterruptedException(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testGetInterruptedException
* Started : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testSetExternalExecutor, DisplayName: testSetExternalExecutor(org.apache.commons.lang3.concurrent.BackgroundInitializerTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.BackgroundInitializerTest, MethodName: testSetExternalExecutor
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableDoubleTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testToDouble, DisplayName: testToDouble(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testToDouble
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testNanInfinite, DisplayName: testNanInfinite(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testNanInfinite
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableDoubleTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableDoubleTest, MethodName: testAddValueObject
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsStartsEndsWithTest
Number of testcases to execute : 5
* Started : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWithIgnoreCase, DisplayName: testEndsWithIgnoreCase(org.apache.commons.lang3.StringUtilsStartsEndsWithTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWithIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWith, DisplayName: testEndsWith(org.apache.commons.lang3.StringUtilsStartsEndsWithTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWith
* Started : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWithAny, DisplayName: testEndsWithAny(org.apache.commons.lang3.StringUtilsStartsEndsWithTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testEndsWithAny
* Started : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testStartsWithIgnoreCase, DisplayName: testStartsWithIgnoreCase(org.apache.commons.lang3.StringUtilsStartsEndsWithTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testStartsWithIgnoreCase
* Started : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testStartsWith, DisplayName: testStartsWith(org.apache.commons.lang3.StringUtilsStartsEndsWithTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsStartsEndsWithTest, MethodName: testStartsWith
Number of testcases executed : 5
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedException, DisplayName: testContextedException(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedException
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testNullExceptionPassing, DisplayName: testNullExceptionPassing(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testNullExceptionPassing
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testAddValue, DisplayName: testAddValue(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testAddValue
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionThrowable, DisplayName: testContextedExceptionThrowable(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionThrowable
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionStringThrowableContext, DisplayName: testContextedExceptionStringThrowableContext(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionStringThrowableContext
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionString, DisplayName: testContextedExceptionString(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionString
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testReplaceValue, DisplayName: testReplaceValue(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testReplaceValue
* Started : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionStringThrowable, DisplayName: testContextedExceptionStringThrowable(org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest)
* Finished : ClasseName: org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest, MethodName: testContextedExceptionStringThrowable
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.math.FractionTest
Number of testcases to execute : 25
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testConversions, DisplayName: testConversions(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testConversions
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testReducedFactory_int_int, DisplayName: testReducedFactory_int_int(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testReducedFactory_int_int
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testAbs, DisplayName: testAbs(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testAbs
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testAdd, DisplayName: testAdd(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testAdd
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testPow, DisplayName: testPow(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testPow
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testSubtract, DisplayName: testSubtract(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testSubtract
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testGets, DisplayName: testGets(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testGets
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String, DisplayName: testFactory_String(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_int_int_int, DisplayName: testFactory_int_int_int(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_int_int_int
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_double, DisplayName: testFactory_double(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_double
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_improper, DisplayName: testFactory_String_improper(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_improper
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testConstants, DisplayName: testConstants(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testConstants
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testToProperString, DisplayName: testToProperString(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testToProperString
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_double, DisplayName: testFactory_String_double(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_double
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testDivide, DisplayName: testDivide(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testDivide
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testMultiply, DisplayName: testMultiply(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testMultiply
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testInvert, DisplayName: testInvert(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testInvert
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_proper, DisplayName: testFactory_String_proper(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_String_proper
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testNegate, DisplayName: testNegate(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testNegate
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testReduce, DisplayName: testReduce(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testReduce
* Started : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_int_int, DisplayName: testFactory_int_int(org.apache.commons.lang3.math.FractionTest)
* Finished : ClasseName: org.apache.commons.lang3.math.FractionTest, MethodName: testFactory_int_int
Number of testcases executed : 25
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.time.DateUtilsTest
Number of testcases to execute : 33
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testParseDateWithLeniency, DisplayName: testParseDateWithLeniency(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testParseDateWithLeniency
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMinutes, DisplayName: testAddMinutes(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMinutes
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testMonthIterator, DisplayName: testMonthIterator(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testMonthIterator
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testRoundLang346, DisplayName: testRoundLang346(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testRoundLang346
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMilliseconds, DisplayName: testSetMilliseconds(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMilliseconds
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testTruncate, DisplayName: testTruncate(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testTruncate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameLocalTime_Cal, DisplayName: testIsSameLocalTime_Cal(org.apache.commons.lang3.time.DateUtilsTest)
Message : LANG-677
Trace : junit.framework.AssertionFailedError: LANG-677
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertFalse(Assert.java:39)
	at junit.framework.TestCase.assertFalse(TestCase.java:210)
	at org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal(DateUtilsTest.java:237)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.gzoltar.core.instr.testing.junit.JUnitRunner.run(JUnitRunner.java:47)
	at com.gzoltar.core.instr.Runner.main(Runner.java:46)

MethodName: testIsSameLocalTime_Cal
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameLocalTime_Cal
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddDays, DisplayName: testAddDays(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddDays
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testRound, DisplayName: testRound(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testRound
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testParseDate, DisplayName: testParseDate(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testParseDate
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testCeil, DisplayName: testCeil(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testCeil
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddSeconds, DisplayName: testAddSeconds(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddSeconds
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMinutes, DisplayName: testSetMinutes(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMinutes
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testToCalendar, DisplayName: testToCalendar(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testToCalendar
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddHours, DisplayName: testAddHours(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddHours
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddWeeks, DisplayName: testAddWeeks(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddWeeks
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddYears, DisplayName: testAddYears(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddYears
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testTruncateLang59, DisplayName: testTruncateLang59(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testTruncateLang59
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameInstant_Date, DisplayName: testIsSameInstant_Date(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameInstant_Date
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testLang530, DisplayName: testLang530(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testLang530
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetSeconds, DisplayName: testSetSeconds(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetSeconds
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameInstant_Cal, DisplayName: testIsSameInstant_Cal(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameInstant_Cal
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMonths, DisplayName: testAddMonths(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMonths
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testWeekIterator, DisplayName: testWeekIterator(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testWeekIterator
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMonths, DisplayName: testSetMonths(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetMonths
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetDays, DisplayName: testSetDays(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetDays
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameDay_Date, DisplayName: testIsSameDay_Date(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameDay_Date
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameDay_Cal, DisplayName: testIsSameDay_Cal(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIsSameDay_Cal
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIteratorEx, DisplayName: testIteratorEx(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testIteratorEx
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMilliseconds, DisplayName: testAddMilliseconds(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testAddMilliseconds
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testConstructor, DisplayName: testConstructor(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testConstructor
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetHours, DisplayName: testSetHours(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetHours
* Started : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetYears, DisplayName: testSetYears(org.apache.commons.lang3.time.DateUtilsTest)
* Finished : ClasseName: org.apache.commons.lang3.time.DateUtilsTest, MethodName: testSetYears
Number of testcases executed : 33
TestResult: 1
 Run JUnit Test: org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest
 Run JUnit Test: org.apache.commons.lang3.PairTest
Number of testcases to execute : 6
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testSerialization, DisplayName: testSerialization(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testSerialization
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testBasic, DisplayName: testBasic(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testBasic
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testPairOf, DisplayName: testPairOf(org.apache.commons.lang3.PairTest)
* Finished : ClasseName: org.apache.commons.lang3.PairTest, MethodName: testPairOf
Number of testcases executed : 6
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.concurrent.TimedSemaphoreTest
Number of testcases to execute : 15
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testPassAfterShutdown, DisplayName: testPassAfterShutdown(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testPassAfterShutdown
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireMultipleThreads, DisplayName: testAcquireMultipleThreads(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireMultipleThreads
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInitInvalidPeriod, DisplayName: testInitInvalidPeriod(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInitInvalidPeriod
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireMultiplePeriods, DisplayName: testAcquireMultiplePeriods(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireMultiplePeriods
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testGetAverageCallsPerPeriod, DisplayName: testGetAverageCallsPerPeriod(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testGetAverageCallsPerPeriod
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInit, DisplayName: testInit(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInit
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInitDefaultService, DisplayName: testInitDefaultService(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testInitDefaultService
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownOwnExecutor, DisplayName: testShutdownOwnExecutor(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownOwnExecutor
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownSharedExecutorTask, DisplayName: testShutdownSharedExecutorTask(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownSharedExecutorTask
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownMultipleTimes, DisplayName: testShutdownMultipleTimes(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownMultipleTimes
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireNoLimit, DisplayName: testAcquireNoLimit(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireNoLimit
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownSharedExecutorNoTask, DisplayName: testShutdownSharedExecutorNoTask(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testShutdownSharedExecutorNoTask
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireLimit, DisplayName: testAcquireLimit(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testAcquireLimit
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testStartTimer, DisplayName: testStartTimer(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testStartTimer
* Started : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testGetAvailablePermits, DisplayName: testGetAvailablePermits(org.apache.commons.lang3.concurrent.TimedSemaphoreTest)
* Finished : ClasseName: org.apache.commons.lang3.concurrent.TimedSemaphoreTest, MethodName: testGetAvailablePermits
Number of testcases executed : 15
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.StringUtilsIsTest
Number of testcases to execute : 8
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsNumeric, DisplayName: testIsNumeric(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsNumeric
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsWhitespace, DisplayName: testIsWhitespace(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsWhitespace
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphanumericSpace, DisplayName: testIsAlphanumericSpace(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphanumericSpace
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsNumericSpace, DisplayName: testIsNumericSpace(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsNumericSpace
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAsciiPrintable_String, DisplayName: testIsAsciiPrintable_String(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAsciiPrintable_String
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphanumeric, DisplayName: testIsAlphanumeric(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphanumeric
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlpha, DisplayName: testIsAlpha(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlpha
* Started : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphaspace, DisplayName: testIsAlphaspace(org.apache.commons.lang3.StringUtilsIsTest)
* Finished : ClasseName: org.apache.commons.lang3.StringUtilsIsTest, MethodName: testIsAlphaspace
Number of testcases executed : 8
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.RangeTest
Number of testcases to execute : 16
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testIsWithCompare, DisplayName: testIsWithCompare(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testIsWithCompare
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testSerializing, DisplayName: testSerializing(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testSerializing
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testRangeOfChars, DisplayName: testRangeOfChars(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testRangeOfChars
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testOverlapsRange, DisplayName: testOverlapsRange(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testOverlapsRange
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testEqualsObject, DisplayName: testEqualsObject(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testEqualsObject
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testBetweenWithCompare, DisplayName: testBetweenWithCompare(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testBetweenWithCompare
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testContainsRange, DisplayName: testContainsRange(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testContainsRange
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testContains, DisplayName: testContains(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testContains
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementAfter, DisplayName: testElementAfter(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementAfter
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementBefore, DisplayName: testElementBefore(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementBefore
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementCompareTo, DisplayName: testElementCompareTo(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testElementCompareTo
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testGetMaximum, DisplayName: testGetMaximum(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testGetMaximum
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testComparableConstructors, DisplayName: testComparableConstructors(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testComparableConstructors
* Started : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testGetMinimum, DisplayName: testGetMinimum(org.apache.commons.lang3.RangeTest)
* Finished : ClasseName: org.apache.commons.lang3.RangeTest, MethodName: testGetMinimum
Number of testcases executed : 16
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.builder.ToStringStyleTest
Number of testcases to execute : 12
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetContentEnd, DisplayName: testSetContentEnd(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetContentEnd
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSizeStartText, DisplayName: testSetSizeStartText(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSizeStartText
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetContentStart, DisplayName: testSetContentStart(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetContentStart
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetNullText, DisplayName: testSetNullText(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetNullText
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSizeEndText, DisplayName: testSetSizeEndText(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSizeEndText
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetFieldNameValueSeparator, DisplayName: testSetFieldNameValueSeparator(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetFieldNameValueSeparator
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArrayEnd, DisplayName: testSetArrayEnd(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArrayEnd
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSummaryObjectStartText, DisplayName: testSetSummaryObjectStartText(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSummaryObjectStartText
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetFieldSeparator, DisplayName: testSetFieldSeparator(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetFieldSeparator
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArraySeparator, DisplayName: testSetArraySeparator(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArraySeparator
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArrayStart, DisplayName: testSetArrayStart(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetArrayStart
* Started : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSummaryObjectEndText, DisplayName: testSetSummaryObjectEndText(org.apache.commons.lang3.builder.ToStringStyleTest)
* Finished : ClasseName: org.apache.commons.lang3.builder.ToStringStyleTest, MethodName: testSetSummaryObjectEndText
Number of testcases executed : 12
TestResult: 0
 Run JUnit Test: org.apache.commons.lang3.mutable.MutableByteTest
Number of testcases to execute : 14
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testToString, DisplayName: testToString(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testToString
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testConstructors, DisplayName: testConstructors(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testConstructors
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testCompareTo, DisplayName: testCompareTo(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testCompareTo
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testIncrement, DisplayName: testIncrement(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testIncrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testPrimitiveValues, DisplayName: testPrimitiveValues(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testPrimitiveValues
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testSubtractValuePrimitive, DisplayName: testSubtractValuePrimitive(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testSubtractValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testHashCode, DisplayName: testHashCode(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testHashCode
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testAddValuePrimitive, DisplayName: testAddValuePrimitive(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testAddValuePrimitive
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testSubtractValueObject, DisplayName: testSubtractValueObject(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testSubtractValueObject
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testDecrement, DisplayName: testDecrement(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testDecrement
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testEquals, DisplayName: testEquals(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testEquals
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testGetSet, DisplayName: testGetSet(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testGetSet
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testToByte, DisplayName: testToByte(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testToByte
* Started : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testAddValueObject, DisplayName: testAddValueObject(org.apache.commons.lang3.mutable.MutableByteTest)
* Finished : ClasseName: org.apache.commons.lang3.mutable.MutableByteTest, MethodName: testAddValueObject
Number of testcases executed : 14
TestResult: 0
<<< End subprocess output
org.apache.commons.lang3.RandomStringUtilsTest#testExceptions : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomStringUtilsHomog : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomAscii : true
org.apache.commons.lang3.RandomStringUtilsTest#testLang100 : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphaNumeric : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphabetic : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomNumeric : true
org.apache.commons.lang3.RandomStringUtilsTest#testRandomStringUtils : true
org.apache.commons.lang3.RandomStringUtilsTest#testConstructor : true
org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeWithDelimiters_String : true
org.apache.commons.lang3.text.WordUtilsTest#testUncapitalize_String : true
org.apache.commons.lang3.text.WordUtilsTest#testWrap_StringIntStringBoolean : true
org.apache.commons.lang3.text.WordUtilsTest#testCapitalize_String : true
org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeFully_String : true
org.apache.commons.lang3.text.WordUtilsTest#testWrap_StringInt : true
org.apache.commons.lang3.text.WordUtilsTest#testInitials_String_charArray : true
org.apache.commons.lang3.text.WordUtilsTest#testUncapitalizeWithDelimiters_String : true
org.apache.commons.lang3.text.WordUtilsTest#testInitials_String : true
org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeFullyWithDelimiters_String : true
org.apache.commons.lang3.text.WordUtilsTest#testSwapCase_String : true
org.apache.commons.lang3.text.WordUtilsTest#testConstructor : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripStart_StringString : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripAll : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testTrim : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripToNull_String : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testIsNotBlank : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testIsNotEmpty : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStrip_StringString : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripToEmpty_String : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testTrimToEmpty : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testTrimToNull : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripAccents : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStripEnd_StringString : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testIsBlank : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testIsEmpty : true
org.apache.commons.lang3.StringUtilsTrimEmptyTest#testStrip_String : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testDurationsByBruteForce : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriod : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testLowDurations : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testLexx : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationHMS : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationISO : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriodISO : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testEdgeDurations : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationPluralWords : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testBugzilla38401 : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDuration : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationWords : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testJiraLang281 : true
org.apache.commons.lang3.time.DurationFormatUtilsTest#testConstructor : true
org.apache.commons.lang3.StringUtilsTest#testJoin_IterableChar : true
org.apache.commons.lang3.StringUtilsTest#testRightPad_StringInt : true
org.apache.commons.lang3.StringUtilsTest#testDeleteWhitespace_String : true
org.apache.commons.lang3.StringUtilsTest#testRemove_String : true
org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayChar : true
org.apache.commons.lang3.StringUtilsTest#testDifferenceAt_StringString : true
org.apache.commons.lang3.StringUtilsTest#testSplitByCharacterType : true
org.apache.commons.lang3.StringUtilsTest#testLengthStringBuffer : true
org.apache.commons.lang3.StringUtilsTest#testNormalizeSpace : true
org.apache.commons.lang3.StringUtilsTest#testDifferenceAt_StringArray : true
org.apache.commons.lang3.StringUtilsTest#testRepeat_StringStringInt : true
org.apache.commons.lang3.StringUtilsTest#testOverlay_StringStringIntInt : true
org.apache.commons.lang3.StringUtilsTest#testConcat_Objects : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringString : true
org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayString : true
org.apache.commons.lang3.StringUtilsTest#testIsAllLowerCase : true
org.apache.commons.lang3.StringUtilsTest#testLANG666 : true
org.apache.commons.lang3.StringUtilsTest#testReverseDelimited_StringChar : true
org.apache.commons.lang3.StringUtilsTest#testChomp : true
org.apache.commons.lang3.StringUtilsTest#testEMPTY : true
org.apache.commons.lang3.StringUtilsTest#testChop : true
org.apache.commons.lang3.StringUtilsTest#testJoin_IterableString : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_CharBuffers : true
org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_StringString_StringStringInt : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringBuffers : true
org.apache.commons.lang3.StringUtilsTest#testRemoveStart : true
org.apache.commons.lang3.StringUtilsTest#testRemove_char : true
org.apache.commons.lang3.StringUtilsTest#testReplaceChars_StringCharChar : true
org.apache.commons.lang3.StringUtilsTest#testAbbreviateMiddle : true
org.apache.commons.lang3.StringUtilsTest#testStartsWithAny : true
org.apache.commons.lang3.StringUtilsTest#testIsAllUpperCase : true
org.apache.commons.lang3.StringUtilsTest#testRemoveEndIgnoreCase : true
org.apache.commons.lang3.StringUtilsTest#testCenter_StringIntChar : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringBuffers : true
org.apache.commons.lang3.StringUtilsTest#testReplaceChars_StringStringString : true
org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringIntString : true
org.apache.commons.lang3.StringUtilsTest#testLang623 : true
org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_StringChar : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringString : true
org.apache.commons.lang3.StringUtilsTest#testCenter_StringInt : true
org.apache.commons.lang3.StringUtilsTest#testLength_CharBuffer : true
org.apache.commons.lang3.StringUtilsTest#testGetCommonPrefix_StringArray : true
org.apache.commons.lang3.StringUtilsTest#testSplit_String : true
org.apache.commons.lang3.StringUtilsTest#testLengthString : true
org.apache.commons.lang3.StringUtilsTest#testDefault_String : true
org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringIntChar : true
org.apache.commons.lang3.StringUtilsTest#testRepeat_StringInt : true
org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringInt : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringBuilders : true
org.apache.commons.lang3.StringUtilsTest#testDefault_StringString : true
org.apache.commons.lang3.StringUtilsTest#testLengthStringBuilder : true
org.apache.commons.lang3.StringUtilsTest#testJoin_IteratorString : true
org.apache.commons.lang3.StringUtilsTest#testRightPad_StringIntChar : true
org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringString : true
org.apache.commons.lang3.StringUtilsTest#testJoin_Objectarray : true
org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringIntInt : true
org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringArrayStringArray : true
org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_String : true
org.apache.commons.lang3.StringUtilsTest#testReplaceOnce_StringStringString : true
org.apache.commons.lang3.StringUtilsTest#testJoin_IteratorChar : true
org.apache.commons.lang3.StringUtilsTest#testReverse_String : true
org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringString : true
org.apache.commons.lang3.StringUtilsTest#testSplitByWholeSeparatorPreserveAllTokens_StringStringInt : true
org.apache.commons.lang3.StringUtilsTest#testCaseFunctions : true
org.apache.commons.lang3.StringUtilsTest#testSplitByWholeString_StringStringBooleanInt : true
org.apache.commons.lang3.StringUtilsTest#testSplitByWholeString_StringStringBoolean : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringBuilders : true
org.apache.commons.lang3.StringUtilsTest#testDifference_StringString : true
org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringInt : true
org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_CharBuffers : true
org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringArrayStringArrayBoolean : true
org.apache.commons.lang3.StringUtilsTest#testSplit_StringChar : true
org.apache.commons.lang3.StringUtilsTest#testRightPad_StringIntString : true
org.apache.commons.lang3.StringUtilsTest#testSwapCase_String : true
org.apache.commons.lang3.StringUtilsTest#testRemoveStartIgnoreCase : true
org.apache.commons.lang3.StringUtilsTest#testSplit_StringString_StringStringInt : true
org.apache.commons.lang3.StringUtilsTest#testRemoveEnd : true
org.apache.commons.lang3.StringUtilsTest#testConcatWith_StringObjects : true
org.apache.commons.lang3.StringUtilsTest#testCenter_StringIntString : true
org.apache.commons.lang3.StringUtilsTest#testConstructor : true
org.apache.commons.lang3.StringUtilsTest#testSplitByCharacterTypeCamelCase : true
org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringStringInt : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.text.StrTokenizerTest#testCSVSimple : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicDelim1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicDelim2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicEmpty1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicEmpty2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray_char : true
org.apache.commons.lang3.text.StrTokenizerTest#testTSV : true
org.apache.commons.lang3.text.StrTokenizerTest#testIteration : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String_char_char : true
org.apache.commons.lang3.text.StrTokenizerTest#testReset : true
org.apache.commons.lang3.text.StrTokenizerTest#testReset_charArray : true
org.apache.commons.lang3.text.StrTokenizerTest#testToString : true
org.apache.commons.lang3.text.StrTokenizerTest#testTokenizeSubclassOutputChange : true
org.apache.commons.lang3.text.StrTokenizerTest#testListArray : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted3 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted4 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted5 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted6 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted7 : true
org.apache.commons.lang3.text.StrTokenizerTest#testCloneNotSupportedException : true
org.apache.commons.lang3.text.StrTokenizerTest#testReset_String : true
org.apache.commons.lang3.text.StrTokenizerTest#testTSVEmpty : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String : true
org.apache.commons.lang3.text.StrTokenizerTest#testCloneNull : true
org.apache.commons.lang3.text.StrTokenizerTest#test1 : true
org.apache.commons.lang3.text.StrTokenizerTest#test2 : true
org.apache.commons.lang3.text.StrTokenizerTest#test3 : true
org.apache.commons.lang3.text.StrTokenizerTest#test4 : true
org.apache.commons.lang3.text.StrTokenizerTest#test5 : true
org.apache.commons.lang3.text.StrTokenizerTest#test6 : true
org.apache.commons.lang3.text.StrTokenizerTest#test7 : true
org.apache.commons.lang3.text.StrTokenizerTest#test8 : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String_char : true
org.apache.commons.lang3.text.StrTokenizerTest#testTokenizeSubclassInputChange : true
org.apache.commons.lang3.text.StrTokenizerTest#testCSVEmpty : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray : true
org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray_char_char : true
org.apache.commons.lang3.text.StrTokenizerTest#testCSVSimpleNeedsTrim : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed3 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed4 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuotedTrimmed1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasic1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasic2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasic3 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasic4 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasic5 : true
org.apache.commons.lang3.text.StrTokenizerTest#testGetContent : true
org.apache.commons.lang3.text.StrTokenizerTest#testCloneReset : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicTrimmed1 : true
org.apache.commons.lang3.text.StrTokenizerTest#testBasicTrimmed2 : true
org.apache.commons.lang3.text.StrTokenizerTest#testChaining : true
org.apache.commons.lang3.BitFieldTest#testSetBoolean : true
org.apache.commons.lang3.BitFieldTest#testGetValue : true
org.apache.commons.lang3.BitFieldTest#testClearShort : true
org.apache.commons.lang3.BitFieldTest#testSet : true
org.apache.commons.lang3.BitFieldTest#testClear : true
org.apache.commons.lang3.BitFieldTest#testIsSet : true
org.apache.commons.lang3.BitFieldTest#testByte : true
org.apache.commons.lang3.BitFieldTest#testGetShortValue : true
org.apache.commons.lang3.BitFieldTest#testSetShortBoolean : true
org.apache.commons.lang3.BitFieldTest#testSetShortValue : true
org.apache.commons.lang3.BitFieldTest#testIsAllSet : true
org.apache.commons.lang3.BitFieldTest#testGetShortRawValue : true
org.apache.commons.lang3.BitFieldTest#testGetRawValue : true
org.apache.commons.lang3.BitFieldTest#testSetShort : true
org.apache.commons.lang3.BitFieldTest#testSetValue : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundMilliSecond : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundDayOfMonth : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundMinute : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundSecond : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundMonth : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateSemiMonth : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateMinute : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundSemiMonth : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateSecond : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundAmPm : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundDate : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundHour : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundYear : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateMilliSecond : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateHourOfDay : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateMonth : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testRoundHourOfDay : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateAmPm : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateDate : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateHour : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateYear : true
org.apache.commons.lang3.time.DateUtilsRoundingTest#testTruncateDayOfMonth : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.DefaultToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyCharObject : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_double_double : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyDoubleObject : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyInt : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_float : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_short : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyByte : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyChar : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyLong : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsDoubleTolerance : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_byte_byte : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_short_short : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfShortWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfDoubleWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testSameType : true
org.apache.commons.lang3.ArrayUtilsTest#testArrayCreation : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyObject : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseInt : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyString : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyShortObject : true
org.apache.commons.lang3.ArrayUtilsTest#testIsEmptyPrimitives : true
org.apache.commons.lang3.ArrayUtilsTest#testClone : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthInt : true
org.apache.commons.lang3.ArrayUtilsTest#testToMap : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOf : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsByte : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsChar : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsLong : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfLongWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_boolean : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfByte : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfChar : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfLong : true
org.apache.commons.lang3.ArrayUtilsTest#testToString : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfDoubleTolerance : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfByteWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_double : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayShort : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayInt : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfIntWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testArrayCreationWithDifferentTypes : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfDoubleWithStartIndexTolerance : true
org.apache.commons.lang3.ArrayUtilsTest#testArrayCreationWithGeneralReturnType : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsInt : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfDoubleWithStartIndexTolerance : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_double : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfInt : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayByte : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayLong : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrChar : true
org.apache.commons.lang3.ArrayUtilsTest#testIsNotEmptyPrimitives : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_byte : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_char : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_long : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_float_float : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyShort : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfLongWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsShort : true
org.apache.commons.lang3.ArrayUtilsTest#testIsNotEmptyObject : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_int : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfInt : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfFloatWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneByte : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneChar : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneLong : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfShort : true
org.apache.commons.lang3.ArrayUtilsTest#testIsEquals : true
org.apache.commons.lang3.ArrayUtilsTest#testEmptyArrayCreation : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfCharWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfByteWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testContains : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_int : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyFloatObject : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testIndirectArrayCreation : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_boolean : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_long_long : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfBooleanWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfByte : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfChar : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfLong : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyLongObject : true
org.apache.commons.lang3.ArrayUtilsTest#testReverse : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfDoubleTolerance : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_intNull : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_int_int : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseByte : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseChar : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseLong : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseShort : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfDouble : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfBooleanWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfFloatWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testSubarrayObject : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthShort : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfCharWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyIntObject : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_float : true
org.apache.commons.lang3.ArrayUtilsTest#testToObject_short : true
org.apache.commons.lang3.ArrayUtilsTest#testGetLength : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfDoubleWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthByte : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthChar : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthLong : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testLastIndexOfShort : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneFloat : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneShort : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_byte : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_char : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_long : true
org.apache.commons.lang3.ArrayUtilsTest#testIsEmptyObject : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOf : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfShortWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLength : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfIntWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testCloneInt : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyByteObject : true
org.apache.commons.lang3.ArrayUtilsTest#testSameLengthBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_char_char : true
org.apache.commons.lang3.ArrayUtilsTest#testIndirectEmptyArrayCreation : true
org.apache.commons.lang3.ArrayUtilsTest#testReverseBoolean : true
org.apache.commons.lang3.ArrayUtilsTest#testToPrimitive_boolean_boolean : true
org.apache.commons.lang3.ArrayUtilsTest#testNullToEmptyBooleanObject : true
org.apache.commons.lang3.ArrayUtilsTest#testConstructor : true
org.apache.commons.lang3.ArrayUtilsTest#testIndexOfWithStartIndex : true
org.apache.commons.lang3.ArrayUtilsTest#testContainsDouble : true
org.apache.commons.lang3.text.translate.EntityArraysTest#testConstructorExists : true
org.apache.commons.lang3.text.translate.EntityArraysTest#testISO8859_1_ESCAPE : true
org.apache.commons.lang3.text.translate.EntityArraysTest#testHTML40_EXTENDED_ESCAPE : true
org.apache.commons.lang3.CharUtilsTest#testIsAscii_char : true
org.apache.commons.lang3.CharUtilsTest#testToString_Character : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphanumeric_char : true
org.apache.commons.lang3.CharUtilsTest#testToChar_Character : true
org.apache.commons.lang3.CharUtilsTest#testToChar_String : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphaUpper_char : true
org.apache.commons.lang3.CharUtilsTest#testToIntValue_Character_int : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlpha_char : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiNumeric_char : true
org.apache.commons.lang3.CharUtilsTest#testToIntValue_Character : true
org.apache.commons.lang3.CharUtilsTest#testToChar_String_char : true
org.apache.commons.lang3.CharUtilsTest#testToString_char : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiPrintable_char : true
org.apache.commons.lang3.CharUtilsTest#testToIntValue_char_int : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiControl_char : true
org.apache.commons.lang3.CharUtilsTest#testToUnicodeEscaped_Character : true
org.apache.commons.lang3.CharUtilsTest#testToChar_Character_char : true
org.apache.commons.lang3.CharUtilsTest#testToCharacterObject_String : true
org.apache.commons.lang3.CharUtilsTest#testToUnicodeEscaped_char : true
org.apache.commons.lang3.CharUtilsTest#testToCharacterObject_char : true
org.apache.commons.lang3.CharUtilsTest#testToIntValue_char : true
org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphaLower_char : true
org.apache.commons.lang3.CharUtilsTest#testConstructor : true
org.apache.commons.lang3.concurrent.LazyInitializerTest#testGet : true
org.apache.commons.lang3.concurrent.LazyInitializerTest#testGetConcurrent : true
org.apache.commons.lang3.concurrent.LazyInitializerTest#testGetMultipleTimes : true
org.apache.commons.lang3.text.StrBuilderTest#testAsTokenizer : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_StrMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_StrMatcher_String : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_String : true
org.apache.commons.lang3.text.StrBuilderTest#testEndsWith : true
org.apache.commons.lang3.text.StrBuilderTest#testGetSetNullText : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOfLang294 : true
org.apache.commons.lang3.text.StrBuilderTest#testSubSequenceIntInt : true
org.apache.commons.lang3.text.StrBuilderTest#testGetChars : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_String : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_char : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryEndIndex : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_char_int : true
org.apache.commons.lang3.text.StrBuilderTest#testClear : true
org.apache.commons.lang3.text.StrBuilderTest#testSize : true
org.apache.commons.lang3.text.StrBuilderTest#testTrim : true
org.apache.commons.lang3.text.StrBuilderTest#testRightString : true
org.apache.commons.lang3.text.StrBuilderTest#testToString : true
org.apache.commons.lang3.text.StrBuilderTest#testConstructors : true
org.apache.commons.lang3.text.StrBuilderTest#testMinimizeCapacity : true
org.apache.commons.lang3.text.StrBuilderTest#testSubstringIntInt : true
org.apache.commons.lang3.text.StrBuilderTest#testLang412Left : true
org.apache.commons.lang3.text.StrBuilderTest#testContains_String : true
org.apache.commons.lang3.text.StrBuilderTest#testEqualsIgnoreCase : true
org.apache.commons.lang3.text.StrBuilderTest#testCapacityAndLength : true
org.apache.commons.lang3.text.StrBuilderTest#testAsReader : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_String_String : true
org.apache.commons.lang3.text.StrBuilderTest#testAsWriter : true
org.apache.commons.lang3.text.StrBuilderTest#testLang294 : true
org.apache.commons.lang3.text.StrBuilderTest#testLang295 : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_char_char : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_String_int : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteCharAt : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_String_String : true
org.apache.commons.lang3.text.StrBuilderTest#testContains_char : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteIntInt : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryCount : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_char_char : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_char : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_int_int_String : true
org.apache.commons.lang3.text.StrBuilderTest#testToCharArray : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_StrMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_StrMatcher_int : true
org.apache.commons.lang3.text.StrBuilderTest#testEnsureCapacity : true
org.apache.commons.lang3.text.StrBuilderTest#testLang412Right : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_String : true
org.apache.commons.lang3.text.StrBuilderTest#testMidString : true
org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_StrMatcher_String : true
org.apache.commons.lang3.text.StrBuilderTest#testCapacity : true
org.apache.commons.lang3.text.StrBuilderTest#testReverse : true
org.apache.commons.lang3.text.StrBuilderTest#testSetCharAt : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryStartIndex : true
org.apache.commons.lang3.text.StrBuilderTest#testHashCode : true
org.apache.commons.lang3.text.StrBuilderTest#testSubstringInt : true
org.apache.commons.lang3.text.StrBuilderTest#testSetLength : true
org.apache.commons.lang3.text.StrBuilderTest#testCharAt : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testEquals : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_char : true
org.apache.commons.lang3.text.StrBuilderTest#testLeftString : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_String_int : true
org.apache.commons.lang3.text.StrBuilderTest#testContains_StrMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testLength : true
org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryReplace : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_char : true
org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_StrMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testIsEmpty : true
org.apache.commons.lang3.text.StrBuilderTest#testToCharArrayIntInt : true
org.apache.commons.lang3.text.StrBuilderTest#testGetSetNewLineText : true
org.apache.commons.lang3.text.StrBuilderTest#testToStringBuffer : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_String : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_char_int : true
org.apache.commons.lang3.text.StrBuilderTest#testGetCharsIntIntCharArrayInt : true
org.apache.commons.lang3.text.StrBuilderTest#testStartsWith : true
org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_StrMatcher : true
org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_StrMatcher_int : true
org.apache.commons.lang3.text.StrBuilderTest#testChaining : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_oddDash : true
org.apache.commons.lang3.CharSetTest#testSerialization : true
org.apache.commons.lang3.CharSetTest#testClass : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_simple : true
org.apache.commons.lang3.CharSetTest#testEquals_Object : true
org.apache.commons.lang3.CharSetTest#testContains_Char : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_combo : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_oddCombinations : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_comboNegated : true
org.apache.commons.lang3.CharSetTest#testHashCode : true
org.apache.commons.lang3.CharSetTest#testGetInstance_Stringarray : true
org.apache.commons.lang3.CharSetTest#testConstructor_String_oddNegate : true
org.apache.commons.lang3.CharSetTest#testGetInstance : true
org.apache.commons.lang3.CharSetTest#testStatics : true
org.apache.commons.lang3.time.FastDateFormatTest#testSimpleDate : true
org.apache.commons.lang3.time.FastDateFormatTest#testShortDateStyleWithLocales : true
org.apache.commons.lang3.time.FastDateFormatTest#testMilleniumBug : true
org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance : true
org.apache.commons.lang3.time.FastDateFormatTest#testLowYearPadding : true
org.apache.commons.lang3.time.FastDateFormatTest#testLang303 : true
org.apache.commons.lang3.time.FastDateFormatTest#testLang538 : true
org.apache.commons.lang3.time.FastDateFormatTest#testLang645 : true
org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_TimeZone_Locale : true
org.apache.commons.lang3.time.FastDateFormatTest#test_changeDefault_Locale_DateInstance : true
org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String : true
org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_TimeZone : true
org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_Locale : true
org.apache.commons.lang3.time.FastDateFormatTest#testFormat : true
org.apache.commons.lang3.time.FastDateFormatTest#test_changeDefault_Locale_DateTimeInstance : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultInitializerNamesModify : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeRuntimeEx : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerNullInit : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerNullName : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeResultsIsSuccessfulTrue : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetExceptionUnknown : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeNested : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeTempExec : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeEx : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetInitializerUnknown : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeResultsIsSuccessfulFalse : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeNoChildren : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeChildWithExecutor : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeExternalExec : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerAfterStart : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetResultObjectUnknown : true
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultIsExceptionUnknown : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedException : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testNullExceptionPassing : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testAddValue : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionThrowable : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionStringThrowableContext : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionString : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testReplaceValue : true
org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionStringThrowable : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfHourWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfMonthWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfYearWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinuteFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfYearWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testDayOfYearFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfDayWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfDayWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinuteFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfSecondWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfMonthWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsofHourWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testNullDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfMonthWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfDayWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testDateFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfYearWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsofMinuteWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfYearWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsofMinuteWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfYearWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfMonthWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfSecondWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testInvalidFragmentWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testDayOfYearFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfMonthWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfYearWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfMonthWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfDayWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfDayWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfMonthWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfHourWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfYearWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHourOfDayFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsofHourWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testNullCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfDayWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfHourWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondsOfMonthWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testSecondFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfYearWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfMinuteWithCalender : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHourOfDayFragmentInLargerUnitWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testHoursOfDayWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testInvalidFragmentWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMinutesOfHourWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfMinuteWithDate : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testDateFragmentInLargerUnitWithCalendar : true
org.apache.commons.lang3.time.DateUtilsFragmentTest#testMillisecondsOfDayWithCalendar : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.StandardToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.CharSequenceUtilsTest#testSubSequence : true
org.apache.commons.lang3.CharSequenceUtilsTest#testConstructor : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testInvokeConstructor : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testGetAccessibleConstructorFromDescription : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testInvokeExactConstructor : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testGetAccessibleConstructor : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testGetMatchingAccessibleMethod : true
org.apache.commons.lang3.reflect.ConstructorUtilsTest#testConstructor : true
org.apache.commons.lang3.CharRangeTest#testContainsNullArg : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Reversed : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNot : true
org.apache.commons.lang3.CharRangeTest#testSerialization : true
org.apache.commons.lang3.CharRangeTest#testClass : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Same : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_is : true
org.apache.commons.lang3.CharRangeTest#testEquals_Object : true
org.apache.commons.lang3.CharRangeTest#testContains_Char : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Normal : true
org.apache.commons.lang3.CharRangeTest#testHashCode : true
org.apache.commons.lang3.CharRangeTest#testContains_Charrange : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Same : true
org.apache.commons.lang3.CharRangeTest#testIterator : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Normal : true
org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Reversed : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsFalse : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testGet : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testToString : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsTrue : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsWithOtherObjects : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testGetObject : true
org.apache.commons.lang3.concurrent.ConstantInitializerTest#testToStringNull : true
org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerWithNoAddMethod : true
org.apache.commons.lang3.event.EventUtilsTest#testAddEventListener : true
org.apache.commons.lang3.event.EventUtilsTest#testBindEventsToMethod : true
org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerWithPrivateAddMethod : true
org.apache.commons.lang3.event.EventUtilsTest#testBindFilteredEventsToMethod : true
org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerThrowsException : true
org.apache.commons.lang3.event.EventUtilsTest#testBindEventsToMethodWithEvent : true
org.apache.commons.lang3.event.EventUtilsTest#testConstructor : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testGetField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testAmbig : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedStaticFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredField : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedFieldForceAccess : true
org.apache.commons.lang3.reflect.FieldUtilsTest#testConstructor : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInDateTimeFormat : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEqualsHashcode : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testOverriddenBuiltinFormat : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInChoiceFormat : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEscapedQuote_LANG_477 : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testExtendedFormats : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testExtendedAndBuiltInFormats : true
org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInNumberFormat : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.MultiLineToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.mutable.MutableShortTest#testToShort : true
org.apache.commons.lang3.mutable.MutableShortTest#testToString : true
org.apache.commons.lang3.mutable.MutableShortTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableShortTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableShortTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableShortTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableShortTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableShortTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableShortTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableShortTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableShortTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableShortTest#testEquals : true
org.apache.commons.lang3.mutable.MutableShortTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableShortTest#testAddValueObject : true
org.apache.commons.lang3.ArrayUtilsAddTest#testJira567 : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayInt : true
org.apache.commons.lang3.ArrayUtilsAddTest#testLANG571 : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayToObjectArray : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectAtIndex : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayFloat : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayShort : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayByte : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayChar : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayLong : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayBoolean : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayDouble : true
org.apache.commons.lang3.ArrayUtilsAddTest#testAddObjectArrayObject : true
org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest#testIntegerWithTransients : true
org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest#testFixture : true
org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest#testFixtureWithTransients : true
org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest#testInteger : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseChecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedNullCause : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConstantFuture_Integer : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseChecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedUncheckedException : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentExceptionCauseError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedException : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentExceptionCauseNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseNullCause : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedUncheckedException : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedChecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConstantFuture_null : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitialize : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedChecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentRuntimeExceptionCauseUnchecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUnchecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentRuntimeExceptionCauseNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentRuntimeExceptionCauseError : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedException : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedNull : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConcurrentExceptionCauseUnchecked : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUncheckedEx : true
org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUncheckedNull : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.SimpleToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_nullInput : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringTrueFalse_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_int : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_emptyInput : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanDefaultIfNull_Boolean_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer : true
org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_boolean_int_int : true
org.apache.commons.lang3.BooleanUtilsTest#test_isNotFalse_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringYesNo_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer_Integer_Integer_Integer : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Integer_Integer_Integer : true
org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_Boolean_Integer_Integer_Integer : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String_String_String_String : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringOnOff_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_object_validInput_2items : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_object_validInput_3items : true
org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_isNotTrue_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_int_int_int : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_object_nullElementInput : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringTrueFalse_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_object_nullInput : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringYesNo_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_isFalse_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_int : true
org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_boolean_Integer_Integer : true
org.apache.commons.lang3.BooleanUtilsTest#test_isTrue_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_validInput_2items : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_validInput_3items : true
org.apache.commons.lang3.BooleanUtilsTest#testXor_object_emptyInput : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String_String_String : true
org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_Boolean_int_int_int : true
org.apache.commons.lang3.BooleanUtilsTest#test_negate_Boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toString_Boolean_String_String_String : true
org.apache.commons.lang3.BooleanUtilsTest#test_toStringOnOff_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_int_int_int : true
org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_boolean : true
org.apache.commons.lang3.BooleanUtilsTest#test_toString_boolean_String_String_String : true
org.apache.commons.lang3.BooleanUtilsTest#testConstructor : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEscaping : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSoloEscaping : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoPrefixSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testCyclicReplacement : true
org.apache.commons.lang3.text.StrSubstitutorTest#testSubstitutetDefaultProperties : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceToIdentical : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSimple : true
org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplacePrefixSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceRecursive : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoPefixNoSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorMapPrefixSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplace : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceUnknownKey : true
org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplaceSystemProperties : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariableRecursive : true
org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorNoArgs : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceAdjacentAtEnd : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNull : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSolo : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceChangedMap : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceWeirdPattens : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEmptyKeys : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoVariables : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceComplexEscaping : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariable : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplacePrefixNoSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testResolveVariable : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariableDisabled : true
org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetEscape : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceAdjacentAtStart : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEmpty : true
org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetPrefix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorMapFull : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceIncompletePefix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetSuffix : true
org.apache.commons.lang3.text.StrSubstitutorTest#testReplacePartialString_noReplace : true
org.apache.commons.lang3.CharEncodingTest#testMustBeSupportedJava1_3_1 : true
org.apache.commons.lang3.CharEncodingTest#testNotSupported : true
org.apache.commons.lang3.CharEncodingTest#testWorksOnJava1_1_8 : true
org.apache.commons.lang3.CharEncodingTest#testWorksOnJava1_2_2 : true
org.apache.commons.lang3.CharEncodingTest#testConstructor : true
org.apache.commons.lang3.CharSetUtilsTest#testSqueeze_StringString : true
org.apache.commons.lang3.CharSetUtilsTest#testDelete_StringString : true
org.apache.commons.lang3.CharSetUtilsTest#testKeep_StringString : true
org.apache.commons.lang3.CharSetUtilsTest#testDelete_StringStringarray : true
org.apache.commons.lang3.CharSetUtilsTest#testCount_StringStringarray : true
org.apache.commons.lang3.CharSetUtilsTest#testKeep_StringStringarray : true
org.apache.commons.lang3.CharSetUtilsTest#testCount_StringString : true
org.apache.commons.lang3.CharSetUtilsTest#testSqueeze_StringStringarray : true
org.apache.commons.lang3.CharSetUtilsTest#testConstructor : true
org.apache.commons.lang3.concurrent.AtomicInitializerTest#testGet : true
org.apache.commons.lang3.concurrent.AtomicInitializerTest#testGetConcurrent : true
org.apache.commons.lang3.concurrent.AtomicInitializerTest#testGetMultipleTimes : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeJava : true
org.apache.commons.lang3.StringEscapeUtilsTest#testStandaloneAmphersand : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeHtml4 : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtml : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeJava : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeJavaWithSlash : true
org.apache.commons.lang3.StringEscapeUtilsTest#testLang313 : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeEcmaScript : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeCsvString : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeCsvWriter : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtmlHighUnicode : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeHexCharsHtml : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeCsvString : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeCsvWriter : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtmlVersions : true
org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeUnknownEntity : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHiragana : true
org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeXml : true
org.apache.commons.lang3.StringEscapeUtilsTest#testConstructor : true
org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitNullCallable : true
org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitExecutorNullCallable : true
org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitialize : true
org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitExecutor : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoDaemonFlag : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadDaemonTrue : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoPriority : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoExHandler : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadDaemonFalse : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNamingPattern : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildWrappedFactoryNull : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuilderReset : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadExHandler : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadPriority : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoNamingPattern : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildUncaughtExceptionHandlerNull : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildNamingPatternNull : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuilderResetAfterBuild : true
org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildDefaults : true
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testAbove : true
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testBelow : true
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testBetween : true
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testSupplementary : true
org.apache.commons.lang3.text.translate.OctalUnescaperTest#testBetween : true
org.apache.commons.lang3.mutable.MutableObjectTest#testToString : true
org.apache.commons.lang3.mutable.MutableObjectTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableObjectTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableObjectTest#testEquals : true
org.apache.commons.lang3.mutable.MutableObjectTest#testGetSet : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testObjectArray : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testBlank : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testLong : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testLongArrayArray : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testLongArray : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testObject : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testPerson : true
org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest#testAppendSuper : true
org.apache.commons.lang3.mutable.MutableFloatTest#testToFloat : true
org.apache.commons.lang3.mutable.MutableFloatTest#testToString : true
org.apache.commons.lang3.mutable.MutableFloatTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableFloatTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableFloatTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableFloatTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableFloatTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableFloatTest#testNanInfinite : true
org.apache.commons.lang3.mutable.MutableFloatTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableFloatTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableFloatTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableFloatTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableFloatTest#testEquals : true
org.apache.commons.lang3.mutable.MutableFloatTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableFloatTest#testAddValueObject : true
org.apache.commons.lang3.EnumUtilsTest#test_getEnumMap : true
org.apache.commons.lang3.EnumUtilsTest#test_getEnum : true
org.apache.commons.lang3.EnumUtilsTest#test_isEnum : true
org.apache.commons.lang3.EnumUtilsTest#testConstructable : true
org.apache.commons.lang3.EnumUtilsTest#test_getEnumList : true
org.apache.commons.lang3.event.EventListenerSupportTest#testRemoveNullListener : true
org.apache.commons.lang3.event.EventListenerSupportTest#testRemoveListenerDuringEvent : true
org.apache.commons.lang3.event.EventListenerSupportTest#testSerialization : true
org.apache.commons.lang3.event.EventListenerSupportTest#testAddNullListener : true
org.apache.commons.lang3.event.EventListenerSupportTest#testGetListeners : true
org.apache.commons.lang3.event.EventListenerSupportTest#testCreateWithNonInterfaceParameter : true
org.apache.commons.lang3.event.EventListenerSupportTest#testEventDispatchOrder : true
org.apache.commons.lang3.event.EventListenerSupportTest#testCreateWithNullParameter : true
org.apache.commons.lang3.event.EventListenerSupportTest#testSubclassInvocationHandling : true
org.apache.commons.lang3.ObjectUtilsTest#testNotEqual : true
org.apache.commons.lang3.ObjectUtilsTest#testToString_Object : true
org.apache.commons.lang3.ObjectUtilsTest#testMax : true
org.apache.commons.lang3.ObjectUtilsTest#testMin : true
org.apache.commons.lang3.ObjectUtilsTest#testFirstNonNull : true
org.apache.commons.lang3.ObjectUtilsTest#testNull : true
org.apache.commons.lang3.ObjectUtilsTest#testCloneOfStringArray : true
org.apache.commons.lang3.ObjectUtilsTest#testIdentityToString : true
org.apache.commons.lang3.ObjectUtilsTest#testCloneOfPrimitiveArray : true
org.apache.commons.lang3.ObjectUtilsTest#testCloneOfCloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testPossibleCloneOfCloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testPossibleCloneOfUncloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testCloneOfNotCloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testToString_ObjectString : true
org.apache.commons.lang3.ObjectUtilsTest#testCloneOfUncloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testPossibleCloneOfNotCloneable : true
org.apache.commons.lang3.ObjectUtilsTest#testCompare : true
org.apache.commons.lang3.ObjectUtilsTest#testHashCode : true
org.apache.commons.lang3.ObjectUtilsTest#testEquals : true
org.apache.commons.lang3.ObjectUtilsTest#testIsNull : true
org.apache.commons.lang3.ObjectUtilsTest#testConstructor : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumDouble : true
org.apache.commons.lang3.math.NumberUtilsTest#testToFloatStringF : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumShort : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumber : true
org.apache.commons.lang3.math.NumberUtilsTest#testToLongString : true
org.apache.commons.lang3.math.NumberUtilsTest#testToIntStringI : true
org.apache.commons.lang3.math.NumberUtilsTest#testToIntString : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumInt : true
org.apache.commons.lang3.math.NumberUtilsTest#testToByteStringI : true
org.apache.commons.lang3.math.NumberUtilsTest#testToFloatString : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinShort : true
org.apache.commons.lang3.math.NumberUtilsTest#testToByteString : true
org.apache.commons.lang3.math.NumberUtilsTest#testLang300 : true
org.apache.commons.lang3.math.NumberUtilsTest#testLang381 : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxDouble : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumDouble : true
org.apache.commons.lang3.math.NumberUtilsTest#testIsDigits : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigDecimal : true
org.apache.commons.lang3.math.NumberUtilsTest#testConstants : true
org.apache.commons.lang3.math.NumberUtilsTest#testCompareDouble : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumByte : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinimumLong : true
org.apache.commons.lang3.math.NumberUtilsTest#testIsNumber : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinDouble : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxByte : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxLong : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigInteger : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateLong : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinByte : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinLong : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumInt : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumByte : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumLong : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxShort : true
org.apache.commons.lang3.math.NumberUtilsTest#testCompareFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaxInt : true
org.apache.commons.lang3.math.NumberUtilsTest#testMinInt : true
org.apache.commons.lang3.math.NumberUtilsTest#testStringToDoubleString : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumFloat : true
org.apache.commons.lang3.math.NumberUtilsTest#testMaximumShort : true
org.apache.commons.lang3.math.NumberUtilsTest#testToShortStringI : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateInteger : true
org.apache.commons.lang3.math.NumberUtilsTest#testToLongStringL : true
org.apache.commons.lang3.math.NumberUtilsTest#testStringToDoubleStringD : true
org.apache.commons.lang3.math.NumberUtilsTest#testToShortString : true
org.apache.commons.lang3.math.NumberUtilsTest#testConstructor : true
org.apache.commons.lang3.math.NumberUtilsTest#testCreateDouble : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testCharArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testObjectArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testObjectBuild : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testCharArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testFloatArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testInt : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testByteArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testFloat : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testShort : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testSuper : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testByte : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testChar : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testLong : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testFloatArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testIntArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHashCodeEx1 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHashCodeEx2 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHashCodeEx3 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testBoolean : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testBooleanArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testDoubleArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHierarchyHashCodeEx1 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHierarchyHashCodeEx2 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testConstructorEx1 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testConstructorEx2 : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionObjectCycle : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHierarchyHashCode : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testObjectArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testBooleanMultiArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testLongArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testShortArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testIntArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testDouble : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testToHashCodeEqualsHashCode : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHashCode : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testLongArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testByteArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testReflectionHashCodeExcludeFields : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testShortArrayAsObject : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testDoubleArray : true
org.apache.commons.lang3.builder.HashCodeBuilderTest#testBooleanArrayAsObject : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortClassName_Class : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable : true
org.apache.commons.lang3.ClassUtilsTest#testShowJavaBug : true
org.apache.commons.lang3.ClassUtilsTest#testToClass_object : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassByNormalNameArrays : true
org.apache.commons.lang3.ClassUtilsTest#testGetInnerClass : true
org.apache.commons.lang3.ClassUtilsTest#test_getAllSuperclasses_Class : true
org.apache.commons.lang3.ClassUtilsTest#testPrimitiveToWrapper : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageCanonicalName_Object : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_Widening : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageCanonicalName_String : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassWithArrayClasses : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageCanonicalName_Class : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortClassName_Object : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortClassName_String : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_NoAutoboxing : true
org.apache.commons.lang3.ClassUtilsTest#testWrapperToPrimitive : true
org.apache.commons.lang3.ClassUtilsTest#testWrappersToPrimitives : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_ClassArray_ClassArray_Autoboxing : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassWithArrayClasses2D : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageName_Object : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageName_String : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_ClassArray_ClassArray_NoAutoboxing : true
org.apache.commons.lang3.ClassUtilsTest#testWrapperToPrimitiveNull : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassByNormalNameArrays2D : true
org.apache.commons.lang3.ClassUtilsTest#testWithInterleavingWhitespace : true
org.apache.commons.lang3.ClassUtilsTest#test_getPackageName_Class : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortCanonicalName_Object : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortCanonicalName_String : true
org.apache.commons.lang3.ClassUtilsTest#test_getShortCanonicalName_Class : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_DefaultUnboxing_Widening : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassRawPrimitives : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassInvalidArguments : true
org.apache.commons.lang3.ClassUtilsTest#testPrimitivesToWrappers : true
org.apache.commons.lang3.ClassUtilsTest#testGetClassClassNotFound : true
org.apache.commons.lang3.ClassUtilsTest#testWrappersToPrimitivesNull : true
org.apache.commons.lang3.ClassUtilsTest#test_isInnerClass_Class : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_ClassArray_ClassArray : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_Unboxing_Widening : true
org.apache.commons.lang3.ClassUtilsTest#testWrappersToPrimitivesEmpty : true
org.apache.commons.lang3.ClassUtilsTest#testWrapperToPrimitiveNoWrapper : true
org.apache.commons.lang3.ClassUtilsTest#test_convertClassNamesToClasses_List : true
org.apache.commons.lang3.ClassUtilsTest#test_isAssignable_Autoboxing : true
org.apache.commons.lang3.ClassUtilsTest#test_convertClassesToClassNames_List : true
org.apache.commons.lang3.ClassUtilsTest#testGetPublicMethod : true
org.apache.commons.lang3.ClassUtilsTest#test_getAllInterfaces_Class : true
org.apache.commons.lang3.ClassUtilsTest#testConstructor : true
org.apache.commons.lang3.StringUtilsSubstringTest#testRight_String : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringBefore_StringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringsBetween_StringStringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringBetween_StringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringAfterLast_StringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringBetween_StringStringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstring_StringIntInt : true
org.apache.commons.lang3.StringUtilsSubstringTest#testCountMatches_String : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringBeforeLast_StringString : true
org.apache.commons.lang3.StringUtilsSubstringTest#testLeft_String : true
org.apache.commons.lang3.StringUtilsSubstringTest#testMid_String : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstring_StringInt : true
org.apache.commons.lang3.StringUtilsSubstringTest#testSubstringAfter_StringString : true
org.apache.commons.lang3.SystemUtilsTest#testJavaVersionMatches : true
org.apache.commons.lang3.SystemUtilsTest#testOSMatchesNameAndVersion : true
org.apache.commons.lang3.SystemUtilsTest#testIS_OS : true
org.apache.commons.lang3.SystemUtilsTest#testGetJavaIoTmpDir : true
org.apache.commons.lang3.SystemUtilsTest#testJavaAwtHeadless : true
org.apache.commons.lang3.SystemUtilsTest#testGetUserDir : true
org.apache.commons.lang3.SystemUtilsTest#testIS_JAVA : true
org.apache.commons.lang3.SystemUtilsTest#testGetJavaHome : true
org.apache.commons.lang3.SystemUtilsTest#testOSMatchesName : true
org.apache.commons.lang3.SystemUtilsTest#testGetUserHome : true
org.apache.commons.lang3.SystemUtilsTest#testConstructor : true
org.apache.commons.lang3.builder.ToStringBuilderTest#test_setUpToClass_valid : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testCharArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionHierarchyArrayList : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionNull : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testDoubleArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBoolean : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectBuild : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionHierarchy : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testSelfInstanceTwoVarsReflectionObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendToStringUsingMultiLineStyle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testShortArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testBooleanArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testFloatArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testInt : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testByteArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionLongArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testBlank : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testFloat : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testShort : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayArrayCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testByte : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testChar : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testLong : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionFloatArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testLongArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#test_setUpToClass_invalid : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testBoolean : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionDoubleArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBooleanArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionInteger : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testBooleanArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testFloatArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionyteArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionDoubleArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionIntArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testSimpleReflectionStatics : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionStatics : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionLongArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionhortArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx1 : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx2 : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx3 : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionObjectArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBooleanArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testLongArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testSimpleReflectionObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testShortArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testIntArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testInheritedReflectionStatics : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionByteArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayCycleLevel2 : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendToString : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayAndObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testSetDefaultEx : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testIntArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testDouble : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testByteArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionShortArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testCharArrayArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testSelfInstanceVarReflectionObjectCycle : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testObject : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendSuper : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionIntArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testGetSetDefault : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testInnerClassReflection : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharacter : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testDoubleArray : true
org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionFloatArrayArray : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testGetAccessibleInterfaceMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testGetAccessibleInterfaceMethodFromDescription : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testInvokeStaticMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testGetAccessiblePublicMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testGetMatchingAccessibleMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testInvokeExactMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testInvokeMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testInvokeExactStaticMethod : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testGetAccessiblePublicMethodFromDescription : true
org.apache.commons.lang3.reflect.MethodUtilsTest#testConstructor : true
org.apache.commons.lang3.mutable.MutableLongTest#testToString : true
org.apache.commons.lang3.mutable.MutableLongTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableLongTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableLongTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableLongTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableLongTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableLongTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableLongTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableLongTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableLongTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableLongTest#testEquals : true
org.apache.commons.lang3.mutable.MutableLongTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableLongTest#testToLong : true
org.apache.commons.lang3.mutable.MutableLongTest#testAddValueObject : true
org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest#testNumberOfInitializeInvocations : true
org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest#testGet : true
org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest#testGetConcurrent : true
org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest#testGetMultipleTimes : true
org.apache.commons.lang3.text.translate.LookupTranslatorTest#testBasicLookup : true
org.apache.commons.lang3.text.CompositeFormatTest#testUsage : true
org.apache.commons.lang3.text.CompositeFormatTest#testCompositeFormat : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testToString : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testEquals : true
org.apache.commons.lang3.mutable.MutableBooleanTest#testGetSet : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendWithSeparators_Collection : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testInsertWithNullText : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendFixedWidthPadRight_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_PrimitiveNumber : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_Boolean : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_Boolean : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_StrBuilder_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_CharArray_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendFixedWidthPadLeft : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_String_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendFixedWidthPadLeft_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendAll_Collection : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendNewLine : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_CharArray_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_StringBuffer : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendAll_Iterator : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_char_char : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testLang299 : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendWithSeparators_Iterator : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendWithNullText : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_StrBuilder : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_Object : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_StrBuilder : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_String : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_String : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_char_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_String_String : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendAll_Array : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_char : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_StringBuffer : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendWithSeparatorsWithNullText : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendSeparator_String_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_StringBuffer_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_Object : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_StringBuffer_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendPadding : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_String : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_String_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_PrimitiveNumber : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testInsert : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendFixedWidthPadRight : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_StrBuilder_int_int : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppend_CharArray : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendln_CharArray : true
org.apache.commons.lang3.text.StrBuilderAppendInsertTest#testAppendWithSeparators_Array : true
org.apache.commons.lang3.exception.DefaultExceptionContextTest#testGetValue : true
org.apache.commons.lang3.exception.DefaultExceptionContextTest#testGetLabelSet : true
org.apache.commons.lang3.exception.DefaultExceptionContextTest#testAddValue : true
org.apache.commons.lang3.exception.DefaultExceptionContextTest#testFormattedExceptionMessageNull : true
org.apache.commons.lang3.exception.DefaultExceptionContextTest#testReplaceValue : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testIndexOfType_ThrowableClass : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#test_getRootCauseMessage_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_null : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_nested : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_jdkNoCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_null : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_nested : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#test_getMessage_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_withCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetCause_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testRemoveCommonFrames_ListList : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testPrintRootCauseStackTrace_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testIndexOf_ThrowableClass : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testPrintRootCauseStackTrace_ThrowableStream : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_withoutCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testPrintRootCauseStackTrace_ThrowableWriter : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetRootCauseStackTrace_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableCount_Throwable : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetCause_ThrowableArray : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_withoutCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testIndexOf_ThrowableClassInt : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_recursiveCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testIndexOfType_ThrowableClassInt : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_recursiveCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowables_Throwable_jdkNoCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetThrowableList_Throwable_withCause : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testConstructor : true
org.apache.commons.lang3.exception.ExceptionUtilsTest#testGetRootCause_Throwable : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementObjectArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveDoubleArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveObjectArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementLongArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveFloatArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementBooleanArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveCharArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementFloatArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementIntArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveBooleanArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveByteArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementCharArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveNumberArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementByteArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveShortArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementDoubleArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveIntArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveLongArray : true
org.apache.commons.lang3.ArrayUtilsRemoveTest#testRemoveElementShortArray : true
org.apache.commons.lang3.time.StopWatchTest#testBadStates : true
org.apache.commons.lang3.time.StopWatchTest#testGetStartTime : true
org.apache.commons.lang3.time.StopWatchTest#testLang315 : true
org.apache.commons.lang3.time.StopWatchTest#testStopWatchSimpleGet : true
org.apache.commons.lang3.time.StopWatchTest#testStopWatchSimple : true
org.apache.commons.lang3.time.StopWatchTest#testStopWatchSplit : true
org.apache.commons.lang3.time.StopWatchTest#testStopWatchSuspend : true
org.apache.commons.lang3.AnnotationUtilsTest#testOneArgNull : true
org.apache.commons.lang3.AnnotationUtilsTest#testToString : true
org.apache.commons.lang3.AnnotationUtilsTest#testSameInstance : true
org.apache.commons.lang3.AnnotationUtilsTest#testEquivalence : true
org.apache.commons.lang3.AnnotationUtilsTest#testAnnotationsOfDifferingTypes : true
org.apache.commons.lang3.AnnotationUtilsTest#testHashCode : true
org.apache.commons.lang3.AnnotationUtilsTest#testGeneratedAnnotationEquivalentToRealAnnotation : true
org.apache.commons.lang3.AnnotationUtilsTest#testBothArgsNull : true
org.apache.commons.lang3.AnnotationUtilsTest#testNonEquivalentAnnotationsOfSameType : true
org.apache.commons.lang3.AnnotationUtilsTest#testIsValidAnnotationMemberType : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testCharArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectBuild : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testFloatArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionHierarchyCompareExcludeFields : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectComparatorNull : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionHierarchyCompare : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiCharArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testByteArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testInt : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testByteArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testRaggedArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testFloat : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testShort : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testByte : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testChar : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testLong : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionCompare : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testShortArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiByteArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiBooleanArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionCompareEx1 : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionCompareEx2 : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testLongArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectEx2 : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testCharArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiFloatArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMixedArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testBoolean : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiIntArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testBooleanArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testBooleanArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testIntArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testLongArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testReflectionHierarchyCompareTransients : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testShortArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiLongArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testFloatArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testIntArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObjectComparator : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testDouble : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testDoubleArrayHiddenByObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testObject : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiDoubleArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testAppendSuper : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testMultiShortArray : true
org.apache.commons.lang3.builder.CompareToBuilderTest#testDoubleArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOfIgnoreCase_StringInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringCharArrayWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_CharArrayWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContains_StringWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_StringWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsOnly_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOf_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringCharArrayWithBadSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testOrdinalIndexOf : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAnyBut_StringStringWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContains_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testEqualsIgnoreCase : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_CharArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfIgnoreCase_StringInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringWithBadSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastOrdinalIndexOf : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAny_StringString : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfIgnoreCase_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsIgnoreCase_StringString : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAnyBut_StringString : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContains_Char : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOf_char : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAny_StringCharArrayWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOf_charInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsIgnoreCase_LocaleIndependence : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringString : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAnyBut_StringCharArrayWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOf_charInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_StringWithBadSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAnyBut_StringCharArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOf_StringInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOf_StringInt : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAny_StringStringArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testEquals : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOf_char : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsOnly_CharArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsWhitespace : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAny_StringStringWithSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOfAny_StringStringArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsAny_StringCharArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testLastIndexOfIgnoreCase_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOf_String : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContainsNone_CharArrayWithBadSupplementaryChars : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testIndexOfAny_StringCharArray : true
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest#testContains_StringWithBadSupplementaryChars : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeEmptyCollection : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeArrayWithNull : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeArray : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeNullCollection : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeCollection : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeNullArray : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeEmptyArray : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExclude : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeCollectionWithNulls : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeArrayWithNulls : true
org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest#test_toStringExcludeCollectionWithNull : true
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest#testSupplementaryUnescaping : true
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest#testOutOfBounds : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testGetTypeArguments : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testIsInstance : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testIsAssignable : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testGetPrimitiveArrayComponentType : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testTypesSatisfyVariables : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testIsArrayTypeClasses : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testDetermineTypeVariableAssignments : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testGetRawType : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testGetArrayComponentType : true
org.apache.commons.lang3.reflect.TypeUtilsTest#testIsArrayGenericTypes : true
org.apache.commons.lang3.math.IEEE754rUtilsTest#testConstructorExists : true
org.apache.commons.lang3.math.IEEE754rUtilsTest#testLang381 : true
org.apache.commons.lang3.math.IEEE754rUtilsTest#testEnforceExceptions : true
org.apache.commons.lang3.SerializationUtilsTest#testException : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesBadStream : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamBadStream : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytesUnserializable : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamNullNull : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamNullObj : true
org.apache.commons.lang3.SerializationUtilsTest#testClone : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytesNull : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamObjNull : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeIOException : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytes : true
org.apache.commons.lang3.SerializationUtilsTest#testCloneNull : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeStream : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStream : true
org.apache.commons.lang3.SerializationUtilsTest#testCloneUnserializable : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamUnserializable : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamOfNull : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamClassNotFound : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesOfNull : true
org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytes : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesNull : true
org.apache.commons.lang3.SerializationUtilsTest#testConstructor : true
org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamNull : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testCharArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testObjectArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testObjectBuild : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testFloatArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiCharArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testByteArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testReflectionEquals : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testAccessors : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testInt : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testByteArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testRaggedArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testFloat : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testReset : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testShort : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testSuper : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testByte : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testChar : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testLong : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testCyclicalObjectReferences : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testObjectArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testShortArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiByteArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiBooleanArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testLongArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testCharArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testReflectionEqualsExcludeFields : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiFloatArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMixedArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testBoolean : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiIntArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testBooleanArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testBooleanArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testIntArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testUnrelatedClasses : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testLongArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testShortArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testNpeForNullElement : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiLongArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testFloatArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testIntArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testDouble : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testReflectionHierarchyEquals : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testDoubleArrayHiddenByObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testObject : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiDoubleArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testMultiShortArray : true
org.apache.commons.lang3.builder.EqualsBuilderTest#testDoubleArray : true
org.apache.commons.lang3.ValidateTest#testNotBlankNotBlankStringWithNewlinesShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testNotNull1 : true
org.apache.commons.lang3.ValidateTest#testNotNull2 : true
org.apache.commons.lang3.ValidateTest#testNotBlankNullStringShouldThrow : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgEmptyStringShouldThrow : true
org.apache.commons.lang3.ValidateTest#testValidIndex_array : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgBlankStringShouldThrow : true
org.apache.commons.lang3.ValidateTest#testValidIndex_charSequence : true
org.apache.commons.lang3.ValidateTest#testValidIndex_withMessage_collection : true
org.apache.commons.lang3.ValidateTest#testNotBlankReturnValues1 : true
org.apache.commons.lang3.ValidateTest#testNotBlankReturnValues2 : true
org.apache.commons.lang3.ValidateTest#testInclusiveBetween_withMessage : true
org.apache.commons.lang3.ValidateTest#testMatchesPattern : true
org.apache.commons.lang3.ValidateTest#testNotEmptyMap1 : true
org.apache.commons.lang3.ValidateTest#testNotEmptyMap2 : true
org.apache.commons.lang3.ValidateTest#testIsInstanceOf : true
org.apache.commons.lang3.ValidateTest#testValidIndex_withMessage_charSequence : true
org.apache.commons.lang3.ValidateTest#testNotBlankBlankStringWithNewlinesShouldThrow : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testNotBlankNotBlankStringShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testIsAssignable : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgNotBlankStringShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testValidIndex_withMessage_array : true
org.apache.commons.lang3.ValidateTest#testNoNullElementsCollection1 : true
org.apache.commons.lang3.ValidateTest#testNoNullElementsCollection2 : true
org.apache.commons.lang3.ValidateTest#testExclusiveBetween : true
org.apache.commons.lang3.ValidateTest#testInclusiveBetween : true
org.apache.commons.lang3.ValidateTest#testNotBlankEmptyStringShouldThrow : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgNullStringShouldThrow : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testIsAssignable_withMessage : true
org.apache.commons.lang3.ValidateTest#testNotEmptyString1 : true
org.apache.commons.lang3.ValidateTest#testNotEmptyString2 : true
org.apache.commons.lang3.ValidateTest#testNotEmptyCollection1 : true
org.apache.commons.lang3.ValidateTest#testNotEmptyCollection2 : true
org.apache.commons.lang3.ValidateTest#testNotBlankMsgBlankStringWithWhitespacesShouldThrow : true
org.apache.commons.lang3.ValidateTest#testNotEmptyArray1 : true
org.apache.commons.lang3.ValidateTest#testNotEmptyArray2 : true
org.apache.commons.lang3.ValidateTest#testValidIndex_collection : true
org.apache.commons.lang3.ValidateTest#testMatchesPattern_withMessage : true
org.apache.commons.lang3.ValidateTest#testNotBlankNotBlankStringWithWhitespacesShouldNotThrow : true
org.apache.commons.lang3.ValidateTest#testIsTrue1 : true
org.apache.commons.lang3.ValidateTest#testIsTrue2 : true
org.apache.commons.lang3.ValidateTest#testIsTrue3 : true
org.apache.commons.lang3.ValidateTest#testIsTrue4 : true
org.apache.commons.lang3.ValidateTest#testIsTrue5 : true
org.apache.commons.lang3.ValidateTest#testExclusiveBetween_withMessage : true
org.apache.commons.lang3.ValidateTest#testNotBlankBlankStringWithWhitespacesShouldThrow : true
org.apache.commons.lang3.ValidateTest#testConstructor : true
org.apache.commons.lang3.ValidateTest#testIsInstanceOf_withMessage : true
org.apache.commons.lang3.ValidateTest#testNoNullElementsArray1 : true
org.apache.commons.lang3.ValidateTest#testNoNullElementsArray2 : true
org.apache.commons.lang3.text.StrLookupTest#testSystemProperiesLookup : true
org.apache.commons.lang3.text.StrLookupTest#testNoneLookup : true
org.apache.commons.lang3.text.StrLookupTest#testMapLookup_nullMap : true
org.apache.commons.lang3.text.StrLookupTest#testMapLookup : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testFormatUTC : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testTimeISO : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testFormatCalendar : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testSMTP : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testDateTimeISO : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testTimeNoTISO : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testDateISO : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testFormat : true
org.apache.commons.lang3.time.DateFormatUtilsTest#testConstructor : true
org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testAbove : true
org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testBelow : true
org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testBetween : true
org.apache.commons.lang3.mutable.MutableIntTest#testToString : true
org.apache.commons.lang3.mutable.MutableIntTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableIntTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableIntTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableIntTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableIntTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableIntTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableIntTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableIntTest#testToInteger : true
org.apache.commons.lang3.mutable.MutableIntTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableIntTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableIntTest#testEquals : true
org.apache.commons.lang3.mutable.MutableIntTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableIntTest#testAddValueObject : true
org.apache.commons.lang3.LocaleUtilsTest#testAvailableLocaleSet : true
org.apache.commons.lang3.LocaleUtilsTest#testIsAvailableLocale : true
org.apache.commons.lang3.LocaleUtilsTest#testAvailableLocaleList : true
org.apache.commons.lang3.LocaleUtilsTest#testLang328 : true
org.apache.commons.lang3.LocaleUtilsTest#testCountriesByLanguage : true
org.apache.commons.lang3.LocaleUtilsTest#testLocaleLookupList_LocaleLocale : true
org.apache.commons.lang3.LocaleUtilsTest#testLanguagesByCountry : true
org.apache.commons.lang3.LocaleUtilsTest#testToLocale_1Part : true
org.apache.commons.lang3.LocaleUtilsTest#testToLocale_2Part : true
org.apache.commons.lang3.LocaleUtilsTest#testToLocale_3Part : true
org.apache.commons.lang3.LocaleUtilsTest#testLocaleLookupList_Locale : true
org.apache.commons.lang3.LocaleUtilsTest#testConstructor : true
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testUPlus : true
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testUuuuu : true
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testLessThanFour : true
org.apache.commons.lang3.text.StrMatcherTest#testSingleQuoteMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testTrimMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testCommaMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testCharMatcher_char : true
org.apache.commons.lang3.text.StrMatcherTest#testCharSetMatcher_String : true
org.apache.commons.lang3.text.StrMatcherTest#testNoneMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testTabMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testMatcherIndices : true
org.apache.commons.lang3.text.StrMatcherTest#testStringMatcher_String : true
org.apache.commons.lang3.text.StrMatcherTest#testSpaceMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testQuoteMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testSplitMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testDoubleQuoteMatcher : true
org.apache.commons.lang3.text.StrMatcherTest#testCharSetMatcher_charArray : true
org.apache.commons.lang3.JavaVersionTest#testAtLeast : true
org.apache.commons.lang3.JavaVersionTest#testGetJavaVersion : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetCheckedException : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorExternal : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetRuntimeException : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedFalse : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedTrue : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorTemp : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testSetExternalExecutorAfterStart : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testInitialize : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedAfterGet : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorBeforeStart : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetBeforeStart : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testStartMultipleTimes : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testInitializeTempExecutor : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetInterruptedException : true
org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testSetExternalExecutor : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testToDouble : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testToString : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testNanInfinite : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testEquals : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableDoubleTest#testAddValueObject : true
org.apache.commons.lang3.StringUtilsStartsEndsWithTest#testEndsWithIgnoreCase : true
org.apache.commons.lang3.StringUtilsStartsEndsWithTest#testEndsWith : true
org.apache.commons.lang3.StringUtilsStartsEndsWithTest#testEndsWithAny : true
org.apache.commons.lang3.StringUtilsStartsEndsWithTest#testStartsWithIgnoreCase : true
org.apache.commons.lang3.StringUtilsStartsEndsWithTest#testStartsWith : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedException : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testNullExceptionPassing : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testAddValue : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionThrowable : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionStringThrowableContext : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionString : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testReplaceValue : true
org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionStringThrowable : true
org.apache.commons.lang3.math.FractionTest#testConversions : true
org.apache.commons.lang3.math.FractionTest#testReducedFactory_int_int : true
org.apache.commons.lang3.math.FractionTest#testAbs : true
org.apache.commons.lang3.math.FractionTest#testAdd : true
org.apache.commons.lang3.math.FractionTest#testPow : true
org.apache.commons.lang3.math.FractionTest#testSubtract : true
org.apache.commons.lang3.math.FractionTest#testGets : true
org.apache.commons.lang3.math.FractionTest#testToString : true
org.apache.commons.lang3.math.FractionTest#testFactory_String : true
org.apache.commons.lang3.math.FractionTest#testFactory_int_int_int : true
org.apache.commons.lang3.math.FractionTest#testCompareTo : true
org.apache.commons.lang3.math.FractionTest#testFactory_double : true
org.apache.commons.lang3.math.FractionTest#testFactory_String_improper : true
org.apache.commons.lang3.math.FractionTest#testConstants : true
org.apache.commons.lang3.math.FractionTest#testToProperString : true
org.apache.commons.lang3.math.FractionTest#testHashCode : true
org.apache.commons.lang3.math.FractionTest#testFactory_String_double : true
org.apache.commons.lang3.math.FractionTest#testDivide : true
org.apache.commons.lang3.math.FractionTest#testEquals : true
org.apache.commons.lang3.math.FractionTest#testMultiply : true
org.apache.commons.lang3.math.FractionTest#testInvert : true
org.apache.commons.lang3.math.FractionTest#testFactory_String_proper : true
org.apache.commons.lang3.math.FractionTest#testNegate : true
org.apache.commons.lang3.math.FractionTest#testReduce : true
org.apache.commons.lang3.math.FractionTest#testFactory_int_int : true
org.apache.commons.lang3.time.DateUtilsTest#testParseDateWithLeniency : true
org.apache.commons.lang3.time.DateUtilsTest#testAddMinutes : true
org.apache.commons.lang3.time.DateUtilsTest#testMonthIterator : true
org.apache.commons.lang3.time.DateUtilsTest#testRoundLang346 : true
org.apache.commons.lang3.time.DateUtilsTest#testSetMilliseconds : true
org.apache.commons.lang3.time.DateUtilsTest#testTruncate : true
org.apache.commons.lang3.time.DateUtilsTest#testIsSameLocalTime_Cal : false
org.apache.commons.lang3.time.DateUtilsTest#testAddDays : true
org.apache.commons.lang3.time.DateUtilsTest#testRound : true
org.apache.commons.lang3.time.DateUtilsTest#testParseDate : true
org.apache.commons.lang3.time.DateUtilsTest#testCeil : true
org.apache.commons.lang3.time.DateUtilsTest#testAddSeconds : true
org.apache.commons.lang3.time.DateUtilsTest#testSetMinutes : true
org.apache.commons.lang3.time.DateUtilsTest#testToCalendar : true
org.apache.commons.lang3.time.DateUtilsTest#testAddHours : true
org.apache.commons.lang3.time.DateUtilsTest#testAddWeeks : true
org.apache.commons.lang3.time.DateUtilsTest#testAddYears : true
org.apache.commons.lang3.time.DateUtilsTest#testTruncateLang59 : true
org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_Date : true
org.apache.commons.lang3.time.DateUtilsTest#testLang530 : true
org.apache.commons.lang3.time.DateUtilsTest#testSetSeconds : true
org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_Cal : true
org.apache.commons.lang3.time.DateUtilsTest#testAddMonths : true
org.apache.commons.lang3.time.DateUtilsTest#testWeekIterator : true
org.apache.commons.lang3.time.DateUtilsTest#testSetMonths : true
org.apache.commons.lang3.time.DateUtilsTest#testSetDays : true
org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_Date : true
org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_Cal : true
org.apache.commons.lang3.time.DateUtilsTest#testIteratorEx : true
org.apache.commons.lang3.time.DateUtilsTest#testAddMilliseconds : true
org.apache.commons.lang3.time.DateUtilsTest#testConstructor : true
org.apache.commons.lang3.time.DateUtilsTest#testSetHours : true
org.apache.commons.lang3.time.DateUtilsTest#testSetYears : true
org.apache.commons.lang3.PairTest#testSerialization : true
org.apache.commons.lang3.PairTest#testBasic : true
org.apache.commons.lang3.PairTest#testToString : true
org.apache.commons.lang3.PairTest#testHashCode : true
org.apache.commons.lang3.PairTest#testEquals : true
org.apache.commons.lang3.PairTest#testPairOf : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testPassAfterShutdown : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireMultipleThreads : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInitInvalidPeriod : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireMultiplePeriods : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAverageCallsPerPeriod : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInit : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInitDefaultService : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownOwnExecutor : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorTask : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownMultipleTimes : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireNoLimit : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorNoTask : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireLimit : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testStartTimer : true
org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAvailablePermits : true
org.apache.commons.lang3.StringUtilsIsTest#testIsNumeric : true
org.apache.commons.lang3.StringUtilsIsTest#testIsWhitespace : true
org.apache.commons.lang3.StringUtilsIsTest#testIsAlphanumericSpace : true
org.apache.commons.lang3.StringUtilsIsTest#testIsNumericSpace : true
org.apache.commons.lang3.StringUtilsIsTest#testIsAsciiPrintable_String : true
org.apache.commons.lang3.StringUtilsIsTest#testIsAlphanumeric : true
org.apache.commons.lang3.StringUtilsIsTest#testIsAlpha : true
org.apache.commons.lang3.StringUtilsIsTest#testIsAlphaspace : true
org.apache.commons.lang3.RangeTest#testIsWithCompare : true
org.apache.commons.lang3.RangeTest#testSerializing : true
org.apache.commons.lang3.RangeTest#testRangeOfChars : true
org.apache.commons.lang3.RangeTest#testToString : true
org.apache.commons.lang3.RangeTest#testOverlapsRange : true
org.apache.commons.lang3.RangeTest#testEqualsObject : true
org.apache.commons.lang3.RangeTest#testBetweenWithCompare : true
org.apache.commons.lang3.RangeTest#testContainsRange : true
org.apache.commons.lang3.RangeTest#testContains : true
org.apache.commons.lang3.RangeTest#testElementAfter : true
org.apache.commons.lang3.RangeTest#testElementBefore : true
org.apache.commons.lang3.RangeTest#testElementCompareTo : true
org.apache.commons.lang3.RangeTest#testHashCode : true
org.apache.commons.lang3.RangeTest#testGetMaximum : true
org.apache.commons.lang3.RangeTest#testComparableConstructors : true
org.apache.commons.lang3.RangeTest#testGetMinimum : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetContentEnd : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetSizeStartText : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetContentStart : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetNullText : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetSizeEndText : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetFieldNameValueSeparator : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetArrayEnd : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetSummaryObjectStartText : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetFieldSeparator : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetArraySeparator : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetArrayStart : true
org.apache.commons.lang3.builder.ToStringStyleTest#testSetSummaryObjectEndText : true
org.apache.commons.lang3.mutable.MutableByteTest#testToString : true
org.apache.commons.lang3.mutable.MutableByteTest#testConstructors : true
org.apache.commons.lang3.mutable.MutableByteTest#testCompareTo : true
org.apache.commons.lang3.mutable.MutableByteTest#testIncrement : true
org.apache.commons.lang3.mutable.MutableByteTest#testPrimitiveValues : true
org.apache.commons.lang3.mutable.MutableByteTest#testSubtractValuePrimitive : true
org.apache.commons.lang3.mutable.MutableByteTest#testHashCode : true
org.apache.commons.lang3.mutable.MutableByteTest#testAddValuePrimitive : true
org.apache.commons.lang3.mutable.MutableByteTest#testSubtractValueObject : true
org.apache.commons.lang3.mutable.MutableByteTest#testDecrement : true
org.apache.commons.lang3.mutable.MutableByteTest#testEquals : true
org.apache.commons.lang3.mutable.MutableByteTest#testGetSet : true
org.apache.commons.lang3.mutable.MutableByteTest#testToByte : true
org.apache.commons.lang3.mutable.MutableByteTest#testAddValueObject : true
Candidate [className=org.apache.commons.lang3.time.DateUtils, methodName=org.apache.commons.lang3.time.DateUtils{isSameLocalTime(Ljava/util/Calendar;Ljava/util/Calendar;)Z 0.0, lineNumber=259, susp=1.0]
Candidate [className=org.apache.commons.lang3.time.DateUtils, methodName=org.apache.commons.lang3.time.DateUtils{isSameLocalTime(Ljava/util/Calendar;Ljava/util/Calendar;)Z 0.0, lineNumber=262, susp=1.0]
Parsing Phase...
org.apache.commons.lang3.time.DateUtils true
{org.apache.commons.lang3.time.DateUtils=false}
Ended Parsing Phase...
log4j:WARN No appenders could be found for logger (mainscala.Main$).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=6 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=8 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=10 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=12 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getClass() == cal2.getClass() 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=14 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=16 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=18 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=20 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=22 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=24 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=26 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=28 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 265 cal1.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils next().get(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=30 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal1.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils next().get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=32 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=34 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=36 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 264 cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=38 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 264 cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=40 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: roundUp
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=42 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean roundUp=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=44 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=46 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=48 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 265 cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=50 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=52 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=54 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=56 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: truncatedCal2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=58 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncatedCal2=truncate(cal2,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=60 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=62 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=64 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 262 cal2.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.006666666666666667 Total Prob:0.006666666666666667 for variant: ID=66 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal2.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0
Mutated: null
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=68 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=70 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=72 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=74 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Date
Why null: truncatedDate2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=76 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Date truncatedDate2=truncate(date2,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=78 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=80 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: cal2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=82 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar cal2=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=84 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=86 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=88 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=90 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.3 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=92 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=94 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=96 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=98 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
java.lang.ClassCastException: org.eclipse.jdt.core.dom.TypeBinding cannot be cast to org.eclipse.jdt.core.dom.PrimitiveType
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.liftedTree1$1(HistMutation.scala:207)
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.apply(HistMutation.scala:206)
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.apply(HistMutation.scala:158)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:245)
	at scala.collection.AbstractTraversable.map(Traversable.scala:104)
	at repair.histdriven.HistMutation.mutateIndividual(HistMutation.scala:158)
	at repair.geneticprogramming.GeneticProgrammingFactory.generateRandomCandidate(GeneticProgrammingFactory.scala:39)
	at repair.geneticprogramming.GeneticProgrammingFactory.generateRandomCandidate(GeneticProgrammingFactory.scala:19)
	at org.uncommons.watchmaker.framework.factories.AbstractCandidateFactory.generateInitialPopulation(AbstractCandidateFactory.java:72)
	at org.uncommons.watchmaker.framework.AbstractEvolutionEngine.evolvePopulation(AbstractEvolutionEngine.java:135)
	at org.uncommons.watchmaker.framework.AbstractEvolutionEngine.evolve(AbstractEvolutionEngine.java:93)
	at repair.histdriven.HistEvolve.evolveGenProg(HistEvolve.scala:49)
	at mainscala.Main$.main(Main.scala:129)
	at mainscala.Main.main(Main.scala)
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=100 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Created indv:ID=40 ParentID=4 TestScore=0.0 Probability=0.08 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=103 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=105 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=107 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=109 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=111 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=113 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=115 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=117 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=119 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=121 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=123 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=107 ParentID=101 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=126 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=128 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
int
Type Binding: int prim type: int
Source: 262 cal1.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (long)cal1.get(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=130 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils (long)cal1.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=132 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=134 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=136 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: offset
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=138 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: max
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=140 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int max=val.getActualMaximum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=142 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 269 269 cal1.getClass() == cal2.getClass() 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=144 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=146 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Created indv:ID=138 ParentID=124 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=149 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=151 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=153 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=155 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=157 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=159 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=161 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=163 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 264 cal1.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils toCalendar().get(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=165 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 264 cal1.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils toCalendar().get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: truncatedCal1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=167 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncatedCal1=truncate(cal1,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=169 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Created indv:ID=159 ParentID=147 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=172 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=174 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameLocalTime(cal2) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameLocalTime(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=176 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameLocalTime(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=178 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=180 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=182 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: cal1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=184 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar cal1=Calendar.getInstance();
 0.0 prob=0.3 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=186 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=188 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=190 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) != cal2.get(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=192 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) != cal2.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !truncatedEquals(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (!truncatedEquals(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=194 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (!truncatedEquals(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=196 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=198 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=200 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=202 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=204 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=206 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameDay(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (!isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=208 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (!isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=210 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=212 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils !isSameDay(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=216 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=218 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: str2
Why null: str
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=220 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils String str2=str;
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.WEEK_OF_YEAR 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=222 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.WEEK_OF_YEAR 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=224 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=226 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=228 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=230 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Date date=parser.parse(str2,pos);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=232 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=234 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=236 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=238 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 267 cal1.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=240 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal1.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.006666666666666667 Total Prob:0.006666666666666667 for variant: ID=242 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=244 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=246 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils truncatedEquals(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (truncatedEquals(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=248 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (truncatedEquals(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=250 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.HOUR_OF_DAY 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=252 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.HOUR_OF_DAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=254 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=256 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=258 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=260 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0
Mutated: null
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=262 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 263 cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils truncate().get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=264 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils truncate().get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=266 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 269 269 cal1.getClass() == cal2.getClass() 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=268 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Created indv:ID=252 ParentID=170 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.HOUR_OF_DAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=271 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=273 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=275 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=277 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=279 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 265 cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=281 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=283 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=285 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=287 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=289 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=291 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=271 ParentID=269 TestScore=0.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=294 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=296 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=298 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=300 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
int
Type Binding: int prim type: int
Source: 267 cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (double)cal2.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=302 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils (double)cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=304 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=306 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.SECOND 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=308 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.SECOND 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=310 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=312 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=314 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=304 ParentID=292 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=317 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 265 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=319 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: time
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=321 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils long time=date.getTime();
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=323 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=325 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=327 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=329 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=331 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=333 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: calendar
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=335 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar calendar=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=337 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Created indv:ID=319 ParentID=315 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0
Mutated: null
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=340 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameInstant(cal2) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null && (isSameInstant(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=342 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null && (isSameInstant(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=344 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=346 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=348 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=350 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=352 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=354 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new UnsupportedOperationException();
 0.0 prob=0.33 sim=0.5773502691896258) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=356 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.20666666666666667 Total Prob:0.20666666666666667 for variant: ID=358 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=358 ParentID=338 TestScore=0.0 Probability=0.20666666666666667 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=361 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=363 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=365 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=367 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: rounded
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=369 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar rounded=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=371 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: calendar
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=373 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar calendar=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=375 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=377 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=379 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=381 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=383 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=385 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=387 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=389 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=391 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.40824829046386296) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: truncatedDate2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=393 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date truncatedDate2=truncate(date2,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=395 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=397 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.40824829046386296) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=399 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=401 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=403 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=405 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=407 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=409 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=411 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new UnsupportedOperationException();
 0.0 prob=0.33 sim=0.5773502691896258) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils truncatedEquals(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null && (truncatedEquals(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=413 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null && (truncatedEquals(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) || cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=415 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) || cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=417 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=419 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=421 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 269 cal1.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils ceiling().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=423 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal1.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils ceiling().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: calendar
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=425 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar calendar=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=427 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=429 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=431 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=433 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=435 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=437 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: roundUp
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=439 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils boolean roundUp=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=441 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.YEAR 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.SATURDAY 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=443 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.SATURDAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=445 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: endCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=447 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils int endCutoff=Calendar.SATURDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=449 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=451 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=453 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=455 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=457 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=459 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Created indv:ID=381 ParentID=359 TestScore=0.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=462 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=464 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=466 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 268 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=468 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=470 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=472 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: min
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=474 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int min=val.getActualMinimum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 269 cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils iterator().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=476 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils iterator().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=478 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=480 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 268 cal1.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=482 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=468 ParentID=460 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=485 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=487 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=489 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=491 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=493 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=495 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=497 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameInstant(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameInstant(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=499 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameInstant(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=501 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=503 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=505 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=507 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=509 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: String
Why null: str2
Why null: str
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=511 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils String str2=str;
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=513 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=515 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 263 cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal2.get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=517 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=519 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=521 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=523 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.40824829046386296) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=525 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameDay(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=527 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=529 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=531 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 267 cal1.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=533 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal1.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: time
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=535 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils long time=date.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: result
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=537 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils long result=Long.MAX_VALUE;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=539 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=541 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=543 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 265 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=545 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=547 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=549 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: done
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=551 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 264 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=553 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=555 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 269 269 cal1.getClass() == cal2.getClass() 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=557 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=559 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=561 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=563 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=565 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=567 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=569 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=571 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 264 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=573 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 269 cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils iterator().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=575 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils iterator().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=577 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=579 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=581 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=583 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Created indv:ID=577 ParentID=483 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=586 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=588 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=590 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=592 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=594 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=596 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=598 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: parser
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=600 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.3 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=602 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=604 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=606 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=608 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=610 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=612 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=614 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 267 cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils truncate().get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=616 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils truncate().get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: str2
Why null: str
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=618 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils String str2=str;
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=620 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=622 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=624 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: ceiled
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=626 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar ceiled=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=628 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=630 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=632 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=634 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=636 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.MONTH 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=638 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MONTH 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=640 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=642 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 264 cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=644 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 264 cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=646 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=648 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=650 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=652 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=654 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) || cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=656 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) || cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=658 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils !isSameLocalTime(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameLocalTime(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=660 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameLocalTime(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=662 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: calendar
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=664 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar calendar=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: startCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=666 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=668 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !truncatedEquals(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (!truncatedEquals(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=670 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (!truncatedEquals(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=672 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=674 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=676 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=678 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=680 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=682 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: result
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=684 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils long result=0;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
Created indv:ID=638 ParentID=584 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MONTH 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=687 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=689 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=691 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=693 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=695 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=697 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameInstant(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=699 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=701 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: ParsePosition
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=703 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=705 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=707 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=689 ParentID=685 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=710 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=712 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=714 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=716 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=718 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: rounded
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=720 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar rounded=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=722 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=724 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=726 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=728 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=730 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=734 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 263 cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=736 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=738 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=740 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=742 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=744 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 267 cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.006666666666666667 Total Prob:0.006666666666666667 for variant: ID=746 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils endFinal.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=748 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=750 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=752 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameLocalTime(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameLocalTime(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=754 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameLocalTime(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=756 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 264 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=758 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=760 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=762 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: max
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=764 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int max=val.getActualMaximum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=766 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=768 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=770 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=772 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=774 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=776 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
java.lang.ClassCastException: org.eclipse.jdt.core.dom.TypeBinding cannot be cast to org.eclipse.jdt.core.dom.PrimitiveType
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.liftedTree1$1(HistMutation.scala:207)
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.apply(HistMutation.scala:206)
	at repair.histdriven.HistMutation$$anonfun$mutateIndividual$1.apply(HistMutation.scala:158)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:245)
	at scala.collection.AbstractTraversable.map(Traversable.scala:104)
	at repair.histdriven.HistMutation.mutateIndividual(HistMutation.scala:158)
	at repair.geneticprogramming.GeneticProgrammingFactory.generateRandomCandidate(GeneticProgrammingFactory.scala:39)
	at repair.geneticprogramming.GeneticProgrammingFactory.generateRandomCandidate(GeneticProgrammingFactory.scala:19)
	at org.uncommons.watchmaker.framework.factories.AbstractCandidateFactory.generateInitialPopulation(AbstractCandidateFactory.java:72)
	at org.uncommons.watchmaker.framework.AbstractEvolutionEngine.evolvePopulation(AbstractEvolutionEngine.java:135)
	at org.uncommons.watchmaker.framework.AbstractEvolutionEngine.evolve(AbstractEvolutionEngine.java:93)
	at repair.histdriven.HistEvolve.evolveGenProg(HistEvolve.scala:49)
	at mainscala.Main$.main(Main.scala:129)
	at mainscala.Main.main(Main.scala)
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: truncatedDate1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=778 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date truncatedDate1=truncate(date1,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=780 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=782 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: end
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=784 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar end=null;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=786 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=788 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=790 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=792 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=794 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=796 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=798 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=800 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Calendar
Why null: truncatedCal2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=802 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar truncatedCal2=truncate(cal2,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.20666666666666667 Total Prob:0.20666666666666667 for variant: ID=804 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=806 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Created indv:ID=744 ParentID=708 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: ParsePosition
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=809 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=811 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameInstant(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (!isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=813 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (!isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=815 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=817 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils truncatedEquals(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (truncatedEquals(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=819 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (truncatedEquals(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=821 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Date date=val.getTime();
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=823 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=825 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 268 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=827 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=829 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Created indv:ID=809 ParentID=807 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=832 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=834 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=836 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=838 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: ceiled
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=840 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar ceiled=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: done
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=842 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=844 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=846 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=848 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=850 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=852 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Created indv:ID=836 ParentID=830 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=855 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=857 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new UnsupportedOperationException();
 0.0 prob=0.33 sim=0.5773502691896258) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=859 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=861 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=863 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=865 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=867 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=869 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=871 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=873 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=875 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=863 ParentID=853 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=878 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=880 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=882 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=884 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=886 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) != cal2.get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=888 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) != cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameInstant(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.18 Total Prob:0.18 for variant: ID=890 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=892 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=894 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=896 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=898 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Created indv:ID=888 ParentID=876 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) != cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=901 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=903 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=905 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=907 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=909 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Date date=parser.parse(str2,pos);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=911 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=913 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=915 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=917 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: minutes
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=919 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int minutes=val.get(Calendar.MINUTE);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=921 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=923 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=925 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=927 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=929 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: rounded
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=931 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar rounded=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=933 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=935 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=937 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=939 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=941 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=943 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=945 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=947 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=949 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=951 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=953 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: result
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=955 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils long result=Long.MAX_VALUE;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=957 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=959 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=961 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=963 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=965 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=967 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.3 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: start
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=969 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar start=null;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 266 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=971 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=973 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=975 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=977 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=979 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=981 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: done
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=983 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=985 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=987 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=989 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=991 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 268 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=993 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=995 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=997 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.20666666666666667 Total Prob:0.20666666666666667 for variant: ID=999 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=947 ParentID=899 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1002 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1004 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1006 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1008 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1010 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1012 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1014 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1016 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1018 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1020 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1022 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Created indv:ID=1014 ParentID=1000 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1025 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: done
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1027 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1029 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1031 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1033 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1035 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1037 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1039 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1041 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1043 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1045 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Created indv:ID=1027 ParentID=1023 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1048 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1050 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1052 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
Source: 268 cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1054 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1056 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1058 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1060 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1062 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 263 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1064 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1066 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1068 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1070 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1072 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1074 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: endCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1076 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils int endCutoff=Calendar.SATURDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1078 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1080 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: time
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1082 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils long time=date.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 269 cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils toCalendar().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1084 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils toCalendar().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisecs
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1086 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int millisecs=val.get(Calendar.MILLISECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1088 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 267 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1090 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1092 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1094 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1096 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1098 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1100 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1102 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1104 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.20666666666666667 Total Prob:0.20666666666666667 for variant: ID=1106 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1108 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1110 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1112 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0
Mutated: null
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1114 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1116 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1118 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1120 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1122 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1124 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1126 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1128 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: min
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1130 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils int min=val.getActualMinimum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 265 cal1.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1132 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal1.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1134 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1136 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1138 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1140 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1142 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1144 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Created indv:ID=1128 ParentID=1046 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1147 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1149 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1151 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1153 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1155 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: time
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1157 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils long time=date.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1159 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1161 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1163 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1165 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1167 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=1147 ParentID=1145 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameLocalTime(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameLocalTime(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1170 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameLocalTime(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1172 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1174 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1176 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1178 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1180 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1182 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1184 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1186 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1188 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1190 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1192 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1194 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1196 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1198 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1200 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1202 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Calendar
Why null: start
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1204 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar start=null;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1206 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1208 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1210 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1212 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1214 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar cal1=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1216 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameInstant(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1218 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1220 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1222 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.5170364906592835) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1224 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1226 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1228 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1230 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameDay(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1232 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1234 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1236 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1238 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1240 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1242 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1244 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1246 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 266 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1248 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1250 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1252 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1254 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1256 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1258 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1260 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1262 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: cal1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1264 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar cal1=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1266 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getClass() == cal2.getClass() 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1268 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=1266 ParentID=1168 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1271 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) != cal2.get(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1273 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) != cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 263 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1275 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1277 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1279 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1281 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1283 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1285 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar cal1=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1287 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1289 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1291 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=1281 ParentID=1269 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1294 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1296 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1298 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1300 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1302 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.18 Total Prob:0.18 for variant: ID=1304 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: done
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1306 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1308 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1310 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1312 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1314 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1316 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1318 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1320 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1322 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1324 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1326 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 262 cal1.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1328 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1330 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1332 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1334 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Created indv:ID=1320 ParentID=1292 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1339 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1341 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: startCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1343 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 269 269 cal1.getClass() == cal2.getClass() 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1345 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 265 cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1347 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1349 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 262 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1351 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 265 cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (long)cal2.get(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1353 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils (long)cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1355 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1357 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1359 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Created indv:ID=1359 ParentID=1337 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1362 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1364 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1366 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1368 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 267 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1370 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1372 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.3 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameInstant(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1374 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1376 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1378 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1380 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 269 cal1.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils spot.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.006666666666666667 Total Prob:0.006666666666666667 for variant: ID=1382 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal1.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils spot.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1384 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1386 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1388 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1390 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1392 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1394 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1396 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: min
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1398 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils int min=val.getActualMinimum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1400 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1402 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1404 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1406 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Trying delete: 269 269 cal1.getClass() == cal2.getClass() 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1408 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1410 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1412 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1414 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1416 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1418 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1420 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.MONDAY 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1422 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MONDAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1424 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: offset
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1426 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1428 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 264 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1430 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: time
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1432 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils long time=date.getTime();
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1434 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1436 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1438 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1440 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.YEAR) != cal2.get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1442 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.YEAR) != cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1444 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1446 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new UnsupportedOperationException();
 0.0 prob=0.33 sim=0.5773502691896258) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1448 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal2.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1450 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal2.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1452 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameLocalTime(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameLocalTime(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1454 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (!isSameLocalTime(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1456 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1458 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1460 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=1366 ParentID=1360 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1463 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: offset
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1465 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1467 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1469 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1471 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1473 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1475 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1477 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1479 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1481 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1483 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Created indv:ID=1471 ParentID=1461 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1486 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1488 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1490 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1494 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1496 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.3 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1498 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1500 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1502 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Calendar
Why null: truncatedCal1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1504 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar truncatedCal1=truncate(cal1,field);
 0.0 prob=0.3 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1506 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Created indv:ID=1486 ParentID=1484 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1509 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.AM_PM 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1511 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.AM_PM 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1513 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1515 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1517 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1519 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1521 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils spot.get(Calendar.MILLISECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.006666666666666667 Total Prob:0.006666666666666667 for variant: ID=1523 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) 1.0 by org.apache.commons.lang3.time.DateUtils spot.get(Calendar.MILLISECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: String
Why null: pattern
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1525 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils String pattern=parsePatterns[i];
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1527 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1529 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: startCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1531 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: startCutoff
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1533 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) || cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1535 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) || cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1537 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: parser
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1539 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1541 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1543 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1545 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1547 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1549 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Invokers: ArrayBuffer(toCalendar(), round(), truncate(), ceiling(), iterator(), iterator(), iterator(), endFinal, spot, next())
int
Type Binding: int prim type: int
Source: 263 cal1.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1551 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal1.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal1.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1553 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 267 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1555 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1557 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1559 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1561 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0
Mutated: org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1563 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MINUTE 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1565 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1567 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1569 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1571 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 267 cal1.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils next().get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1573 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal1.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils next().get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 267 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1575 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1577 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1579 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 265 cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (float)cal2.get(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1581 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils (float)cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1583 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1585 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1587 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1589 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 267 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1591 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1593 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1595 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1597 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1599 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: ceiled
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1601 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar ceiled=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1603 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1605 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.3 sim=0.6546536707079772) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1607 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=1533 ParentID=1507 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1610 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1612 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1614 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1616 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1618 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new ArithmeticException("Calendar value too large for accurate calculations");
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.08 Total Prob:0.08 for variant: ID=1620 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: cal1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1622 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar cal1=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1624 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1626 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: roundUp
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1628 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean roundUp=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1630 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1632 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameLocalTime(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameLocalTime(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1634 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameLocalTime(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 263 cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1636 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1638 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !truncatedEquals(cal2) 1.0
cal2 == null
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal2 == null && (!truncatedEquals(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1640 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal2 == null && (!truncatedEquals(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1642 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1644 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: gval
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1646 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1648 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: seconds
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1650 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils int seconds=val.get(Calendar.SECOND);
 0.0 prob=0.3 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1652 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
boolean
Type Binding: boolean prim type: boolean
org.apache.commons.lang3.time.DateUtils isSameDay(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.57 Total Prob:0.57 for variant: ID=1654 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (isSameDay(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1656 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !truncatedEquals(cal2) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (!truncatedEquals(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1658 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (!truncatedEquals(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1660 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: rounded
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1662 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar rounded=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1664 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: roundUp
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1666 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils boolean roundUp=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1668 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1670 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1672 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: start
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1674 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar start=null;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: millisPerUnit
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1676 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils long millisPerUnit=getMillisPerUnit(unit);
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: truncated
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1678 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar truncated=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Calendar
Why null: start
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1680 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils Calendar start=null;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1682 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 266 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1684 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 269 cal1.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils toCalendar().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1686 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal1.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils toCalendar().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1688 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1690 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1692 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1694 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) != cal2.get(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1696 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) != cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.01 Total Prob:0.01 for variant: ID=1698 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1700 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1702 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1704 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1706 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.getMillisPerUnit(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils isSameLocalTime(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null && (isSameLocalTime(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1708 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null && (isSameLocalTime(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=1660 ParentID=1608 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1711 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) || cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1713 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) || cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1715 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 269 cal1.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils ceiling().getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1717 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 269 cal1.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils ceiling().getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: pos
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1719 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameLocalTime(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameLocalTime(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.18 Total Prob:0.18 for variant: ID=1721 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!isSameLocalTime(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1723 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1725 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Trying delete: 268 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1727 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1729 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !truncatedEquals(cal2) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!truncatedEquals(cal2))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.18 Total Prob:0.18 for variant: ID=1731 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null || (!truncatedEquals(cal2))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Created indv:ID=1711 ParentID=1709 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
int
Type Binding: int prim type: int
Source: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (double)cal2.get(Calendar.DAY_OF_YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1734 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils (double)cal2.get(Calendar.DAY_OF_YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: parser
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1736 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: seconds
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1738 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils int seconds=val.get(Calendar.SECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal2 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1740 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: truncatedDate1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1742 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Date truncatedDate1=truncate(date1,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1744 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1746 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1748 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: minutes
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1750 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int minutes=val.get(Calendar.MINUTE);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: seconds
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1752 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int seconds=val.get(Calendar.SECOND);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1754 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=1736 ParentID=1732 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 267 cal2.get(Calendar.YEAR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.YEAR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1757 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 267 cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils iterator().get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1761 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1763 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: rounded
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1765 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar rounded=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: max
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1767 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils int max=val.getActualMaximum(fields[i][0]);
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1769 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1771 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1773 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1775 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 263 cal2.get(Calendar.SECOND) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils next().get(Calendar.SECOND) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.33666666666666667 Total Prob:0.33666666666666667 for variant: ID=1777 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils next().get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Created indv:ID=1759 ParentID=1755 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: result
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1780 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils long result=0;
 0.0 prob=0.33 sim=0.4216370213557839) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1782 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1784 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new NoSuchElementException();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1786 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: result
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1788 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils long result=Long.MAX_VALUE;
 0.0 prob=0.33 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1790 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return isSameDay(cal1,cal2);
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.20666666666666667 Total Prob:0.20666666666666667 for variant: ID=1792 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1794 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1796 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils break;
 0.0 prob=0.3 sim=0.214422506967559) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1798 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: parser
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1800 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1802 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameInstant(cal1) 1.0
cal1 == null || cal2 == null
Source: 259 cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1804 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || cal2 == null && (!isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1806 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1808 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1810 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1812 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1814 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Calendar cal2=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
Source: 259 cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 != null 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1816 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1818 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: Date
Why null: truncatedDate1
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1820 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils Date truncatedDate1=truncate(date1,field);
 0.0 prob=0.33 sim=0.2581988897471611) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1822 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1824 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1826 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
org.apache.commons.lang3.time.DateUtils !isSameInstant(cal1) 1.0
cal1 == null
Source: 259 cal1 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameInstant(cal1))) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1828 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils (cal1 == null || (!isSameInstant(cal1))) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1830 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1832 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: cal2
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1834 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar cal2=Calendar.getInstance();
 0.0 prob=0.33 sim=0.6546536707079772) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: Date
Why null: date
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1836 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Date date=parser.parse(str2,pos);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
boolean
Type Binding: boolean prim type: boolean
Source: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1838 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1840 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1842 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Source Exps =ArrayBuffer(259 cal1 == null || cal2 == null 1.0, 259 cal1 == null 1.0, 259 cal2 == null 1.0)
boolean
Type Binding: boolean prim type: boolean
Trying delete: 259 259 cal1 == null 1.0
Source: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2 == null 1.0
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1844 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 268 cal2.get(Calendar.ERA) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.ERA) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.07666666666666666 Total Prob:0.07666666666666666 for variant: ID=1846 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal2.getMillisPerUnit(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1848 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1850 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1852 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1854 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1856 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.3 sim=0.9801960588196069) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1858 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Source Exps =ArrayBuffer(262 (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) 1.0, 262 cal1.get(Calendar.MILLISECOND) 1.0, 262 cal2.get(Calendar.MILLISECOND) 1.0, 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0, 263 cal1.get(Calendar.SECOND) 1.0, 263 cal2.get(Calendar.SECOND) 1.0, 264 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0, 264 cal1.get(Calendar.MINUTE) 1.0, 264 cal2.get(Calendar.MINUTE) 1.0, 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0, 265 cal1.get(Calendar.HOUR) 1.0, 265 cal2.get(Calendar.HOUR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal1.get(Calendar.DAY_OF_YEAR) 1.0, 266 cal2.get(Calendar.DAY_OF_YEAR) 1.0, 267 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0, 267 cal1.get(Calendar.YEAR) 1.0, 267 cal2.get(Calendar.YEAR) 1.0, 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0, 268 cal1.get(Calendar.ERA) 1.0, 268 cal2.get(Calendar.ERA) 1.0, 269 cal1.getClass() == cal2.getClass() 1.0, 269 cal1.getClass() 1.0, 269 cal2.getClass() 1.0)
Source: 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0
Mutated: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.HOUR) != cal2.get(Calendar.HOUR) 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1860 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 265 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.HOUR) != cal2.get(Calendar.HOUR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1862 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: offsetSet
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1864 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
REPLACE
Why null: roundUp
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1866 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils boolean roundUp=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 259 if(cal1 == null || cal2 == null){...} 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: ceiled
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1868 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils Calendar ceiled=(Calendar)date.clone();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1870 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("Date and Patterns must not be null");
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1872 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
FIX STRAT: BY_CURNODE
Processing Fix space for: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0
Name: org.apache.commons.lang3.time.DateUtils
Why null: c
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1874 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar c=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1876 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
Name: org.apache.commons.lang3.time.DateUtils
REMOVE
Computed last prob: 0.0033333333333333335 Total Prob:0.0033333333333333335 for variant: ID=1878 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Del: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 0.33) Compile? true Found after: 0 milisec
Created indv:ID=1838 ParentID=1778 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
Evaluating indv: 40
Indv: ID=40 ParentID=4 TestScore=0.0 Probability=0.08 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/40
End Evaluation indv: ID=40 score=0.11072664359861592
Evaluating indv: 107
Indv: ID=107 ParentID=101 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/107
End Evaluation indv: ID=107 score=0.11072664359861592
Evaluating indv: 138
Indv: ID=138 ParentID=124 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/138
End Evaluation indv: ID=138 score=0.11072664359861592
Evaluating indv: 159
Indv: ID=159 ParentID=147 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/159
End Evaluation indv: ID=159 score=0.11072664359861592
Evaluating indv: 252
Indv: ID=252 ParentID=170 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.HOUR_OF_DAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/252
End Evaluation indv: ID=252 score=0.11072664359861592
Evaluating indv: 271
Indv: ID=271 ParentID=269 TestScore=0.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/271
End Evaluation indv: ID=271 score=0.11072664359861592
Evaluating indv: 304
Indv: ID=304 ParentID=292 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/304
End Evaluation indv: ID=304 score=0.11072664359861592
Evaluating indv: 319
Indv: ID=319 ParentID=315 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/319
End Evaluation indv: ID=319 score=0.11072664359861592
Evaluating indv: 358
Indv: ID=358 ParentID=338 TestScore=0.0 Probability=0.20666666666666667 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/358
End Evaluation indv: ID=358 score=0.11072664359861592
Evaluating indv: 381
Indv: ID=381 ParentID=359 TestScore=0.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/381
End Evaluation indv: ID=381 score=0.11072664359861592
Evaluating indv: 468
Indv: ID=468 ParentID=460 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/468
End Evaluation indv: ID=468 score=0.11072664359861592
Evaluating indv: 577
Indv: ID=577 ParentID=483 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/577
End Evaluation indv: ID=577 score=0.11072664359861592
Evaluating indv: 638
Indv: ID=638 ParentID=584 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MONTH 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/638
End Evaluation indv: ID=638 score=0.11072664359861592
Evaluating indv: 689
Indv: ID=689 ParentID=685 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/689
End Evaluation indv: ID=689 score=0.11072664359861592
Evaluating indv: 744
Indv: ID=744 ParentID=708 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/744
End Evaluation indv: ID=744 score=0.11072664359861592
Evaluating indv: 809
Indv: ID=809 ParentID=807 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/809
End Evaluation indv: ID=809 score=0.11072664359861592
Evaluating indv: 836
Indv: ID=836 ParentID=830 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/836
End Evaluation indv: ID=836 score=0.11072664359861592
Evaluating indv: 863
Indv: ID=863 ParentID=853 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/863
End Evaluation indv: ID=863 score=0.11072664359861592
Evaluating indv: 888
Indv: ID=888 ParentID=876 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) != cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/888
End Evaluation indv: ID=888 score=0.11072664359861592
Evaluating indv: 947
Indv: ID=947 ParentID=899 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/947
End Evaluation indv: ID=947 score=0.11072664359861592
Evaluating indv: 1014
Indv: ID=1014 ParentID=1000 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1014
End Evaluation indv: ID=1014 score=0.11072664359861592
Evaluating indv: 1027
Indv: ID=1027 ParentID=1023 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1027
End Evaluation indv: ID=1027 score=0.11072664359861592
Evaluating indv: 1128
Indv: ID=1128 ParentID=1046 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1128
End Evaluation indv: ID=1128 score=0.11072664359861592
Evaluating indv: 1147
Indv: ID=1147 ParentID=1145 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1147
End Evaluation indv: ID=1147 score=0.11072664359861592
Evaluating indv: 1266
Indv: ID=1266 ParentID=1168 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1266
End Evaluation indv: ID=1266 score=0.11072664359861592
Evaluating indv: 1281
Indv: ID=1281 ParentID=1269 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1281
End Evaluation indv: ID=1281 score=0.11072664359861592
Evaluating indv: 1320
Indv: ID=1320 ParentID=1292 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1320
End Evaluation indv: ID=1320 score=0.11072664359861592
Evaluating indv: 1359
Indv: ID=1359 ParentID=1337 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1359
End Evaluation indv: ID=1359 score=0.11072664359861592
Evaluating indv: 1366
Indv: ID=1366 ParentID=1360 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1366
End Evaluation indv: ID=1366 score=0.11072664359861592
Evaluating indv: 1471
Indv: ID=1471 ParentID=1461 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1471
End Evaluation indv: ID=1471 score=0.11072664359861592
Evaluating indv: 1486
Indv: ID=1486 ParentID=1484 TestScore=0.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1486
End Evaluation indv: ID=1486 score=0.11072664359861592
Evaluating indv: 1533
Indv: ID=1533 ParentID=1507 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1533
End Evaluation indv: ID=1533 score=0.11072664359861592
Evaluating indv: 1660
Indv: ID=1660 ParentID=1608 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1660
End Evaluation indv: ID=1660 score=0.11072664359861592
Evaluating indv: 1711
Indv: ID=1711 ParentID=1709 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1711
End Evaluation indv: ID=1711 score=0.11072664359861592
Evaluating indv: 1736
Indv: ID=1736 ParentID=1732 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1736
End Evaluation indv: ID=1736 score=0.11072664359861592
Evaluating indv: 1759
Indv: ID=1759 ParentID=1755 TestScore=0.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1759
End Evaluation indv: ID=1759 score=0.11072664359861592
Evaluating indv: 1838
Indv: ID=1838 ParentID=1778 TestScore=0.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 0 milisec
VAR FOLDER: /gpfs/data/people/qx5/hdrepair_repair_expts/repair/Lang_21/r0/1838
End Evaluation indv: ID=1838 score=0.11072664359861592
Generation 0 Best Candidate:ID=1 ParentID=0 TestScore=0.0 Probability=0.0 Gener Score 0.8858131487889274 Genome: ArrayBuffer() Compile? true Found after: 0 milisec
===============================Solutions Found: 
ID=1880 ParentID=4 TestScore=10.0 Probability=0.08 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 561063 milisec
ID=1882 ParentID=101 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Del: 259 if(cal1 == null || cal2 == null){...} 1.0 0.33) Compile? true Found after: 562144 milisec
ID=1884 ParentID=124 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int offset=0;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 563156 milisec
ID=1886 ParentID=147 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 564393 milisec
ID=1888 ParentID=170 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.DAY_OF_YEAR 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.HOUR_OF_DAY 1.0 prob=0.33 sim=0.5) Compile? true Found after: 565901 milisec
ID=1890 ParentID=269 TestScore=10.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal2 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 567144 milisec
ID=1892 ParentID=292 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils return cal1.getTime().getTime() == cal2.getTime().getTime();
 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 568197 milisec
ID=1894 ParentID=315 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 569559 milisec
ID=1896 ParentID=338 TestScore=10.0 Probability=0.20666666666666667 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass() 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) || cal1.getClass() == cal2.getClass() 1.0 prob=0.33 sim=0.5) Compile? true Found after: 571094 milisec
ID=1898 ParentID=359 TestScore=10.0 Probability=0.07666666666666666 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 != null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 572135 milisec
ID=1900 ParentID=460 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 573507 milisec
ID=1902 ParentID=483 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 574476 milisec
ID=1904 ParentID=584 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.MONTH 1.0 prob=0.33 sim=0.5) Compile? true Found after: 575530 milisec
ID=1906 ParentID=685 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 by org.apache.commons.lang3.time.DateUtils throw new IllegalArgumentException("The date must not be null");
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 577201 milisec
ID=1908 ParentID=708 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 578649 milisec
ID=1910 ParentID=807 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils ParsePosition pos=new ParsePosition(0);
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 580861 milisec
ID=1912 ParentID=830 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 582099 milisec
ID=1914 ParentID=853 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: org.apache.commons.lang3.time.DateUtils Calendar.MILLISECOND 1.0 by org.apache.commons.lang3.time.DateUtils Calendar.ERA 1.0 prob=0.33 sim=0.5) Compile? true Found after: 583175 milisec
ID=1916 ParentID=876 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 263 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.SECOND) != cal2.get(Calendar.SECOND) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 584194 milisec
ID=1918 ParentID=899 TestScore=10.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 585610 milisec
ID=1920 ParentID=1000 TestScore=10.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal1 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 586898 milisec
ID=1922 ParentID=1023 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils boolean done=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 587882 milisec
ID=1924 ParentID=1046 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 589060 milisec
ID=1926 ParentID=1145 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 268 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.ERA) != cal2.get(Calendar.ERA) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 590528 milisec
ID=1928 ParentID=1168 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(App: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.3 sim=1.0000000000000002) Compile? true Found after: 591591 milisec
ID=1930 ParentID=1269 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 592588 milisec
ID=1932 ParentID=1292 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils Calendar gval=Calendar.getInstance();
 0.0 prob=0.33 sim=0.8660254037844387) Compile? true Found after: 593778 milisec
ID=1934 ParentID=1337 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils boolean offsetSet=false;
 0.0 prob=0.33 sim=0.5973921019063395) Compile? true Found after: 594867 milisec
ID=1936 ParentID=1360 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) || cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 596243 milisec
ID=1938 ParentID=1461 TestScore=10.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 597525 milisec
ID=1940 ParentID=1484 TestScore=10.0 Probability=0.01 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 598817 milisec
ID=1942 ParentID=1507 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 262 return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
 1.0 with org.apache.commons.lang3.time.DateUtils int startCutoff=Calendar.SUNDAY;
 0.0 prob=0.33 sim=0.5170364906592835) Compile? true Found after: 600732 milisec
ID=1944 ParentID=1608 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null && cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 601786 milisec
ID=1946 ParentID=1709 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 cal1 == null || cal2 == null 1.0 by org.apache.commons.lang3.time.DateUtils cal1 == null || cal2 == null || cal1 == null || cal2 == null 1.0 prob=0.33 sim=0.5) Compile? true Found after: 602786 milisec
ID=1948 ParentID=1732 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Prepend: 259 if(cal1 == null || cal2 == null){...} 1.0 with org.apache.commons.lang3.time.DateUtils SimpleDateFormat parser=new SimpleDateFormat();
 0.0 prob=0.33 sim=0.5895063447465633) Compile? true Found after: 604081 milisec
ID=1950 ParentID=1755 TestScore=10.0 Probability=0.0 Gener Score 0.003 Genome: ArrayBuffer(Rep: 259 if(cal1 == null || cal2 == null){...} 1.0 by org.apache.commons.lang3.time.DateUtils if(cal1 == null || cal2 == null){...} 0.0 prob=0.33 sim=1.0000000000000002) Compile? true Found after: 605547 milisec
ID=1952 ParentID=1778 TestScore=10.0 Probability=0.0033333333333333335 Gener Score 0.003 Genome: ArrayBuffer(Rep: 262 cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 by org.apache.commons.lang3.time.DateUtils cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) || cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) 1.0 prob=0.33 sim=0.5) Compile? true Found after: 606927 milisec
Elapsed Time: 606 seconds
